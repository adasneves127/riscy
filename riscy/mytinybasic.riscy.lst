
0000		org	0
0000		sliu d 15
0001		slil d 15
0002		stackpage	d	

0003		sliu c 8
0004		slil c 0
0005		page	c
0006		sub	c c
0007		sliu a 0
0008		slil a 0
0009		store	a [c]
000a		inc	c
000b		sliu a 0
000c		slil a 0
000d		store	a [c]
000e		inc	c
000f		sliu a 0
0010		slil a 0
0011		store	a [c]
0012		inc	c
0013		sliu a 0
0014		slil a 0
0015		store	a [c]
0016		inc	c
0017		sliu a 0
0018		slil a 0
0019		store	a [c]
001a		inc	c
001b		sliu a 12
001c		slil a 8
001d		store	a [c]
001e		inc	c
001f		sliu a 12
0020		slil a 8
0021		store	a [c]
0022		inc	c
0023		sliu a 14
0024		slil a 12
0025		store	a [c]
0026		inc	c
0027		sliu a 12
0028		slil a 12
0029		store	a [c]
002a		inc	c
002b		sliu a 9
002c		slil a 15
002d		store	a [c]	

002e		sliu c 8
002f		slil c 0
0030		sub	a a
0031		jmpfar	a a
0032		org	80
0080	#beginning	; calling global function setupdisplay

0080		push	d
0081		push	c
0082		push	b
0083		sliu d 0
0084		slil d 0
0085		push	d
0086		push	c
0087		sliu c 0
0088		slil c 1
0089		sliu d #setupdisplay	[00]
008a		slil d #setupdisplay	[00]
008b		jmpfar	d d
008c		pop	b
008d		pop	c
008e		pop	d	; calling global function monitor_entry

008f		push	d
0090		push	c
0091		push	b
0092		sliu d 0
0093		slil d 0
0094		push	d
0095		push	c
0096		sliu c 0
0097		slil c 2
0098		sliu d #monitor_entry	[00]
0099		slil d #monitor_entry	[00]
009a		jmpfar	d d
009b		pop	b
009c		pop	c
009d		pop	d	

009e		halt	

009f		org	100	
	; ------- GLOBAL FUNCTION setupdisplay -------

0100	#setupdisplay
0100		pop	c
0101		push	d
0102		sliu d 0
0103		slil d 1
0104		out	d
0105		sliu d 8
0106		slil d 0
0107		out	d	;	li	d,0x02
	;	out	d
	;	li	d,0x02
	;	out	d
	;	li	d,0x0c
	;	out	d
	;	li	d,0x00
	;	out	d
	;	li	d,0x0f
	;	out	d
	;	li	d,0x00
	;	out	d
	;	li	d,0x01
	;	out	d

0108		pop	d
0109		pop	c
010a		jmpfar	d d	
	; setupdisplay ends
	
	

010b		org	200	
	; ------- GLOBAL FUNCTION monitor_entry -------

0200	#monitor_entry
0200		pop	c
0201		push	d		; print out "RISCY Monitor"

0202		sliu a 7
0203		slil a 15
0204		sliu b #monitor_message	[00]
0205		slil b #monitor_message	[00]	; calling global function printstring

0206		push	d
0207		push	c
0208		push	b
0209		sliu d 0
020a		slil d 2
020b		push	d
020c		push	c
020d		sliu c 0
020e		slil c 5
020f		sliu d #printstring	[00]
0210		slil d #printstring	[00]
0211		jmpfar	d d
0212		pop	b
0213		pop	c
0214		pop	d
0215	#monitor	; calling global function readprompt

0215		push	d
0216		push	c
0217		push	b
0218		sliu d 0
0219		slil d 2
021a		push	d
021b		push	c
021c		sliu c 0
021d		slil c 8
021e		sliu d #readprompt	[02]
021f		slil d #readprompt	[02]
0220		jmpfar	d d
0221		pop	b
0222		pop	c
0223		pop	d		; read a line into 0xfd:0

0224		sliu a 15
0225		slil a 13
0226		sliu b 0
0227		slil b 0	; calling global function readstring

0228		push	d
0229		push	c
022a		push	b
022b		sliu d 0
022c		slil d 2
022d		push	d
022e		push	c
022f		sliu c 0
0230		slil c 6
0231		sliu d #readstring	[01]
0232		slil d #readstring	[03]
0233		jmpfar	d d
0234		pop	b
0235		pop	c
0236		pop	d	
	;	.call clearscreen
		;get command

0237		sliu a 15
0238		slil a 13
0239		page	a
023a		sliu b 0
023b		slil b 0
023c		load	a [b]	
		;check command

023d		push	a
023e		sliu d 4
023f		slil d 4
0240		sub	a d
0241		sliu d #@monitor_entry0	[04]
0242		slil d #@monitor_entry0	[09]
0243		skipz	a
0244		jalr	d d
0245		pop	a
0246		sliu d #domonitordump	[07]
0247		slil d #domonitordump	[04]
0248		jalr	d d
0249	#@monitor_entry0
0249		pop	a
024a		push	a
024b		sliu d 4
024c		slil d 5
024d		sub	a d
024e		sliu d #@monitor_entry1	[05]
024f		slil d #@monitor_entry1	[06]
0250		skipz	a
0251		jalr	d d
0252		pop	a
0253		sliu d #domonitoredit	[08]
0254		slil d #domonitoredit	[06]
0255		jalr	d d
0256	#@monitor_entry1
0256		pop	a
0257		push	a
0258		sliu d 4
0259		slil d 7
025a		sub	a d
025b		sliu d #@monitor_entry2	[06]
025c		slil d #@monitor_entry2	[03]
025d		skipz	a
025e		jalr	d d
025f		pop	a
0260		sliu d #domonitorgo	[0a]
0261		slil d #domonitorgo	[0a]
0262		jalr	d d
0263	#@monitor_entry2
0263		pop	a
0264		push	a
0265		sliu d 4
0266		slil d 2
0267		sub	a d
0268		sliu d #@monitor_entry3	[07]
0269		slil d #@monitor_entry3	[00]
026a		skipz	a
026b		jalr	d d
026c		pop	a
026d		sliu d #domonitorbasic	[09]
026e		slil d #domonitorbasic	[08]
026f		jalr	d d
0270	#@monitor_entry3
0270		pop	a	

0271		sliu d #monitor	[01]
0272		slil d #monitor	[05]
0273		jalr	d d	

0274	#domonitordump	; calling global function monitordump

0274		push	d
0275		push	c
0276		push	b
0277		sliu d 0
0278		slil d 2
0279		push	d
027a		push	c
027b		sliu c 0
027c		slil c 3
027d		sliu d #monitordump	[00]
027e		slil d #monitordump	[00]
027f		jmpfar	d d
0280		pop	b
0281		pop	c
0282		pop	d
0283		sliu d #monitor	[01]
0284		slil d #monitor	[05]
0285		jalr	d d
0286	#domonitoredit	; calling global function monitoredit

0286		push	d
0287		push	c
0288		push	b
0289		sliu d 0
028a		slil d 2
028b		push	d
028c		push	c
028d		sliu c 0
028e		slil c 3
028f		sliu d #monitoredit	[09]
0290		slil d #monitoredit	[0c]
0291		jmpfar	d d
0292		pop	b
0293		pop	c
0294		pop	d
0295		sliu d #monitor	[01]
0296		slil d #monitor	[05]
0297		jalr	d d
0298	#domonitorbasic	; calling global function basic

0298		push	d
0299		push	c
029a		push	b
029b		sliu d 0
029c		slil d 2
029d		push	d
029e		push	c
029f		sliu c 1
02a0		slil c 2
02a1		sliu d #basic	[00]
02a2		slil d #basic	[00]
02a3		jmpfar	d d
02a4		pop	b
02a5		pop	c
02a6		pop	d
02a7		sliu d #monitor	[01]
02a8		slil d #monitor	[05]
02a9		jalr	d d
02aa	#domonitorgo
02aa		sliu b 0
02ab		slil b 2
02ac		load	a [b]
02ad		inc	b
02ae		load	b [b]	; calling global function hextobin

02af		push	d
02b0		push	c
02b1		push	b
02b2		sliu d 0
02b3		slil d 2
02b4		push	d
02b5		push	c
02b6		sliu c 0
02b7		slil c 4
02b8		sliu d #hextobin	[08]
02b9		slil d #hextobin	[0f]
02ba		jmpfar	d d
02bb		pop	b
02bc		pop	c
02bd		pop	d
02be		pop	b
02bf		push	a
02c0		sliu d 0
02c1		slil d 4
02c2		add	b d
02c3		load	a [b]
02c4		inc	b
02c5		load	b [b]	; calling global function hextobin

02c6		push	d
02c7		push	c
02c8		push	b
02c9		sliu d 0
02ca		slil d 2
02cb		push	d
02cc		push	c
02cd		sliu c 0
02ce		slil c 4
02cf		sliu d #hextobin	[08]
02d0		slil d #hextobin	[0f]
02d1		jmpfar	d d
02d2		pop	b
02d3		pop	c
02d4		pop	d
02d5		pop	c
02d6		jmpfar	a a	

02d7		pop	d
02d8		pop	c
02d9		jmpfar	d d	
	; monitor_entry ends
	
	

02da		org 300	
	; ------- GLOBAL FUNCTION monitordump -------

0300	#monitordump
0300		pop	c
0301		push	d	; calling global function monitor_printaddress

0302		push	d
0303		push	c
0304		push	b
0305		sliu d 0
0306		slil d 3
0307		push	d
0308		push	c
0309		sliu c 0
030a		slil c 4
030b		sliu d #monitor_printaddress	[00]
030c		slil d #monitor_printaddress	[00]
030d		jmpfar	d d
030e		pop	b
030f		pop	c
0310		pop	d
0311		sub	b b	; calling global function monitor_getaddress

0312		push	d
0313		push	c
0314		push	b
0315		sliu d 0
0316		slil d 3
0317		push	d
0318		push	c
0319		sliu c 0
031a		slil c 4
031b		sliu d #monitor_getaddress	[05]
031c		slil d #monitor_getaddress	[0c]
031d		jmpfar	d d
031e		pop	b
031f		pop	c
0320		pop	d
0321		sub	b b
0322		add	b a
0323		load	a [b]	; calling global function printhex

0324		push	d
0325		push	c
0326		push	b
0327		sliu d 0
0328		slil d 3
0329		push	d
032a		push	c
032b		sliu c 0
032c		slil c 5
032d		sliu d #printhex	[01]
032e		slil d #printhex	[0f]
032f		jmpfar	d d
0330		pop	b
0331		pop	c
0332		pop	d
0333		sliu a 2
0334		slil a 0	; calling global function printchar

0335		push	d
0336		push	c
0337		push	b
0338		sliu d 0
0339		slil d 3
033a		push	d
033b		push	c
033c		sliu c 0
033d		slil c 5
033e		sliu d #printchar	[01]
033f		slil d #printchar	[09]
0340		jmpfar	d d
0341		pop	b
0342		pop	c
0343		pop	d
0344		inc	b
0345		load	a [b]	; calling global function printhex

0346		push	d
0347		push	c
0348		push	b
0349		sliu d 0
034a		slil d 3
034b		push	d
034c		push	c
034d		sliu c 0
034e		slil c 5
034f		sliu d #printhex	[01]
0350		slil d #printhex	[0f]
0351		jmpfar	d d
0352		pop	b
0353		pop	c
0354		pop	d
0355		sliu a 2
0356		slil a 0	; calling global function printchar

0357		push	d
0358		push	c
0359		push	b
035a		sliu d 0
035b		slil d 3
035c		push	d
035d		push	c
035e		sliu c 0
035f		slil c 5
0360		sliu d #printchar	[01]
0361		slil d #printchar	[09]
0362		jmpfar	d d
0363		pop	b
0364		pop	c
0365		pop	d
0366		inc	b
0367		load	a [b]	; calling global function printhex

0368		push	d
0369		push	c
036a		push	b
036b		sliu d 0
036c		slil d 3
036d		push	d
036e		push	c
036f		sliu c 0
0370		slil c 5
0371		sliu d #printhex	[01]
0372		slil d #printhex	[0f]
0373		jmpfar	d d
0374		pop	b
0375		pop	c
0376		pop	d
0377		sliu a 2
0378		slil a 0	; calling global function printchar

0379		push	d
037a		push	c
037b		push	b
037c		sliu d 0
037d		slil d 3
037e		push	d
037f		push	c
0380		sliu c 0
0381		slil c 5
0382		sliu d #printchar	[01]
0383		slil d #printchar	[09]
0384		jmpfar	d d
0385		pop	b
0386		pop	c
0387		pop	d
0388		inc	b
0389		load	a [b]	; calling global function printhex

038a		push	d
038b		push	c
038c		push	b
038d		sliu d 0
038e		slil d 3
038f		push	d
0390		push	c
0391		sliu c 0
0392		slil c 5
0393		sliu d #printhex	[01]
0394		slil d #printhex	[0f]
0395		jmpfar	d d
0396		pop	b
0397		pop	c
0398		pop	d
0399		pop	d
039a		pop	c
039b		jmpfar	d d	
	; monitordump ends
	
	
	
	; ------- GLOBAL FUNCTION monitoredit -------

039c	#monitoredit
039c		pop	c
039d		push	d		; get value byte

039e		sliu b 0
039f		slil b 7
03a0		load	a [b]
03a1		inc	b
03a2		load	b [b]	; calling global function hextobin

03a3		push	d
03a4		push	c
03a5		push	b
03a6		sliu d 0
03a7		slil d 3
03a8		push	d
03a9		push	c
03aa		sliu c 0
03ab		slil c 4
03ac		sliu d #hextobin	[08]
03ad		slil d #hextobin	[0f]
03ae		jmpfar	d d
03af		pop	b
03b0		pop	c
03b1		pop	d
03b2		push	a
03b3		sub	b b	; calling global function monitor_getaddress

03b4		push	d
03b5		push	c
03b6		push	b
03b7		sliu d 0
03b8		slil d 3
03b9		push	d
03ba		push	c
03bb		sliu c 0
03bc		slil c 4
03bd		sliu d #monitor_getaddress	[05]
03be		slil d #monitor_getaddress	[0c]
03bf		jmpfar	d d
03c0		pop	b
03c1		pop	c
03c2		pop	d
03c3		pop	b
03c4		store	b [a]
03c5		pop	d
03c6		pop	c
03c7		jmpfar	d d	
	; monitoredit ends
	
	

03c8		org 400	
	; ------- GLOBAL FUNCTION monitor_printaddress -------

0400	#monitor_printaddress
0400		pop	c
0401		push	d
0402		sliu b 0
0403		slil b 2
0404		load	a [b]	; calling global function printchar

0405		push	d
0406		push	c
0407		push	b
0408		sliu d 0
0409		slil d 4
040a		push	d
040b		push	c
040c		sliu c 0
040d		slil c 5
040e		sliu d #printchar	[01]
040f		slil d #printchar	[09]
0410		jmpfar	d d
0411		pop	b
0412		pop	c
0413		pop	d
0414		inc	b
0415		load	a [b]	; calling global function printchar

0416		push	d
0417		push	c
0418		push	b
0419		sliu d 0
041a		slil d 4
041b		push	d
041c		push	c
041d		sliu c 0
041e		slil c 5
041f		sliu d #printchar	[01]
0420		slil d #printchar	[09]
0421		jmpfar	d d
0422		pop	b
0423		pop	c
0424		pop	d
0425		inc	b
0426		load	a [b]	; calling global function printchar

0427		push	d
0428		push	c
0429		push	b
042a		sliu d 0
042b		slil d 4
042c		push	d
042d		push	c
042e		sliu c 0
042f		slil c 5
0430		sliu d #printchar	[01]
0431		slil d #printchar	[09]
0432		jmpfar	d d
0433		pop	b
0434		pop	c
0435		pop	d
0436		inc	b
0437		load	a [b]	; calling global function printchar

0438		push	d
0439		push	c
043a		push	b
043b		sliu d 0
043c		slil d 4
043d		push	d
043e		push	c
043f		sliu c 0
0440		slil c 5
0441		sliu d #printchar	[01]
0442		slil d #printchar	[09]
0443		jmpfar	d d
0444		pop	b
0445		pop	c
0446		pop	d
0447		inc	b
0448		sliu a 2
0449		slil a 0	; calling global function printchar

044a		push	d
044b		push	c
044c		push	b
044d		sliu d 0
044e		slil d 4
044f		push	d
0450		push	c
0451		sliu c 0
0452		slil c 5
0453		sliu d #printchar	[01]
0454		slil d #printchar	[09]
0455		jmpfar	d d
0456		pop	b
0457		pop	c
0458		pop	d
0459		pop	d
045a		pop	c
045b		jmpfar	d d	
	; monitor_printaddress ends
	
	
	
	; ------- GLOBAL FUNCTION monitor_getaddress -------

045c	#monitor_getaddress
045c		pop	c
045d		push	d		; sets the data page to the page entered, returns the address in A

045e		push	b
045f		sliu b 0
0460		slil b 2
0461		load	a [b]
0462		inc	b
0463		load	b [b]	; calling global function hextobin

0464		push	d
0465		push	c
0466		push	b
0467		sliu d 0
0468		slil d 4
0469		push	d
046a		push	c
046b		sliu c 0
046c		slil c 4
046d		sliu d #hextobin	[08]
046e		slil d #hextobin	[0f]
046f		jmpfar	d d
0470		pop	b
0471		pop	c
0472		pop	d
0473		pop	b
0474		push	a
0475		sliu d 0
0476		slil d 4
0477		add	b d
0478		load	a [b]
0479		inc	b
047a		load	b [b]	; calling global function hextobin

047b		push	d
047c		push	c
047d		push	b
047e		sliu d 0
047f		slil d 4
0480		push	d
0481		push	c
0482		sliu c 0
0483		slil c 4
0484		sliu d #hextobin	[08]
0485		slil d #hextobin	[0f]
0486		jmpfar	d d
0487		pop	b
0488		pop	c
0489		pop	d
048a		pop	b
048b		page	b
048c		pop	d
048d		pop	c
048e		jmpfar	d d	
	; monitor_getaddress ends
	
	
	
	; ------- GLOBAL FUNCTION hextobin -------

048f	#hextobin
048f		pop	c
0490		push	d		; A,B are two chars.  returns num in A

0491		push	a
0492		sliu d 3
0493		slil d 10
0494		sub	a d
0495		sliu d #@hextobin0	[09]
0496		slil d #@hextobin0	[0d]
0497		skipge	a
0498		jalr	d d
0499		pop	a
049a		sliu d #hextobin_letter1	[0a]
049b		slil d #hextobin_letter1	[01]
049c		jalr	d d
049d	#@hextobin0
049d		pop	a
049e		sliu d #hextobin_number1	[0a]
049f		slil d #hextobin_number1	[0a]
04a0		jalr	d d
04a1	#hextobin_letter1
04a1		sliu d 4
04a2		slil d 1
04a3		sub	a d
04a4		sliu d 0
04a5		slil d 10
04a6		add	a d
04a7		sliu d #hextobin2	[0a]
04a8		slil d #hextobin2	[0d]
04a9		jalr	d d
04aa	#hextobin_number1
04aa		sliu d 3
04ab		slil d 0
04ac		sub	a d
04ad	#hextobin2
04ad		add	a a
04ae		add	a a
04af		add	a a
04b0		add	a a
04b1		push	b
04b2		sliu d 3
04b3		slil d 10
04b4		sub	b d
04b5		sliu d #@hextobin1	[0b]
04b6		slil d #@hextobin1	[0d]
04b7		skipge	b
04b8		jalr	d d
04b9		pop	b
04ba		sliu d #hextobin_letter2	[0c]
04bb		slil d #hextobin_letter2	[01]
04bc		jalr	d d
04bd	#@hextobin1
04bd		pop	b
04be		sliu d #hextobin_number2	[0c]
04bf		slil d #hextobin_number2	[0a]
04c0		jalr	d d
04c1	#hextobin_letter2
04c1		sliu d 4
04c2		slil d 1
04c3		sub	b d
04c4		sliu d 0
04c5		slil d 10
04c6		add	b d
04c7		sliu d #hextobin3	[0c]
04c8		slil d #hextobin3	[0d]
04c9		jalr	d d
04ca	#hextobin_number2
04ca		sliu d 3
04cb		slil d 0
04cc		sub	b d
04cd	#hextobin3
04cd		add	a b
04ce		pop	d
04cf		pop	c
04d0		jmpfar	d d	
	; hextobin ends
	
	

04d1		org 500	
	; ------- GLOBAL FUNCTION printstring -------

0500	#printstring
0500		pop	c
0501		push	d		; page in A, string addr in B

0502		page	a
0503	#printstring_loop
0503		load	a [b]
0504		push	a
0505		sliu d 0
0506		slil d 0
0507		sub	a d
0508		sliu d #@printstring0	[01]
0509		slil d #@printstring0	[00]
050a		skipz	a
050b		jalr	d d
050c		pop	a
050d		sliu d #printstring_done	[01]
050e		slil d #printstring_done	[06]
050f		jalr	d d
0510	#@printstring0
0510		pop	a	
	;	.call printchar

0511		out	a	

0512		inc	b
0513		sliu d #printstring_loop	[00]
0514		slil d #printstring_loop	[03]
0515		jalr	d d
0516	#printstring_done
0516		pop	d
0517		pop	c
0518		jmpfar	d d	
	; printstring ends
	
	
	
	; ------- GLOBAL FUNCTION printchar -------

0519	#printchar
0519		pop	c
051a		push	d	;	 prints char in A

051b		out	a	
	;	push	a
	;	push	a
	;	li	d,0xf0
	;	nand	a,d
	;	nand	a,a
	;	li	b,0x10
	;	.call div_even
	;	li	c,0x7f
	;	nand	a,c
	;	nand	a,c
	;	out	a
	;	pop	a
	;	li	d,0x0f
	;	nand	a,d
	;	nand	a,a
	;	li	d,0x7f
	;	nand	a,d
	;	nand	a,d
	;	out	a
	;	pop	a

051c		pop	d
051d		pop	c
051e		jmpfar	d d	
	; printchar ends
	
	
	
	; ------- GLOBAL FUNCTION printhex -------

051f	#printhex
051f		pop	c
0520		push	d		; prints a byte in A as two hex chars

0521		push	a
0522		push	a
0523		sliu d 15
0524		slil d 0
0525		nand	a d
0526		nand	a a
0527		sliu b 1
0528		slil b 0	; calling global function div_even

0529		push	d
052a		push	c
052b		push	b
052c		sliu d 0
052d		slil d 5
052e		push	d
052f		push	c
0530		sliu c 0
0531		slil c 7
0532		sliu d #div_even	[06]
0533		slil d #div_even	[0a]
0534		jmpfar	d d
0535		pop	b
0536		pop	c
0537		pop	d
0538		push	a
0539		sliu d 0
053a		slil d 10
053b		sub	a d
053c		sliu d #@printhex0	[04]
053d		slil d #@printhex0	[04]
053e		skipl	a
053f		jalr	d d
0540		pop	a
0541		sliu d #printhex_num1	[04]
0542		slil d #printhex_num1	[0e]
0543		jalr	d d
0544	#@printhex0
0544		pop	a
0545		sliu d 0
0546		slil d 10
0547		sub	a d
0548		sliu d 4
0549		slil d 1
054a		add	a d
054b		sliu d #printhex2	[05]
054c		slil d #printhex2	[01]
054d		jalr	d d
054e	#printhex_num1
054e		sliu d 3
054f		slil d 0
0550		add	a d
0551	#printhex2	; calling global function printchar

0551		push	d
0552		push	c
0553		push	b
0554		sliu d 0
0555		slil d 5
0556		push	d
0557		push	c
0558		sliu c 0
0559		slil c 5
055a		sliu d #printchar	[01]
055b		slil d #printchar	[09]
055c		jmpfar	d d
055d		pop	b
055e		pop	c
055f		pop	d
0560		pop	a
0561		sliu b 0
0562		slil b 15
0563		nand	a b
0564		nand	a a
0565		push	a
0566		sliu d 0
0567		slil d 10
0568		sub	a d
0569		sliu d #@printhex1	[07]
056a		slil d #@printhex1	[01]
056b		skipl	a
056c		jalr	d d
056d		pop	a
056e		sliu d #printhex_num2	[07]
056f		slil d #printhex_num2	[0b]
0570		jalr	d d
0571	#@printhex1
0571		pop	a
0572		sliu d 0
0573		slil d 10
0574		sub	a d
0575		sliu d 4
0576		slil d 1
0577		add	a d
0578		sliu d #printhex3	[07]
0579		slil d #printhex3	[0e]
057a		jalr	d d
057b	#printhex_num2
057b		sliu d 3
057c		slil d 0
057d		add	a d
057e	#printhex3	; calling global function printchar

057e		push	d
057f		push	c
0580		push	b
0581		sliu d 0
0582		slil d 5
0583		push	d
0584		push	c
0585		sliu c 0
0586		slil c 5
0587		sliu d #printchar	[01]
0588		slil d #printchar	[09]
0589		jmpfar	d d
058a		pop	b
058b		pop	c
058c		pop	d
058d		pop	a
058e		pop	d
058f		pop	c
0590		jmpfar	d d	
	; printhex ends
	
	

0591		org	600	
	; ------- GLOBAL FUNCTION readchar -------

0600	#readchar
0600		pop	c
0601		push	d		; reads a char in A

0602	#inloop
0602		in	a
0603		push	a
0604		sliu d 0
0605		slil d 0
0606		sub	a d
0607		sliu d #@readchar0	[00]
0608		slil d #@readchar0	[0f]
0609		skipz	a
060a		jalr	d d
060b		pop	a
060c		sliu d #inloop	[00]
060d		slil d #inloop	[02]
060e		jalr	d d
060f	#@readchar0
060f		pop	a
0610		pop	d
0611		pop	c
0612		jmpfar	d d	
	; readchar ends
	
	
	
	; ------- GLOBAL FUNCTION readstring -------

0613	#readstring
0613		pop	c
0614		push	d		;A = buffer page, B = buffer addr
		; reads a string until RETURN, puts in buffer and null terminates
	

0615		page	a
0616	#readstring_readloop	; calling global function readchar

0616		push	d
0617		push	c
0618		push	b
0619		sliu d 0
061a		slil d 6
061b		push	d
061c		push	c
061d		sliu c 0
061e		slil c 6
061f		sliu d #readchar	[00]
0620		slil d #readchar	[00]
0621		jmpfar	d d
0622		pop	b
0623		pop	c
0624		pop	d
0625		push	a
0626		sliu d 0
0627		slil d 13
0628		sub	a d
0629		sliu d #@readstring0	[03]
062a		slil d #@readstring0	[01]
062b		skipz	a
062c		jalr	d d
062d		pop	a
062e		sliu d #readstring_return	[06]
062f		slil d #readstring_return	[0d]
0630		jalr	d d
0631	#@readstring0
0631		pop	a
0632		push	a
0633		sliu d 0
0634		slil d 8
0635		sub	a d
0636		sliu d #@readstring1	[03]
0637		slil d #@readstring1	[0e]
0638		skipz	a
0639		jalr	d d
063a		pop	a
063b		sliu d #readstring_backspace	[05]
063c		slil d #readstring_backspace	[03]
063d		jalr	d d
063e	#@readstring1
063e		pop	a	; calling global function printchar

063f		push	d
0640		push	c
0641		push	b
0642		sliu d 0
0643		slil d 6
0644		push	d
0645		push	c
0646		sliu c 0
0647		slil c 5
0648		sliu d #printchar	[01]
0649		slil d #printchar	[09]
064a		jmpfar	d d
064b		pop	b
064c		pop	c
064d		pop	d
064e		store	a [b]
064f		inc	b
0650		sliu d #readstring_readloop	[01]
0651		slil d #readstring_readloop	[06]
0652		jalr	d d	

0653	#readstring_backspace		; ignore if beginning of line
		;;; TODO bug what if buffer doesn't start at 0?

0653		push	b
0654		sliu d 0
0655		slil d 0
0656		sub	b d
0657		sliu d #@readstring2	[05]
0658		slil d #@readstring2	[0f]
0659		skipz	b
065a		jalr	d d
065b		pop	b
065c		sliu d #readstring_readloop	[01]
065d		slil d #readstring_readloop	[06]
065e		jalr	d d
065f	#@readstring2
065f		pop	b
0660		dec	b	;	li	d,0x00
	;	out	d
	;	li	d,0x04
	;	out	d
	;	li	d,0x82
	;	out	d
	;	li	d,0x80
	;	out	d
	;	li	d,0x00
	;	out	d
	;	li	d,0x00
	;	out	d

0661		sliu d 0
0662		slil d 8
0663		out	d
0664		sliu d 2
0665		slil d 0
0666		out	d
0667		sliu d 0
0668		slil d 8
0669		out	d
066a		sliu d #readstring_readloop	[01]
066b		slil d #readstring_readloop	[06]
066c		jalr	d d	

066d	#readstring_return
066d		sliu d 0
066e		slil d 13
066f		out	d
0670		sliu d 2
0671		slil d 0
0672		out	d	;	; home
	;	li	d,0x00
	;	out	d
	;	li	d,0x03
	;	out	d
	
		;null terminate

0673		sliu a 0
0674		slil a 0
0675		store	a [b]
0676		pop	d
0677		pop	c
0678		jmpfar	d d	
	; readstring ends
	
	

0679		org	700	
	; ------- GLOBAL FUNCTION div -------

0700	#div
0700		pop	c
0701		push	d		; A = A / B

0702		sliu c 0
0703		slil c 0
0704		push	b
0705		sliu d 0
0706		slil d 0
0707		sub	b d
0708		sliu d #@div0	[01]
0709		slil d #@div0	[00]
070a		skipz	b
070b		jalr	d d
070c		pop	b
070d		sliu d #div_done	[06]
070e		slil d #div_done	[05]
070f		jalr	d d
0710	#@div0
0710		pop	b	
		; check special cases: b is negative (b>128)

0711		push	b
0712		sliu d 0
0713		slil d 0
0714		sub	b d
0715		sliu d #@div1	[01]
0716		slil d #@div1	[0d]
0717		skipl	b
0718		jalr	d d
0719		pop	b
071a		sliu d #div_neg_b	[04]
071b		slil d #div_neg_b	[00]
071c		jalr	d d
071d	#@div1
071d		pop	b		;if a is negative initially (a>127) then subtract b until a becomes positive

071e	#div_negadjust
071e		push	a
071f		sliu d 0
0720		slil d 0
0721		sub	a d
0722		sliu d #@div2	[02]
0723		slil d #@div2	[0a]
0724		skipge	a
0725		jalr	d d
0726		pop	a
0727		sliu d #divwhile	[03]
0728		slil d #divwhile	[00]
0729		jalr	d d
072a	#@div2
072a		pop	a
072b		sub	a b
072c		inc	c
072d		sliu d #div_negadjust	[01]
072e		slil d #div_negadjust	[0e]
072f		jalr	d d
0730	#divwhile
0730		push	a
0731		sub	a b
0732		sliu d #@div3	[03]
0733		slil d #@div3	[0a]
0734		skipl	a
0735		jalr	d d
0736		pop	a
0737		sliu d #div_done	[06]
0738		slil d #div_done	[05]
0739		jalr	d d
073a	#@div3
073a		pop	a
073b		sub	a b
073c		inc	c
073d		sliu d #divwhile	[03]
073e		slil d #divwhile	[00]
073f		jalr	d d
0740	#div_neg_b		; b is very large.  if a is positive, then a/b==0

0740		push	a
0741		sliu d 0
0742		slil d 0
0743		sub	a d
0744		sliu d #@div4	[04]
0745		slil d #@div4	[0c]
0746		skipge	a
0747		jalr	d d
0748		pop	a
0749		sliu d #div_done	[06]
074a		slil d #div_done	[05]
074b		jalr	d d
074c	#@div4
074c		pop	a
074d		push	a
074e		sub	a b
074f		sliu d #@div5	[05]
0750		slil d #@div5	[07]
0751		skipl	a
0752		jalr	d d
0753		pop	a
0754		sliu d #div_done	[06]
0755		slil d #div_done	[05]
0756		jalr	d d
0757	#@div5
0757		pop	a
0758		push	a
0759		sub	a b
075a		sliu d #@div6	[06]
075b		slil d #@div6	[02]
075c		skipnz	a
075d		jalr	d d
075e		pop	a
075f		sliu d #div_negadjust	[01]
0760		slil d #div_negadjust	[0e]
0761		jalr	d d
0762	#@div6
0762		pop	a		; a==b

0763		sliu c 0
0764		slil c 1
0765	#div_done
0765		sub	a a
0766		add	a c
0767		pop	d
0768		pop	c
0769		jmpfar	d d	
	; div ends
	
	
	
	; ------- GLOBAL FUNCTION div_even -------

076a	#div_even
076a		pop	c
076b		push	d		; A = A / B
		; only works if A%B is 0

076c		sliu c 0
076d		slil c 0
076e	#divewhile
076e		push	a
076f		sliu d 0
0770		slil d 0
0771		sub	a d
0772		sliu d #@div_even0	[07]
0773		slil d #@div_even0	[0a]
0774		skipz	a
0775		jalr	d d
0776		pop	a
0777		sliu d #divewhileend	[08]
0778		slil d #divewhileend	[00]
0779		jalr	d d
077a	#@div_even0
077a		pop	a
077b		sub	a b
077c		inc	c
077d		sliu d #divewhile	[06]
077e		slil d #divewhile	[0e]
077f		jalr	d d
0780	#divewhileend
0780		sub	a a
0781		add	a c
0782		pop	d
0783		pop	c
0784		jmpfar	d d	
	; div_even ends
	
	
	
	; ------- GLOBAL FUNCTION mod -------

0785	#mod
0785		pop	c
0786		push	d		; A = A % B

0787		push	b
0788		sliu d 0
0789		slil d 0
078a		sub	b d
078b		sliu d #@mod0	[09]
078c		slil d #@mod0	[03]
078d		skipz	b
078e		jalr	d d
078f		pop	b
0790		sliu d #mod0	[0c]
0791		slil d #mod0	[01]
0792		jalr	d d
0793	#@mod0
0793		pop	b		; special case: b>127

0794		push	b
0795		sliu d 0
0796		slil d 0
0797		sub	b d
0798		sliu d #@mod1	[0a]
0799		slil d #@mod1	[00]
079a		skipl	b
079b		jalr	d d
079c		pop	b
079d		sliu d #mod_neg_b	[0c]
079e		slil d #mod_neg_b	[06]
079f		jalr	d d
07a0	#@mod1
07a0		pop	b
07a1	#mod_negadjust
07a1		push	a
07a2		sliu d 0
07a3		slil d 0
07a4		sub	a d
07a5		sliu d #@mod2	[0a]
07a6		slil d #@mod2	[0d]
07a7		skipge	a
07a8		jalr	d d
07a9		pop	a
07aa		sliu d #modwhile	[0b]
07ab		slil d #modwhile	[02]
07ac		jalr	d d
07ad	#@mod2
07ad		pop	a
07ae		sub	a b
07af		sliu d #mod_negadjust	[0a]
07b0		slil d #mod_negadjust	[01]
07b1		jalr	d d
07b2	#modwhile
07b2		push	a
07b3		sub	a b
07b4		sliu d #@mod3	[0b]
07b5		slil d #@mod3	[0c]
07b6		skipl	a
07b7		jalr	d d
07b8		pop	a
07b9		sliu d #modwhileend	[0e]
07ba		slil d #modwhileend	[0b]
07bb		jalr	d d
07bc	#@mod3
07bc		pop	a
07bd		sub	a b
07be		sliu d #modwhile	[0b]
07bf		slil d #modwhile	[02]
07c0		jalr	d d
07c1	#mod0
07c1		sliu a 0
07c2		slil a 0
07c3		sliu d #modwhileend	[0e]
07c4		slil d #modwhileend	[0b]
07c5		jalr	d d
07c6	#mod_neg_b		; b is > 127
		; if a is positive, then just return a

07c6		push	a
07c7		sliu d 0
07c8		slil d 0
07c9		sub	a d
07ca		sliu d #@mod4	[0d]
07cb		slil d #@mod4	[02]
07cc		skipge	a
07cd		jalr	d d
07ce		pop	a
07cf		sliu d #modwhileend	[0e]
07d0		slil d #modwhileend	[0b]
07d1		jalr	d d
07d2	#@mod4
07d2		pop	a		; if a < b then return a

07d3		push	a
07d4		sub	a b
07d5		sliu d #@mod5	[0d]
07d6		slil d #@mod5	[0d]
07d7		skipl	a
07d8		jalr	d d
07d9		pop	a
07da		sliu d #modwhileend	[0e]
07db		slil d #modwhileend	[0b]
07dc		jalr	d d
07dd	#@mod5
07dd		pop	a
07de		push	a
07df		sub	a b
07e0		sliu d #@mod6	[0e]
07e1		slil d #@mod6	[08]
07e2		skipnz	a
07e3		jalr	d d
07e4		pop	a
07e5		sliu d #mod_negadjust	[0a]
07e6		slil d #mod_negadjust	[01]
07e7		jalr	d d
07e8	#@mod6
07e8		pop	a		; a == b, so return 0

07e9		sliu a 0
07ea		slil a 0
07eb	#modwhileend
07eb		pop	d
07ec		pop	c
07ed		jmpfar	d d	
	; mod ends
	
	

07ee		org 800	
	; ------- GLOBAL FUNCTION mul -------

0800	#mul
0800		pop	c
0801		push	d		; A = A * B

0802		sub	c c
0803	#mulloop
0803		push	b
0804		sliu d 0
0805		slil d 0
0806		sub	b d
0807		sliu d #@mul0	[00]
0808		slil d #@mul0	[0f]
0809		skipz	b
080a		jalr	d d
080b		pop	b
080c		sliu d #mulend	[01]
080d		slil d #mulend	[05]
080e		jalr	d d
080f	#@mul0
080f		pop	b
0810		add	c a
0811		dec	b
0812		sliu d #mulloop	[00]
0813		slil d #mulloop	[03]
0814		jalr	d d
0815	#mulend
0815		sub	a a
0816		add	a c
0817		pop	d
0818		pop	c
0819		jmpfar	d d	
	; mul ends
	
	
	
	; ------- GLOBAL FUNCTION clearscreen -------

081a	#clearscreen
081a		pop	c
081b		push	d		; resets screen and homes cursor

081c		sliu d 8
081d		slil d 0
081e		out	d	;	; home
	;	li	d,0x00
	;	out	d
	;	li	d,0x03
	;	out	d
	;	; clear
	;	li	d,0x00
	;	out	d
	;	li	d,0x01
	;	out	d
	

081f		pop	d
0820		pop	c
0821		jmpfar	d d	
	; clearscreen ends
	
	
	
	; ------- GLOBAL FUNCTION readprompt -------

0822	#readprompt
0822		pop	c
0823		push	d		;move to new line and display > prompt

0824		sliu d 0
0825		slil d 13
0826		out	d
0827		sliu d 2
0828		slil d 0
0829		out	d
082a		sliu d 3
082b		slil d 14
082c		out	d	
	;	;clears second line, puts cursor at beginning, prints prompt
	;	
	;	; put cursor on second line
	;	li	d,0x0c
	;	out	d
	;	li	d,0x00
	;	out	d
	;
	;	;print 16 spaces
	;	li	c,16
	;#readprompt_clr
	;	li	d,0x82
	;	out	d
	;	li	d,0x80
	;	out	d
	;	dec	c
	;	.if c != 0 then readprompt_clr
	;
	;	; put cursor on second line again
	;	li	d,0x0c
	;	out	d
	;	li	d,0x00
	;	out	d
	;
	;	; print a > prompt
	;	li	d,0x83
	;	out	d
	;	li	d,0x8e
	;	out	d

082d		pop	d
082e		pop	c
082f		jmpfar	d d	
	; readprompt ends
	
	

0830		org f00	
	; ------- GLOBAL FUNCTION identify_keychar -------

0f00	#identify_keychar
0f00		pop	c
0f01		push	d		; A is page, B is testchar
		; returns 0 if no match, otherwise keychar in A
	
		; push data page

0f02		push	a
0f03		sliu a 7
0f04		slil a 14
0f05		page	a		
		; c holds keychar addr

0f06		sliu c #keychars	[00]
0f07		slil c #keychars	[00]	

0f08	#identify_keychar_loop		;compare
		;get char from keyword list

0f08		load	a [c]	

0f09		push	a
0f0a		sub	a b
0f0b		sliu d #@identify_keychar0	[01]
0f0c		slil d #@identify_keychar0	[03]
0f0d		skipz	a
0f0e		jalr	d d
0f0f		pop	a
0f10		sliu d #identify_keychar_match	[02]
0f11		slil d #identify_keychar_match	[00]
0f12		jalr	d d
0f13	#@identify_keychar0
0f13		pop	a	

0f14	#identify_keychar_doesntmatch	
		;not a match.  move to next keychar
	
		; advance c four forwards

0f14		inc	c
0f15		inc	c
0f16		inc	c
0f17		inc	c		; if it is zero, no keychars match

0f18		load	a [c]
0f19		sliu d #identify_keychar_nomatches	[02]
0f1a		slil d #identify_keychar_nomatches	[06]
0f1b		skipnz	a
0f1c		jalr	d d
0f1d		sliu d #identify_keychar_loop	[00]
0f1e		slil d #identify_keychar_loop	[08]
0f1f		jalr	d d	

0f20	#identify_keychar_match		; the next char is the token

0f20		inc	c
0f21		inc	c
0f22		load	a [c]
0f23		sliu d #identify_keychar_done	[02]
0f24		slil d #identify_keychar_done	[07]
0f25		jalr	d d	

0f26	#identify_keychar_nomatches	

0f26		sub	a a	

0f27	#identify_keychar_done
0f27		pop	d
0f28		page	d
0f29		pop	d
0f2a		pop	c
0f2b		jmpfar	d d	
	; identify_keychar ends
	
	
	; tokens:
	; known keywords are reduced to a single character
	; integers consist of one or more digits
	; strings are surrounded by ""
	; vars are # then one or more capital letters
	

0f2c		org 1000	
	; ------- GLOBAL FUNCTION tokenize -------

1000	#tokenize
1000		pop	c
1001		push	d		; generates a new command string with tokens replacing keywords
		; A=buffer page, B=buffer addr, C=dest buffer addr
		; returns 0 if no error, 1 if syntax error
	

1002		page	a		;push the page

1003		push	a	
		;save dest addr on stack

1004		push	c	

1005	#tokenize_loop		;get next char

1005		load	a [b]	
		;if it's 0, end of line

1006		sliu d #tokenize_done	[0e]
1007		slil d #tokenize_done	[09]
1008		skipnz	a
1009		jalr	d d	
		; is it a space? just move forward

100a		load	a [b]
100b		sliu d 2
100c		slil d 0
100d		sub	a d
100e		sliu d #tokenize_notspace	[01]
100f		slil d #tokenize_notspace	[06]
1010		skipz	a
1011		jalr	d d
1012		inc	b
1013		sliu d #tokenize_loop	[00]
1014		slil d #tokenize_loop	[05]
1015		jalr	d d	

1016	#tokenize_notspace		; is it a string? then copy and advance to next "

1016		load	a [b]
1017		sliu d 2
1018		slil d 2
1019		sub	a d
101a		sliu d #tokenize_notstring	[03]
101b		slil d #tokenize_notstring	[08]
101c		skipz	a
101d		jalr	d d
101e		pop	c	

101f	#tokenize_stringcopyloop
101f		load	a [b]
1020		store	a [c]
1021		inc	b
1022		inc	c
1023		load	a [b]
1024		sliu d 2
1025		slil d 2
1026		sub	a d
1027		sliu d #tokenize_stringcopyloop	[01]
1028		slil d #tokenize_stringcopyloop	[0f]
1029		skipz	a
102a		jalr	d d	
		;put a space after the string

102b		inc	b
102c		sliu d 2
102d		slil d 2
102e		store	d [c]
102f		inc	c
1030		sliu d 2
1031		slil d 0
1032		store	d [c]
1033		inc	c
1034		push	c
1035		sliu d #tokenize_loop	[00]
1036		slil d #tokenize_loop	[05]
1037		jalr	d d	

1038	#tokenize_notstring		;is it a number? match 0-9

1038		load	a [b]
1039		sliu d 3
103a		slil d 0
103b		sub	a d
103c		sliu d #tokenize_notnumber	[06]
103d		slil d #tokenize_notnumber	[03]
103e		skipge	a
103f		jalr	d d
1040		sliu d 0
1041		slil d 10
1042		sub	a d
1043		sliu d #tokenize_notnumber	[06]
1044		slil d #tokenize_notnumber	[03]
1045		skipl	a
1046		jalr	d d	
		; copy the number over

1047		pop	c
1048	#tokenize_numbercopyloop
1048		load	a [b]
1049		store	a [c]
104a		inc	b
104b		inc	c
104c		load	a [b]
104d		sliu d 3
104e		slil d 0
104f		sub	a d
1050		sliu d #tokenize_numbercopyloopdone	[05]
1051		slil d #tokenize_numbercopyloopdone	[0b]
1052		skipge	a
1053		jalr	d d
1054		sliu d 0
1055		slil d 10
1056		sub	a d
1057		sliu d #tokenize_numbercopyloop	[04]
1058		slil d #tokenize_numbercopyloop	[08]
1059		skipge	a
105a		jalr	d d	

105b	#tokenize_numbercopyloopdone		; save a space

105b		sliu d 2
105c		slil d 0
105d		store	d [c]
105e		inc	c
105f		push	c
1060		sliu d #tokenize_loop	[00]
1061		slil d #tokenize_loop	[05]
1062		jalr	d d	

1063	#tokenize_notnumber	
		; check if it's a keychar

1063		pop	c
1064		pop	a
1065		push	a
1066		push	c
1067		push	b
1068		load	b [b]	; calling global function identify_keychar

1069		push	d
106a		push	c
106b		push	b
106c		sliu d 1
106d		slil d 0
106e		push	d
106f		push	c
1070		sliu c 0
1071		slil c 15
1072		sliu d #identify_keychar	[00]
1073		slil d #identify_keychar	[00]
1074		jmpfar	d d
1075		pop	b
1076		pop	c
1077		pop	d
1078		pop	b
1079		sliu d #tokenize_notkeychar	[08]
107a		slil d #tokenize_notkeychar	[09]
107b		skipnz	a
107c		jalr	d d	
		;save keychar to output string

107d		pop	c
107e		store	a [c]
107f		inc	c		;include space

1080		sliu d 2
1081		slil d 0
1082		store	d [c]
1083		inc	c
1084		push	c	
		;advance one char

1085		inc	b
1086		sliu d #tokenize_loop	[00]
1087		slil d #tokenize_loop	[05]
1088		jalr	d d	

1089	#tokenize_notkeychar		; check if it's a keyword
	

1089		pop	c
108a		pop	a
108b		push	a
108c		push	c	
	; calling global function identify_keyword

108d		push	d
108e		push	c
108f		push	b
1090		sliu d 1
1091		slil d 0
1092		push	d
1093		push	c
1094		sliu c 1
1095		slil c 1
1096		sliu d #identify_keyword	[00]
1097		slil d #identify_keyword	[00]
1098		jmpfar	d d
1099		pop	b
109a		pop	c
109b		pop	d
109c		sliu d #tokenize_notkey	[0b]
109d		slil d #tokenize_notkey	[08]
109e		skipnz	a
109f		jalr	d d	
		;save keyword token to output string

10a0		pop	c
10a1		store	a [c]
10a2		inc	c		;include space separator

10a3		sliu d 2
10a4		slil d 0
10a5		store	d [c]
10a6		inc	c
10a7		push	c	
		;advance b to next space or EOL

10a8	#tokenize_advance
10a8		inc	b
10a9		load	a [b]	
		; if a == 0 then done

10aa		sliu d #tokenize_done	[0e]
10ab		slil d #tokenize_done	[09]
10ac		skipnz	a
10ad		jalr	d d		; if a == ' ' then stop

10ae		sliu d 2
10af		slil d 0
10b0		sub	a d
10b1		sliu d #tokenize_advance	[0a]
10b2		slil d #tokenize_advance	[08]
10b3		skipz	a
10b4		jalr	d d	

10b5		sliu d #tokenize_loop	[00]
10b6		slil d #tokenize_loop	[05]
10b7		jalr	d d	

10b8	#tokenize_notkey		;is it a var? match A-Z

10b8		load	a [b]
10b9		sliu d 4
10ba		slil d 1
10bb		sub	a d
10bc		sliu d #tokenize_notvar	[0e]
10bd		slil d #tokenize_notvar	[04]
10be		skipge	a
10bf		jalr	d d
10c0		sliu d 1
10c1		slil d 10
10c2		sub	a d
10c3		sliu d #tokenize_notvar	[0e]
10c4		slil d #tokenize_notvar	[04]
10c5		skipl	a
10c6		jalr	d d	

10c7		pop	c	
		;plant a # at beginning

10c8		sliu d 2
10c9		slil d 3
10ca		store	d [c]
10cb		inc	c	
		; copy the letters over

10cc	#tokenize_varcopyloop
10cc		load	a [b]
10cd		store	a [c]
10ce		inc	b
10cf		inc	c
10d0		load	a [b]
10d1		sliu d #tokenize_varcopyloopdone	[0d]
10d2		slil d #tokenize_varcopyloopdone	[0c]
10d3		skipnz	a
10d4		jalr	d d
10d5		sliu d 4
10d6		slil d 1
10d7		sub	a d
10d8		sliu d #tokenize_varcopyloop	[0c]
10d9		slil d #tokenize_varcopyloop	[0c]
10da		skipl	a
10db		jalr	d d	

10dc	#tokenize_varcopyloopdone		; save a space

10dc		sliu d 2
10dd		slil d 0
10de		store	d [c]
10df		inc	c
10e0		push	c
10e1		sliu d #tokenize_loop	[00]
10e2		slil d #tokenize_loop	[05]
10e3		jalr	d d	

10e4	#tokenize_notvar		;syntax error

10e4		sliu a 0
10e5		slil a 1
10e6		sliu d #tokenize_done_return	[0e]
10e7		slil d #tokenize_done_return	[0f]
10e8		jalr	d d	

10e9	#tokenize_done
10e9		pop	c
10ea		push	c
10eb		# null terminate output string
10eb		sliu d 0
10ec		slil d 0
10ed		store	d [c]
10ee		sub	a a
10ef	#tokenize_done_return
10ef		pop	c
10f0		pop	d
10f1		pop	d
10f2		pop	c
10f3		jmpfar	d d	
	; tokenize ends
	
	

10f4		org 1100	
	
	; ------- GLOBAL FUNCTION identify_keyword -------

1100	#identify_keyword
1100		pop	c
1101		push	d		; A is page, B is address
		; returns 0 if no match, otherwise keyword char in A
	
		; push test address and data page

1102		push	b
1103		push	a		
		; c holds keyword addr

1104		sliu c #keywords	[03]
1105		slil c #keywords	[05]	

1106	#identify_keyword_loop		;compare
		;get char from keyword list

1106		sliu a 7
1107		slil a 14
1108		page	a
1109		load	a [c]	
		;is the keyword 0? then test better be 0 or ' '

110a		push	a
110b		sliu d 0
110c		slil d 0
110d		sub	a d
110e		sliu d #@identify_keyword0	[01]
110f		slil d #@identify_keyword0	[06]
1110		skipnz	a
1111		jalr	d d
1112		pop	a
1113		sliu d #identify_keyword_notendofkeyword	[05]
1114		slil d #identify_keyword_notendofkeyword	[00]
1115		jalr	d d
1116	#@identify_keyword0
1116		pop	a		
		;get char from test

1117		pop	a
1118		page	a
1119		push	a
111a		load	a [b]	
		;if it's 0 or ' ', then match

111b		push	a
111c		sliu d 0
111d		slil d 0
111e		sub	a d
111f		sliu d #@identify_keyword1	[02]
1120		slil d #@identify_keyword1	[07]
1121		skipz	a
1122		jalr	d d
1123		pop	a
1124		sliu d #identify_keyword_match	[07]
1125		slil d #identify_keyword_match	[0c]
1126		jalr	d d
1127	#@identify_keyword1
1127		pop	a
1128		push	a
1129		sliu d 2
112a		slil d 0
112b		sub	a d
112c		sliu d #@identify_keyword2	[03]
112d		slil d #@identify_keyword2	[04]
112e		skipz	a
112f		jalr	d d
1130		pop	a
1131		sliu d #identify_keyword_match	[07]
1132		slil d #identify_keyword_match	[0c]
1133		jalr	d d
1134	#@identify_keyword2
1134		pop	a	

1135	#identify_keyword_doesntmatch	
		;not a match.  reset b and move to next keyword

1135		pop	a
1136		pop	b
1137		push	b
1138		push	a
1139		sliu a 7
113a		slil a 14
113b		page	a		;advance c to 0 if it's not there yet

113c	#identify_keyword_doesntmatch2
113c		load	a [c]
113d		sliu d #identify_keyword_doesntmatch1	[04]
113e		slil d #identify_keyword_doesntmatch1	[05]
113f		skipnz	a
1140		jalr	d d
1141		inc	c
1142		sliu d #identify_keyword_doesntmatch2	[03]
1143		slil d #identify_keyword_doesntmatch2	[0c]
1144		jalr	d d
1145	#identify_keyword_doesntmatch1	
		; advance c three forwards

1145		inc	c
1146		inc	c
1147		inc	c		; if it is zero, no keywords match

1148		load	a [c]
1149		sliu d #identify_keyword_nomatches	[08]
114a		slil d #identify_keyword_nomatches	[04]
114b		skipnz	a
114c		jalr	d d
114d		sliu d #identify_keyword_loop	[00]
114e		slil d #identify_keyword_loop	[06]
114f		jalr	d d	

1150	#identify_keyword_notendofkeyword		; are we at end of test word? if so, no match

1150		pop	a
1151		page	a
1152		push	a
1153		load	a [b]
1154		push	a
1155		sliu d 0
1156		slil d 0
1157		sub	a d
1158		sliu d #@identify_keyword3	[06]
1159		slil d #@identify_keyword3	[00]
115a		skipz	a
115b		jalr	d d
115c		pop	a
115d		sliu d #identify_keyword_doesntmatch	[03]
115e		slil d #identify_keyword_doesntmatch	[05]
115f		jalr	d d
1160	#@identify_keyword3
1160		pop	a
1161		push	a
1162		sliu d 2
1163		slil d 0
1164		sub	a d
1165		sliu d #@identify_keyword4	[06]
1166		slil d #@identify_keyword4	[0d]
1167		skipz	a
1168		jalr	d d
1169		pop	a
116a		sliu d #identify_keyword_doesntmatch	[03]
116b		slil d #identify_keyword_doesntmatch	[05]
116c		jalr	d d
116d	#@identify_keyword4
116d		pop	a	
		;test if the letters are the same

116e		sliu d 7
116f		slil d 14
1170		page	d
1171		load	d [c]	

1172		sub	a d
1173		sliu d #identify_keyword_doesntmatch	[03]
1174		slil d #identify_keyword_doesntmatch	[05]
1175		skipz	a
1176		jalr	d d	
		;not done with matching.  go to next character

1177		inc	b
1178		inc	c
1179		sliu d #identify_keyword_loop	[00]
117a		slil d #identify_keyword_loop	[06]
117b		jalr	d d	

117c	#identify_keyword_match		; the next char is the token

117c		sliu d 7
117d		slil d 14
117e		page	d
117f		inc	c
1180		load	a [c]
1181		sliu d #identify_keyword_done	[08]
1182		slil d #identify_keyword_done	[05]
1183		jalr	d d	

1184	#identify_keyword_nomatches	

1184		sub	a a	

1185	#identify_keyword_done
1185		pop	d
1186		page	d
1187		pop	d
1188		pop	d
1189		pop	c
118a		jmpfar	d d	
	; identify_keyword ends
	
	

118b		org 1200	
	; ------- GLOBAL FUNCTION basic -------

1200	#basic
1200		pop	c
1201		push	d		; print "tiny basic"

1202		sliu a 7
1203		slil a 15
1204		sliu b #basic_message	[00]
1205		slil b #basic_message	[0e]	; calling global function printstring

1206		push	d
1207		push	c
1208		push	b
1209		sliu d 1
120a		slil d 2
120b		push	d
120c		push	c
120d		sliu c 0
120e		slil c 5
120f		sliu d #printstring	[00]
1210		slil d #printstring	[00]
1211		jmpfar	d d
1212		pop	b
1213		pop	c
1214		pop	d	; calling global function basic_init

1215		push	d
1216		push	c
1217		push	b
1218		sliu d 1
1219		slil d 2
121a		push	d
121b		push	c
121c		sliu c 1
121d		slil c 3
121e		sliu d #basic_init	[01]
121f		slil d #basic_init	[0a]
1220		jmpfar	d d
1221		pop	b
1222		pop	c
1223		pop	d	; calling global function initvar

1224		push	d
1225		push	c
1226		push	b
1227		sliu d 1
1228		slil d 2
1229		push	d
122a		push	c
122b		sliu c 1
122c		slil c 13
122d		sliu d #initvar	[00]
122e		slil d #initvar	[00]
122f		jmpfar	d d
1230		pop	b
1231		pop	c
1232		pop	d	
		; main basic loop

1233	#basicloop	; calling global function clear_error

1233		push	d
1234		push	c
1235		push	b
1236		sliu d 1
1237		slil d 2
1238		push	d
1239		push	c
123a		sliu c 1
123b		slil c 12
123c		sliu d #clear_error	[01]
123d		slil d #clear_error	[0f]
123e		jmpfar	d d
123f		pop	b
1240		pop	c
1241		pop	d
1242		sliu d 0
1243		slil d 13
1244		out	d
1245		sliu d 2
1246		slil d 0
1247		out	d	
		; print "Ok" prompt

1248		sliu a 7
1249		slil a 15
124a		sliu b #basic_prompt	[01]
124b		slil b #basic_prompt	[09]	; calling global function printstring

124c		push	d
124d		push	c
124e		push	b
124f		sliu d 1
1250		slil d 2
1251		push	d
1252		push	c
1253		sliu c 0
1254		slil c 5
1255		sliu d #printstring	[00]
1256		slil d #printstring	[00]
1257		jmpfar	d d
1258		pop	b
1259		pop	c
125a		pop	d	;	li	d,0x0d
	;	out	d

125b		sliu d 2
125c		slil d 0
125d		out	d	
		; read a string to fd00

125e		sliu a 15
125f		slil a 13
1260		sliu b 0
1261		slil b 0	; calling global function readstring

1262		push	d
1263		push	c
1264		push	b
1265		sliu d 1
1266		slil d 2
1267		push	d
1268		push	c
1269		sliu c 0
126a		slil c 6
126b		sliu d #readstring	[01]
126c		slil d #readstring	[03]
126d		jmpfar	d d
126e		pop	b
126f		pop	c
1270		pop	d	
		; convert it to tokens at fd80
	; calling global function tokenizeline

1271		push	d
1272		push	c
1273		push	b
1274		sliu d 1
1275		slil d 2
1276		push	d
1277		push	c
1278		sliu c 1
1279		slil c 3
127a		sliu d #tokenizeline	[00]
127b		slil d #tokenizeline	[00]
127c		jmpfar	d d
127d		pop	b
127e		pop	c
127f		pop	d
1280		push	a
1281		sliu d 0
1282		slil d 0
1283		sub	a d
1284		sliu d #@basic0	[08]
1285		slil d #@basic0	[0c]
1286		skipz	a
1287		jalr	d d
1288		pop	a
1289		sliu d #basicloop_handle	[0a]
128a		slil d #basicloop_handle	[03]
128b		jalr	d d
128c	#@basic0
128c		pop	a		; print error

128d		sliu a 7
128e		slil a 15
128f		sliu b #lexical_error	[01]
1290		slil b #lexical_error	[0f]	; calling global function printstring

1291		push	d
1292		push	c
1293		push	b
1294		sliu d 1
1295		slil d 2
1296		push	d
1297		push	c
1298		sliu c 0
1299		slil c 5
129a		sliu d #printstring	[00]
129b		slil d #printstring	[00]
129c		jmpfar	d d
129d		pop	b
129e		pop	c
129f		pop	d
12a0		sliu d #basicloop	[03]
12a1		slil d #basicloop	[03]
12a2		jalr	d d	

12a3	#basicloop_handle		; if the first token is a line number, save line in program space

12a3		sliu a 15
12a4		slil a 13
12a5		page	a
12a6		sliu c 8
12a7		slil c 0
12a8		load	a [c]
12a9		push	a
12aa		sliu d 3
12ab		slil d 0
12ac		sub	a d
12ad		sliu d #@basic1	[0b]
12ae		slil d #@basic1	[05]
12af		skipl	a
12b0		jalr	d d
12b1		pop	a
12b2		sliu d #basic_notprog	[0d]
12b3		slil d #basic_notprog	[05]
12b4		jalr	d d
12b5	#@basic1
12b5		pop	a
12b6		push	a
12b7		sliu d 3
12b8		slil d 10
12b9		sub	a d
12ba		sliu d #@basic2	[0c]
12bb		slil d #@basic2	[02]
12bc		skipge	a
12bd		jalr	d d
12be		pop	a
12bf		sliu d #basic_notprog	[0d]
12c0		slil d #basic_notprog	[05]
12c1		jalr	d d
12c2	#@basic2
12c2		pop	a	
	; calling global function basic_saveline

12c3		push	d
12c4		push	c
12c5		push	b
12c6		sliu d 1
12c7		slil d 2
12c8		push	d
12c9		push	c
12ca		sliu c 1
12cb		slil c 3
12cc		sliu d #basic_saveline	[03]
12cd		slil d #basic_saveline	[0f]
12ce		jmpfar	d d
12cf		pop	b
12d0		pop	c
12d1		pop	d
12d2		sliu d #basicloop	[03]
12d3		slil d #basicloop	[03]
12d4		jalr	d d	

12d5	#basic_notprog	; calling global function basic_doline

12d5		push	d
12d6		push	c
12d7		push	b
12d8		sliu d 1
12d9		slil d 2
12da		push	d
12db		push	c
12dc		sliu c 2
12dd		slil c 14
12de		sliu d #basic_doline	[00]
12df		slil d #basic_doline	[00]
12e0		jmpfar	d d
12e1		pop	b
12e2		pop	c
12e3		pop	d
12e4		sliu d #basicloop	[03]
12e5		slil d #basicloop	[03]
12e6		jalr	d d
12e7		pop	d
12e8		pop	c
12e9		jmpfar	d d	
	; basic ends
	
	

12ea		org 1300	
	; ------- GLOBAL FUNCTION tokenizeline -------

1300	#tokenizeline
1300		pop	c
1301		push	d
1302		sliu a 15
1303		slil a 13
1304		sliu b 0
1305		slil b 0
1306		sliu c 8
1307		slil c 0	; calling global function tokenize

1308		push	d
1309		push	c
130a		push	b
130b		sliu d 1
130c		slil d 3
130d		push	d
130e		push	c
130f		sliu c 1
1310		slil c 0
1311		sliu d #tokenize	[00]
1312		slil d #tokenize	[00]
1313		jmpfar	d d
1314		pop	b
1315		pop	c
1316		pop	d	;	li	a,0xfd
	;	li	b,0x80
	;	.call printstring
	;	li	a,0x0d
	;	out	a
	;	li	a,0x0a
	;	out	a
	;	li	a,0x20
	;	out	a

1317		pop	d
1318		pop	c
1319		jmpfar	d d	
	; tokenizeline ends
	
	
	
	; ------- GLOBAL FUNCTION basic_init -------

131a	#basic_init
131a		pop	c
131b		push	d		; goes from pages 0x90 to 0xcf and sets to 0

131c		sliu a 0
131d		slil a 0
131e		sliu c 9
131f		slil c 0
1320	#basic_init_pageloop
1320		page	c
1321		sliu b 0
1322		slil b 0
1323	#basic_init_addrloop
1323		sliu d 2
1324		slil d 0
1325		sub	b d
1326		store	a [b]
1327		dec	b
1328		store	a [b]
1329		inc	b
132a		sliu d #basic_init_addrloop	[02]
132b		slil d #basic_init_addrloop	[03]
132c		skipz	b
132d		jalr	d d
132e		inc	c
132f		push	c
1330		sliu d 13
1331		slil d 0
1332		sub	c d
1333		sliu d #@basic_init0	[03]
1334		slil d #@basic_init0	[0b]
1335		skipnz	c
1336		jalr	d d
1337		pop	c
1338		sliu d #basic_init_pageloop	[02]
1339		slil d #basic_init_pageloop	[00]
133a		jalr	d d
133b	#@basic_init0
133b		pop	c
133c		pop	d
133d		pop	c
133e		jmpfar	d d	
	; basic_init ends
	
	
	
	; ------- GLOBAL FUNCTION basic_saveline -------

133f	#basic_saveline
133f		pop	c
1340		push	d		; copy line at fd80 to program space and link line number
		; program space from pages 90 to af, tokenized program from b0 to cf
		; each program line is given 0x20 space
	
		; find end of line number in line

1341		sliu a 15
1342		slil a 13
1343		page	a
1344		sliu b 8
1345		slil b 0
1346	#basic_saveline_passlinenumber
1346		inc	b
1347		load	a [b]
1348		push	a
1349		sliu d 2
134a		slil d 0
134b		sub	a d
134c		sliu d #@basic_saveline0	[05]
134d		slil d #@basic_saveline0	[04]
134e		skipnz	a
134f		jalr	d d
1350		pop	a
1351		sliu d #basic_saveline_passlinenumber	[04]
1352		slil d #basic_saveline_passlinenumber	[06]
1353		jalr	d d
1354	#@basic_saveline0
1354		pop	a	
		; now work forward to find the 0x00

1355		sub	c c
1356	#basic_saveline_findeol
1356		inc	b
1357		inc	c
1358		load	a [b]
1359		push	a
135a		sliu d 0
135b		slil d 0
135c		sub	a d
135d		sliu d #@basic_saveline1	[06]
135e		slil d #@basic_saveline1	[05]
135f		skipnz	a
1360		jalr	d d
1361		pop	a
1362		sliu d #basic_saveline_findeol	[05]
1363		slil d #basic_saveline_findeol	[06]
1364		jalr	d d
1365	#@basic_saveline1
1365		pop	a	
		; c now holds number of bytes to save
		
		; push tokenized line between fd9f-fd80 to stack

1366	#basic_saveline_pushloop
1366		load	a [b]
1367		push	a
1368		dec	b
1369		dec	c
136a		push	c
136b		sliu d 0
136c		slil d 0
136d		sub	c d
136e		sliu d #@basic_saveline2	[07]
136f		slil d #@basic_saveline2	[06]
1370		skipnz	c
1371		jalr	d d
1372		pop	c
1373		sliu d #basic_saveline_pushloop	[06]
1374		slil d #basic_saveline_pushloop	[06]
1375		jalr	d d
1376	#@basic_saveline2
1376		pop	c	
		; push fd1f to fd00 to stack

1377		sliu b 1
1378		slil b 15
1379	#basic_saveline_pushloop2
1379		load	a [b]
137a		push	a
137b		dec	b
137c		push	b
137d		sliu d 15
137e		slil d 15
137f		sub	b d
1380		sliu d #@basic_saveline3	[08]
1381		slil d #@basic_saveline3	[08]
1382		skipnz	b
1383		jalr	d d
1384		pop	b
1385		sliu d #basic_saveline_pushloop2	[07]
1386		slil d #basic_saveline_pushloop2	[09]
1387		jalr	d d
1388	#@basic_saveline3
1388		pop	b	
		; get line number

1389		sliu a 15
138a		slil a 13
138b		sliu b 8
138c		slil b 0	; calling global function dectobin

138d		push	d
138e		push	c
138f		push	b
1390		sliu d 1
1391		slil d 3
1392		push	d
1393		push	c
1394		sliu c 1
1395		slil c 4
1396		sliu d #dectobin	[00]
1397		slil d #dectobin	[00]
1398		jmpfar	d d
1399		pop	b
139a		pop	c
139b		pop	d	
		; divide it by eight to get the page number

139c		push	a
139d		sliu d 15
139e		slil d 8
139f		nand	a d
13a0		nand	a a
13a1		sliu b 0
13a2		slil b 8	; calling global function div_even

13a3		push	d
13a4		push	c
13a5		push	b
13a6		sliu d 1
13a7		slil d 3
13a8		push	d
13a9		push	c
13aa		sliu c 0
13ab		slil c 7
13ac		sliu d #div_even	[06]
13ad		slil d #div_even	[0a]
13ae		jmpfar	d d
13af		pop	b
13b0		pop	c
13b1		pop	d
13b2		sliu d 9
13b3		slil d 0
13b4		add	a d
13b5		page	a
13b6		sub	c c
13b7		add	c a	
		; last three bits * 32 is the address

13b8		pop	a
13b9		sliu d 0
13ba		slil d 7
13bb		nand	a d
13bc		nand	a a
13bd		sliu b 2
13be		slil b 0	; calling global function mul

13bf		push	d
13c0		push	c
13c1		push	b
13c2		sliu d 1
13c3		slil d 3
13c4		push	d
13c5		push	c
13c6		sliu c 0
13c7		slil c 8
13c8		sliu d #mul	[00]
13c9		slil d #mul	[00]
13ca		jmpfar	d d
13cb		pop	b
13cc		pop	c
13cd		pop	d	
		;copy string from stack

13ce		sliu b 2
13cf		slil b 0
13d0	#basic_saveline_poploop
13d0		pop	d
13d1		store	d [a]
13d2		inc	a
13d3		dec	b
13d4		sliu d #basic_saveline_poploop	[0d]
13d5		slil d #basic_saveline_poploop	[00]
13d6		skipz	b
13d7		jalr	d d	
		;advance page by 0x20 and copy tokenized from stack

13d8		sliu d 2
13d9		slil d 0
13da		add	c d
13db		page	c
13dc		sub	a d
13dd	#basic_saveline_poploop2
13dd		pop	c
13de		store	c [a]
13df		inc	a
13e0		sliu d #basic_saveline_poploop2	[0d]
13e1		slil d #basic_saveline_poploop2	[0d]
13e2		skipz	c
13e3		jalr	d d
13e4		pop	d
13e5		pop	c
13e6		jmpfar	d d	
	; basic_saveline ends
	
	

13e7		org 1400	
	
	; ------- GLOBAL FUNCTION dectobin -------

1400	#dectobin
1400		pop	c
1401		push	d		;page in A, string addr in B terminated in ' ' or 0, returns num in A
	

1402		page	a
1403		sub	a a
1404	#dectobin_digloop
1404		load	c [b]		; check if digit is a ' ' or  \0

1405		sliu d #dectobin_digdone	[02]
1406		slil d #dectobin_digdone	[0c]
1407		skipnz	c
1408		jalr	d d
1409		sliu d 2
140a		slil d 0
140b		sub	c d
140c		sliu d #dectobin_digdone	[02]
140d		slil d #dectobin_digdone	[0c]
140e		skipnz	c
140f		jalr	d d	
		; multiply a = a * 10

1410		push	b
1411		sliu b 0
1412		slil b 10	; calling global function mul

1413		push	d
1414		push	c
1415		push	b
1416		sliu d 1
1417		slil d 4
1418		push	d
1419		push	c
141a		sliu c 0
141b		slil c 8
141c		sliu d #mul	[00]
141d		slil d #mul	[00]
141e		jmpfar	d d
141f		pop	b
1420		pop	c
1421		pop	d
1422		pop	b	
		; add digit

1423		load	c [b]
1424		add	a c
1425		sliu d 3
1426		slil d 0
1427		sub	a d	

1428		inc	b
1429		sliu d #dectobin_digloop	[00]
142a		slil d #dectobin_digloop	[04]
142b		jalr	d d
142c	#dectobin_digdone
142c		pop	d
142d		pop	c
142e		jmpfar	d d	
	; dectobin ends
	
	

142f		org 1600	
	; ------- GLOBAL FUNCTION doPRINT -------

1600	#doPRINT
1600		pop	c
1601		push	d		; start at beginning of line

1602		sliu c 8
1603		slil c 2	

1604	#doprint_loop		; get the token

1604		load	a [c]		; handle " 

1605		push	a
1606		sliu d 2
1607		slil d 2
1608		sub	a d
1609		sliu d #@doPRINT0	[01]
160a		slil d #@doPRINT0	[01]
160b		skipz	a
160c		jalr	d d
160d		pop	a
160e		sliu d #doprint_str	[07]
160f		slil d #doprint_str	[0b]
1610		jalr	d d
1611	#@doPRINT0
1611		pop	a		; handle ,

1612		push	a
1613		sliu d 2
1614		slil d 12
1615		sub	a d
1616		sliu d #@doPRINT1	[01]
1617		slil d #@doPRINT1	[0e]
1618		skipz	a
1619		jalr	d d
161a		pop	a
161b		sliu d #doprint_comma	[06]
161c		slil d #doprint_comma	[0d]
161d		jalr	d d
161e	#@doPRINT1
161e		pop	a		; handle ;

161f		push	a
1620		sliu d 3
1621		slil d 11
1622		sub	a d
1623		sliu d #@doPRINT2	[02]
1624		slil d #@doPRINT2	[0b]
1625		skipz	a
1626		jalr	d d
1627		pop	a
1628		sliu d #doprint_semicolon	[06]
1629		slil d #doprint_semicolon	[0a]
162a		jalr	d d
162b	#@doPRINT2
162b		pop	a		; handle eol

162c		push	a
162d		sliu d 0
162e		slil d 0
162f		sub	a d
1630		sliu d #@doPRINT3	[03]
1631		slil d #@doPRINT3	[08]
1632		skipz	a
1633		jalr	d d
1634		pop	a
1635		sliu d #doprint_eol	[07]
1636		slil d #doprint_eol	[02]
1637		jalr	d d
1638	#@doPRINT3
1638		pop	a
1639		push	a
163a		sliu d 3
163b		slil d 10
163c		sub	a d
163d		sliu d #@doPRINT4	[04]
163e		slil d #@doPRINT4	[05]
163f		skipz	a
1640		jalr	d d
1641		pop	a
1642		sliu d #doprint_eol	[07]
1643		slil d #doprint_eol	[02]
1644		jalr	d d
1645	#@doPRINT4
1645		pop	a		; evaluate expression
	; calling global function eval_expression

1646		push	d
1647		push	c
1648		push	b
1649		sliu d 1
164a		slil d 6
164b		push	d
164c		push	c
164d		sliu c 1
164e		slil c 7
164f		sliu d #eval_expression	[00]
1650		slil d #eval_expression	[00]
1651		jmpfar	d d
1652		pop	b
1653		pop	c
1654		pop	d
1655		sliu c 15
1656		slil c 15
1657		load	c [c]	; calling global function print_integer

1658		push	d
1659		push	c
165a		push	b
165b		sliu d 1
165c		slil d 6
165d		push	d
165e		push	c
165f		sliu c 1
1660		slil c 11
1661		sliu d #print_integer	[00]
1662		slil d #print_integer	[00]
1663		jmpfar	d d
1664		pop	b
1665		pop	c
1666		pop	d
1667		sliu d #doprint_loop	[00]
1668		slil d #doprint_loop	[04]
1669		jalr	d d	

166a	#doprint_semicolon		; print a space separator and end
	;	li	d,0x20
	;	out	d
	

166a		sliu d #doprint_done	[0a]
166b		slil d #doprint_done	[00]
166c		jalr	d d	

166d	#doprint_comma		; print a space separator
	;	li	d,0x20
	;	out	d

166d		inc	c
166e		inc	c
166f		sliu d #doprint_loop	[00]
1670		slil d #doprint_loop	[04]
1671		jalr	d d	

1672	#doprint_eol		; print a newline and end

1672		sliu d 0
1673		slil d 13
1674		out	d
1675		sliu d 2
1676		slil d 0
1677		out	d
1678		sliu d #doprint_done	[0a]
1679		slil d #doprint_done	[00]
167a		jalr	d d	

167b	#doprint_str		; advance past "

167b		inc	c		; read chars and print until reach other "

167c		load	a [c]
167d		push	a
167e		sliu d 2
167f		slil d 2
1680		sub	a d
1681		sliu d #@doPRINT5	[08]
1682		slil d #@doPRINT5	[09]
1683		skipz	a
1684		jalr	d d
1685		pop	a
1686		sliu d #doprint_str_done	[09]
1687		slil d #doprint_str_done	[0b]
1688		jalr	d d
1689	#@doPRINT5
1689		pop	a
168a		push	a
168b		sliu d 0
168c		slil d 0
168d		sub	a d
168e		sliu d #@doPRINT6	[09]
168f		slil d #@doPRINT6	[06]
1690		skipz	a
1691		jalr	d d
1692		pop	a
1693		sliu d #doprint_eol	[07]
1694		slil d #doprint_eol	[02]
1695		jalr	d d
1696	#@doPRINT6
1696		pop	a
1697		out	a
1698		sliu d #doprint_str	[07]
1699		slil d #doprint_str	[0b]
169a		jalr	d d
169b	#doprint_str_done
169b		inc	c
169c		inc	c
169d		sliu d #doprint_loop	[00]
169e		slil d #doprint_loop	[04]
169f		jalr	d d
16a0	#doprint_done
16a0		sliu d 15
16a1		slil d 15
16a2		store	c [d]
16a3		pop	d
16a4		pop	c
16a5		jmpfar	d d	
	; doPRINT ends
	
	

16a6		org 1700	
	; ------- GLOBAL FUNCTION eval_expression -------

1700	#eval_expression
1700		pop	c
1701		push	d	
		;C points to expression, A returns value, 0xff returns new C
	
		;expression is: term | term + term [ + term ]* | term - term [ - term]*
	
		; stop if there's a pending error
	; calling global function error_marked

1702		push	d
1703		push	c
1704		push	b
1705		sliu d 1
1706		slil d 7
1707		push	d
1708		push	c
1709		sliu c 1
170a		slil c 12
170b		sliu d #error_marked	[01]
170c		slil d #error_marked	[01]
170d		jmpfar	d d
170e		pop	b
170f		pop	c
1710		pop	d
1711		sliu d #eval_expression_end	[0e]
1712		slil d #eval_expression_end	[01]
1713		skipz	a
1714		jalr	d d	
		; get the first term
	; calling global function eval_term

1715		push	d
1716		push	c
1717		push	b
1718		sliu d 1
1719		slil d 7
171a		push	d
171b		push	c
171c		sliu c 1
171d		slil c 8
171e		sliu d #eval_term	[00]
171f		slil d #eval_term	[00]
1720		jmpfar	d d
1721		pop	b
1722		pop	c
1723		pop	d
1724		sliu c 15
1725		slil c 15
1726		load	c [c]	

1727	#eval_expression_loop		; stop if an error

1727		push	a	; calling global function error_marked

1728		push	d
1729		push	c
172a		push	b
172b		sliu d 1
172c		slil d 7
172d		push	d
172e		push	c
172f		sliu c 1
1730		slil c 12
1731		sliu d #error_marked	[01]
1732		slil d #error_marked	[01]
1733		jmpfar	d d
1734		pop	b
1735		pop	c
1736		pop	d
1737		sliu d #eval_expression_errorstop	[0c]
1738		slil d #eval_expression_errorstop	[0b]
1739		skipz	a
173a		jalr	d d
173b		pop	a	
		; check for valid end tokens

173c		push	a
173d		load	b [c]
173e		push	c
173f		sliu d 7
1740		slil d 14
1741		page	d
1742		sliu c #endtokenlist	[0d]
1743		slil c #endtokenlist	[01]
1744	#eval_validloop
1744		load	a [c]
1745		push	a
1746		sub	a b
1747		sliu d #@eval_expression0	[04]
1748		slil d #@eval_expression0	[0f]
1749		skipz	a
174a		jalr	d d
174b		pop	a
174c		sliu d #eval_validend	[06]
174d		slil d #eval_validend	[01]
174e		jalr	d d
174f	#@eval_expression0
174f		pop	a
1750		push	a
1751		sliu d 0
1752		slil d 0
1753		sub	a d
1754		sliu d #@eval_expression1	[05]
1755		slil d #@eval_expression1	[0c]
1756		skipz	a
1757		jalr	d d
1758		pop	a
1759		sliu d #eval_notvalidend	[06]
175a		slil d #eval_notvalidend	[09]
175b		jalr	d d
175c	#@eval_expression1
175c		pop	a
175d		inc	c
175e		sliu d #eval_validloop	[04]
175f		slil d #eval_validloop	[04]
1760		jalr	d d	

1761	#eval_validend
1761		sliu d 15
1762		slil d 13
1763		page	d
1764		pop	c
1765		pop	a
1766		sliu d #eval_expression_end	[0e]
1767		slil d #eval_expression_end	[01]
1768		jalr	d d
1769	#eval_notvalidend
1769		sliu d 15
176a		slil d 13
176b		page	d
176c		pop	c
176d		pop	a		
		; check for arithmetic tokens: + or -

176e		load	b [c]
176f		sliu d 2
1770		slil d 11
1771		sub	b d
1772		sliu d #eval_expression_plusminus	[08]
1773		slil d #eval_expression_plusminus	[01]
1774		skipnz	b
1775		jalr	d d
1776		load	b [c]
1777		sliu d 2
1778		slil d 13
1779		sub	b d
177a		sliu d #eval_expression_plusminus	[08]
177b		slil d #eval_expression_plusminus	[01]
177c		skipnz	b
177d		jalr	d d	
		; otherwise error

177e		sliu d #eval_expression_error	[0d]
177f		slil d #eval_expression_error	[00]
1780		jalr	d d	

1781	#eval_expression_plusminus		; push operation

1781		load	b [c]
1782		push	b	
		; save current sum into b

1783		sub	b b
1784		add	b a	
		; move to next token

1785		inc	c		; if nothing after the plus then error

1786		load	a [c]
1787		sliu d #eval_expression_errorpopop	[0c]
1788		slil d #eval_expression_errorpopop	[0f]
1789		skipnz	a
178a		jalr	d d
178b		inc	c	
		; get the next term
	; calling global function eval_term

178c		push	d
178d		push	c
178e		push	b
178f		sliu d 1
1790		slil d 7
1791		push	d
1792		push	c
1793		sliu c 1
1794		slil c 8
1795		sliu d #eval_term	[00]
1796		slil d #eval_term	[00]
1797		jmpfar	d d
1798		pop	b
1799		pop	c
179a		pop	d
179b		sliu c 15
179c		slil c 15
179d		load	c [c]	
		; stop if an error

179e		push	a	; calling global function error_marked

179f		push	d
17a0		push	c
17a1		push	b
17a2		sliu d 1
17a3		slil d 7
17a4		push	d
17a5		push	c
17a6		sliu c 1
17a7		slil c 12
17a8		sliu d #error_marked	[01]
17a9		slil d #error_marked	[01]
17aa		jmpfar	d d
17ab		pop	b
17ac		pop	c
17ad		pop	d
17ae		sliu d #eval_expression_errorstoppop	[0c]
17af		slil d #eval_expression_errorstoppop	[0a]
17b0		skipz	a
17b1		jalr	d d
17b2		pop	a	

17b3		push	c		; reload the operation

17b4		pop	d
17b5		pop	c
17b6		push	d
17b7		sliu d 2
17b8		slil d 13
17b9		sub	c d
17ba		sliu d #eval_expression_sub	[0c]
17bb		slil d #eval_expression_sub	[03]
17bc		skipnz	c
17bd		jalr	d d		; add it

17be		add	a b
17bf		pop	c
17c0		sliu d #eval_expression_loop	[02]
17c1		slil d #eval_expression_loop	[07]
17c2		jalr	d d
17c3	#eval_expression_sub		; subtract it

17c3		sub	b a
17c4		sub	a a
17c5		add	a b
17c6		pop	c
17c7		sliu d #eval_expression_loop	[02]
17c8		slil d #eval_expression_loop	[07]
17c9		jalr	d d	

17ca	#eval_expression_errorstoppop
17ca		pop	d
17cb	#eval_expression_errorstop
17cb		pop	a
17cc		sliu d #eval_expression_end	[0e]
17cd		slil d #eval_expression_end	[01]
17ce		jalr	d d
17cf	#eval_expression_errorpopop
17cf		pop	d
17d0	#eval_expression_error
17d0		sliu a 0
17d1		slil a 1	; calling global function mark_error

17d2		push	d
17d3		push	c
17d4		push	b
17d5		sliu d 1
17d6		slil d 7
17d7		push	d
17d8		push	c
17d9		sliu c 1
17da		slil c 12
17db		sliu d #mark_error	[00]
17dc		slil d #mark_error	[00]
17dd		jmpfar	d d
17de		pop	b
17df		pop	c
17e0		pop	d
17e1	#eval_expression_end
17e1		sliu d 15
17e2		slil d 15
17e3		store	c [d]
17e4		pop	d
17e5		pop	c
17e6		jmpfar	d d	
	; eval_expression ends
	
	

17e7		org 1800	
	; ------- GLOBAL FUNCTION eval_term -------

1800	#eval_term
1800		pop	c
1801		push	d	
		;C points to expression, A returns value, 0xff returns new C
	
		;expression is: paren | paren * paren [ * paren ]* | paren / paren [ / paren]*
	
		; stop if there's a pending error
	; calling global function error_marked

1802		push	d
1803		push	c
1804		push	b
1805		sliu d 1
1806		slil d 8
1807		push	d
1808		push	c
1809		sliu c 1
180a		slil c 12
180b		sliu d #error_marked	[01]
180c		slil d #error_marked	[01]
180d		jmpfar	d d
180e		pop	b
180f		pop	c
1810		pop	d
1811		sliu d #eval_term_end	[0f]
1812		slil d #eval_term_end	[00]
1813		skipz	a
1814		jalr	d d	
		; get the first term
	; calling global function eval_paren

1815		push	d
1816		push	c
1817		push	b
1818		sliu d 1
1819		slil d 8
181a		push	d
181b		push	c
181c		sliu c 1
181d		slil c 9
181e		sliu d #eval_paren	[00]
181f		slil d #eval_paren	[00]
1820		jmpfar	d d
1821		pop	b
1822		pop	c
1823		pop	d
1824		sliu c 15
1825		slil c 15
1826		load	c [c]	

1827	#eval_term_loop		; stop if an error

1827		push	a	; calling global function error_marked

1828		push	d
1829		push	c
182a		push	b
182b		sliu d 1
182c		slil d 8
182d		push	d
182e		push	c
182f		sliu c 1
1830		slil c 12
1831		sliu d #error_marked	[01]
1832		slil d #error_marked	[01]
1833		jmpfar	d d
1834		pop	b
1835		pop	c
1836		pop	d
1837		sliu d #eval_term_errorstop	[0d]
1838		slil d #eval_term_errorstop	[0a]
1839		skipz	a
183a		jalr	d d
183b		pop	a	
		; check for end token 0x00

183c		load	b [c]
183d		sliu d #eval_term_end	[0f]
183e		slil d #eval_term_end	[00]
183f		skipnz	b
1840		jalr	d d		
		; check for arithmetic tokens: * or / or %

1841		load	b [c]		;* is 2a

1842		sliu d 2
1843		slil d 10
1844		sub	b d
1845		sliu d #eval_term_multdiv	[05]
1846		slil d #eval_term_multdiv	[0a]
1847		skipnz	b
1848		jalr	d d		;/ is 2f

1849		sliu d 0
184a		slil d 5
184b		sub	b d
184c		sliu d #eval_term_multdiv	[05]
184d		slil d #eval_term_multdiv	[0a]
184e		skipnz	b
184f		jalr	d d		;% is 25

1850		sliu d 0
1851		slil d 10
1852		add	b d
1853		sliu d #eval_term_multdiv	[05]
1854		slil d #eval_term_multdiv	[0a]
1855		skipnz	b
1856		jalr	d d	
		; otherwise done

1857		sliu d #eval_term_end	[0f]
1858		slil d #eval_term_end	[00]
1859		jalr	d d	

185a	#eval_term_multdiv		; save operation

185a		load	b [c]
185b		push	b	
		; save current product into b

185c		sub	b b
185d		add	b a	
		; move to next token

185e		inc	c		; if nothing after the * then error

185f		load	a [c]
1860		sliu d #eval_term_errorpop	[0d]
1861		slil d #eval_term_errorpop	[0e]
1862		skipnz	a
1863		jalr	d d
1864		inc	c	
		; get the next term
	; calling global function eval_paren

1865		push	d
1866		push	c
1867		push	b
1868		sliu d 1
1869		slil d 8
186a		push	d
186b		push	c
186c		sliu c 1
186d		slil c 9
186e		sliu d #eval_paren	[00]
186f		slil d #eval_paren	[00]
1870		jmpfar	d d
1871		pop	b
1872		pop	c
1873		pop	d
1874		sliu c 15
1875		slil c 15
1876		load	c [c]	
		; stop if an error

1877		push	a	; calling global function error_marked

1878		push	d
1879		push	c
187a		push	b
187b		sliu d 1
187c		slil d 8
187d		push	d
187e		push	c
187f		sliu c 1
1880		slil c 12
1881		sliu d #error_marked	[01]
1882		slil d #error_marked	[01]
1883		jmpfar	d d
1884		pop	b
1885		pop	c
1886		pop	d
1887		sliu d #eval_term_errorstoppop	[0d]
1888		slil d #eval_term_errorstoppop	[09]
1889		skipz	a
188a		jalr	d d
188b		pop	a	
		;swap a and b

188c		push	a
188d		push	b
188e		pop	a
188f		pop	b	

1890		pop	d
1891		push	c		; reload the operation

1892		sliu c 2
1893		slil c 15
1894		sub	c d
1895		sliu d #eval_term_div	[0b]
1896		slil d #eval_term_div	[03]
1897		skipnz	c
1898		jalr	d d
1899		sliu d 0
189a		slil d 10
189b		sub	c d
189c		sliu d #eval_term_mod	[0c]
189d		slil d #eval_term_mod	[06]
189e		skipnz	c
189f		jalr	d d		; multiply it
	; calling global function mul

18a0		push	d
18a1		push	c
18a2		push	b
18a3		sliu d 1
18a4		slil d 8
18a5		push	d
18a6		push	c
18a7		sliu c 0
18a8		slil c 8
18a9		sliu d #mul	[00]
18aa		slil d #mul	[00]
18ab		jmpfar	d d
18ac		pop	b
18ad		pop	c
18ae		pop	d
18af		pop	c
18b0		sliu d #eval_term_loop	[02]
18b1		slil d #eval_term_loop	[07]
18b2		jalr	d d
18b3	#eval_term_div		; divide it
	; calling global function div

18b3		push	d
18b4		push	c
18b5		push	b
18b6		sliu d 1
18b7		slil d 8
18b8		push	d
18b9		push	c
18ba		sliu c 0
18bb		slil c 7
18bc		sliu d #div	[00]
18bd		slil d #div	[00]
18be		jmpfar	d d
18bf		pop	b
18c0		pop	c
18c1		pop	d
18c2		pop	c
18c3		sliu d #eval_term_loop	[02]
18c4		slil d #eval_term_loop	[07]
18c5		jalr	d d
18c6	#eval_term_mod		; mod it
	; calling global function mod

18c6		push	d
18c7		push	c
18c8		push	b
18c9		sliu d 1
18ca		slil d 8
18cb		push	d
18cc		push	c
18cd		sliu c 0
18ce		slil c 7
18cf		sliu d #mod	[08]
18d0		slil d #mod	[05]
18d1		jmpfar	d d
18d2		pop	b
18d3		pop	c
18d4		pop	d
18d5		pop	c
18d6		sliu d #eval_term_loop	[02]
18d7		slil d #eval_term_loop	[07]
18d8		jalr	d d	

18d9	#eval_term_errorstoppop
18d9		pop	d
18da	#eval_term_errorstop
18da		pop	a
18db		sliu d #eval_term_end	[0f]
18dc		slil d #eval_term_end	[00]
18dd		jalr	d d
18de	#eval_term_errorpop
18de		pop	d
18df	#eval_term_error
18df		sliu a 0
18e0		slil a 1	; calling global function mark_error

18e1		push	d
18e2		push	c
18e3		push	b
18e4		sliu d 1
18e5		slil d 8
18e6		push	d
18e7		push	c
18e8		sliu c 1
18e9		slil c 12
18ea		sliu d #mark_error	[00]
18eb		slil d #mark_error	[00]
18ec		jmpfar	d d
18ed		pop	b
18ee		pop	c
18ef		pop	d
18f0	#eval_term_end
18f0		sliu d 15
18f1		slil d 15
18f2		store	c [d]
18f3		pop	d
18f4		pop	c
18f5		jmpfar	d d	
	; eval_term ends
	
	

18f6		org 1900	
	; ------- GLOBAL FUNCTION eval_paren -------

1900	#eval_paren
1900		pop	c
1901		push	d		;expression is: RND | numvar | ( expression )
	
		; stop if there's a pending error
	; calling global function error_marked

1902		push	d
1903		push	c
1904		push	b
1905		sliu d 1
1906		slil d 9
1907		push	d
1908		push	c
1909		sliu c 1
190a		slil c 12
190b		sliu d #error_marked	[01]
190c		slil d #error_marked	[01]
190d		jmpfar	d d
190e		pop	b
190f		pop	c
1910		pop	d
1911		sliu d #eval_paren_end	[0c]
1912		slil d #eval_paren_end	[07]
1913		skipz	a
1914		jalr	d d	
		; is the token a RND?

1915		load	a [c]
1916		push	a
1917		sliu d 6
1918		slil d 14
1919		sub	a d
191a		sliu d #@eval_paren0	[02]
191b		slil d #@eval_paren0	[02]
191c		skipz	a
191d		jalr	d d
191e		pop	a
191f		sliu d #eval_paren_rnd	[04]
1920		slil d #eval_paren_rnd	[06]
1921		jalr	d d
1922	#@eval_paren0
1922		pop	a	
		; is the first token a ( ?

1923		load	a [c]
1924		push	a
1925		sliu d 2
1926		slil d 8
1927		sub	a d
1928		sliu d #@eval_paren1	[03]
1929		slil d #@eval_paren1	[00]
192a		skipz	a
192b		jalr	d d
192c		pop	a
192d		sliu d #eval_paren_paren	[05]
192e		slil d #eval_paren_paren	[0a]
192f		jalr	d d
1930	#@eval_paren1
1930		pop	a	
		; get the first term
	; calling global function eval_numorvar

1931		push	d
1932		push	c
1933		push	b
1934		sliu d 1
1935		slil d 9
1936		push	d
1937		push	c
1938		sliu c 1
1939		slil c 10
193a		sliu d #eval_numorvar	[00]
193b		slil d #eval_numorvar	[00]
193c		jmpfar	d d
193d		pop	b
193e		pop	c
193f		pop	d
1940		sliu c 15
1941		slil c 15
1942		load	c [c]
1943		sliu d #eval_paren_end	[0c]
1944		slil d #eval_paren_end	[07]
1945		jalr	d d	

1946	#eval_paren_rnd	; calling global function random_next

1946		push	d
1947		push	c
1948		push	b
1949		sliu d 1
194a		slil d 9
194b		push	d
194c		push	c
194d		sliu c 2
194e		slil c 10
194f		sliu d #random_next	[03]
1950		slil d #random_next	[0c]
1951		jmpfar	d d
1952		pop	b
1953		pop	c
1954		pop	d
1955		inc	c
1956		inc	c
1957		sliu d #eval_paren_end	[0c]
1958		slil d #eval_paren_end	[07]
1959		jalr	d d	

195a	#eval_paren_paren		;advance to expression

195a		inc	c		;no eol allowed

195b		load	b [c]
195c		push	b
195d		sliu d 0
195e		slil d 0
195f		sub	b d
1960		sliu d #@eval_paren2	[06]
1961		slil d #@eval_paren2	[08]
1962		skipz	b
1963		jalr	d d
1964		pop	b
1965		sliu d #eval_paren_error	[0b]
1966		slil d #eval_paren_error	[02]
1967		jalr	d d
1968	#@eval_paren2
1968		pop	b
1969		inc	c	
		;parse it
	; calling global function eval_expression

196a		push	d
196b		push	c
196c		push	b
196d		sliu d 1
196e		slil d 9
196f		push	d
1970		push	c
1971		sliu c 1
1972		slil c 7
1973		sliu d #eval_expression	[00]
1974		slil d #eval_expression	[00]
1975		jmpfar	d d
1976		pop	b
1977		pop	c
1978		pop	d
1979		sliu c 15
197a		slil c 15
197b		load	c [c]	
		;don't continue if an error

197c		push	a	; calling global function error_marked

197d		push	d
197e		push	c
197f		push	b
1980		sliu d 1
1981		slil d 9
1982		push	d
1983		push	c
1984		sliu c 1
1985		slil c 12
1986		sliu d #error_marked	[01]
1987		slil d #error_marked	[01]
1988		jmpfar	d d
1989		pop	b
198a		pop	c
198b		pop	d
198c		sliu d #eval_paren_stoperror	[0c]
198d		slil d #eval_paren_stoperror	[06]
198e		skipz	a
198f		jalr	d d
1990		pop	a	
		;there better be a ) next

1991		load	b [c]
1992		push	b
1993		sliu d 2
1994		slil d 9
1995		sub	b d
1996		sliu d #@eval_paren3	[09]
1997		slil d #@eval_paren3	[0e]
1998		skipnz	b
1999		jalr	d d
199a		pop	b
199b		sliu d #eval_paren_error	[0b]
199c		slil d #eval_paren_error	[02]
199d		jalr	d d
199e	#@eval_paren3
199e		pop	b
199f		inc	c
19a0		load	b [c]
19a1		push	b
19a2		sliu d 0
19a3		slil d 0
19a4		sub	b d
19a5		sliu d #@eval_paren4	[0a]
19a6		slil d #@eval_paren4	[0d]
19a7		skipz	b
19a8		jalr	d d
19a9		pop	b
19aa		sliu d #eval_paren_end	[0c]
19ab		slil d #eval_paren_end	[07]
19ac		jalr	d d
19ad	#@eval_paren4
19ad		pop	b
19ae		inc	c
19af		sliu d #eval_paren_end	[0c]
19b0		slil d #eval_paren_end	[07]
19b1		jalr	d d	

19b2	#eval_paren_error
19b2		sliu a 0
19b3		slil a 1	; calling global function mark_error

19b4		push	d
19b5		push	c
19b6		push	b
19b7		sliu d 1
19b8		slil d 9
19b9		push	d
19ba		push	c
19bb		sliu c 1
19bc		slil c 12
19bd		sliu d #mark_error	[00]
19be		slil d #mark_error	[00]
19bf		jmpfar	d d
19c0		pop	b
19c1		pop	c
19c2		pop	d
19c3		sliu d #eval_paren_end	[0c]
19c4		slil d #eval_paren_end	[07]
19c5		jalr	d d
19c6	#eval_paren_stoperror
19c6		pop	a
19c7	#eval_paren_end
19c7		sliu d 15
19c8		slil d 15
19c9		store	c [d]
19ca		pop	d
19cb		pop	c
19cc		jmpfar	d d	
	; eval_paren ends
	
	

19cd		org 1a00	
	; ------- GLOBAL FUNCTION eval_numorvar -------

1a00	#eval_numorvar
1a00		pop	c
1a01		push	d	
		; parses an integer token or returns a variable value
	
		; stop if there's a pending error
	; calling global function error_marked

1a02		push	d
1a03		push	c
1a04		push	b
1a05		sliu d 1
1a06		slil d 10
1a07		push	d
1a08		push	c
1a09		sliu c 1
1a0a		slil c 12
1a0b		sliu d #error_marked	[01]
1a0c		slil d #error_marked	[01]
1a0d		jmpfar	d d
1a0e		pop	b
1a0f		pop	c
1a10		pop	d
1a11		push	a
1a12		sliu d 0
1a13		slil d 0
1a14		sub	a d
1a15		sliu d #@eval_numorvar0	[01]
1a16		slil d #@eval_numorvar0	[0d]
1a17		skipnz	a
1a18		jalr	d d
1a19		pop	a
1a1a		sliu d #eval_numorvar_end	[0d]
1a1b		slil d #eval_numorvar_end	[00]
1a1c		jalr	d d
1a1d	#@eval_numorvar0
1a1d		pop	a	
		; up to three numbers
		; get the first

1a1e		load	a [c]	
		; check for var

1a1f		push	a
1a20		sliu d 2
1a21		slil d 3
1a22		sub	a d
1a23		sliu d #@eval_numorvar1	[02]
1a24		slil d #@eval_numorvar1	[0b]
1a25		skipz	a
1a26		jalr	d d
1a27		pop	a
1a28		sliu d #eval_numorvar_var	[0b]
1a29		slil d #eval_numorvar_var	[0e]
1a2a		jalr	d d
1a2b	#@eval_numorvar1
1a2b		pop	a	
		; check for not number or var

1a2c		push	a
1a2d		sliu d 3
1a2e		slil d 0
1a2f		sub	a d
1a30		sliu d #@eval_numorvar2	[03]
1a31		slil d #@eval_numorvar2	[08]
1a32		skipl	a
1a33		jalr	d d
1a34		pop	a
1a35		sliu d #eval_numorvar_error	[0a]
1a36		slil d #eval_numorvar_error	[0a]
1a37		jalr	d d
1a38	#@eval_numorvar2
1a38		pop	a
1a39		push	a
1a3a		sliu d 3
1a3b		slil d 9
1a3c		sub	a d
1a3d		sub	d d
1a3e		sub	d a
1a3f		sub	a a
1a40		add	a d
1a41		sliu d #@eval_numorvar3	[04]
1a42		slil d #@eval_numorvar3	[09]
1a43		skipl	a
1a44		jalr	d d
1a45		pop	a
1a46		sliu d #eval_numorvar_error	[0a]
1a47		slil d #eval_numorvar_error	[0a]
1a48		jalr	d d
1a49	#@eval_numorvar3
1a49		pop	a	
		; adjust from ascii

1a4a		sliu b 3
1a4b		slil b 0
1a4c		sub	a b
1a4d		inc	c		; get tens place

1a4e		load	b [c]		; stop if space

1a4f		push	b
1a50		sliu d 2
1a51		slil d 0
1a52		sub	b d
1a53		sliu d #@eval_numorvar4	[05]
1a54		slil d #@eval_numorvar4	[0b]
1a55		skipz	b
1a56		jalr	d d
1a57		pop	b
1a58		sliu d #eval_numorvar_numdone	[09]
1a59		slil d #eval_numorvar_numdone	[08]
1a5a		jalr	d d
1a5b	#@eval_numorvar4
1a5b		pop	b		; multiply hundreds place by 10

1a5c		sliu b 0
1a5d		slil b 10	; calling global function mul

1a5e		push	d
1a5f		push	c
1a60		push	b
1a61		sliu d 1
1a62		slil d 10
1a63		push	d
1a64		push	c
1a65		sliu c 0
1a66		slil c 8
1a67		sliu d #mul	[00]
1a68		slil d #mul	[00]
1a69		jmpfar	d d
1a6a		pop	b
1a6b		pop	c
1a6c		pop	d		; reload tens place and add it

1a6d		load	b [c]
1a6e		add	a b
1a6f		sliu b 3
1a70		slil b 0
1a71		sub	a b
1a72		inc	c		; get ones place

1a73		load	b [c]		; stop if space

1a74		push	b
1a75		sliu d 2
1a76		slil d 0
1a77		sub	b d
1a78		sliu d #@eval_numorvar5	[08]
1a79		slil d #@eval_numorvar5	[00]
1a7a		skipz	b
1a7b		jalr	d d
1a7c		pop	b
1a7d		sliu d #eval_numorvar_numdone	[09]
1a7e		slil d #eval_numorvar_numdone	[08]
1a7f		jalr	d d
1a80	#@eval_numorvar5
1a80		pop	b		; multiply 100s and 10s by 10

1a81		sliu b 0
1a82		slil b 10	; calling global function mul

1a83		push	d
1a84		push	c
1a85		push	b
1a86		sliu d 1
1a87		slil d 10
1a88		push	d
1a89		push	c
1a8a		sliu c 0
1a8b		slil c 8
1a8c		sliu d #mul	[00]
1a8d		slil d #mul	[00]
1a8e		jmpfar	d d
1a8f		pop	b
1a90		pop	c
1a91		pop	d
1a92		load	b [c]
1a93		add	a b
1a94		sliu b 3
1a95		slil b 0
1a96		sub	a b
1a97		inc	c	

1a98	#eval_numorvar_numdone		; next thing should be space or eol

1a98		load	b [c]
1a99		push	b
1a9a		sliu d 0
1a9b		slil d 0
1a9c		sub	b d
1a9d		sliu d #@eval_numorvar6	[0a]
1a9e		slil d #@eval_numorvar6	[05]
1a9f		skipz	b
1aa0		jalr	d d
1aa1		pop	b
1aa2		sliu d #eval_numorvar_end	[0d]
1aa3		slil d #eval_numorvar_end	[00]
1aa4		jalr	d d
1aa5	#@eval_numorvar6
1aa5		pop	b
1aa6		inc	c
1aa7		sliu d #eval_numorvar_end	[0d]
1aa8		slil d #eval_numorvar_end	[00]
1aa9		jalr	d d
1aaa	#eval_numorvar_error
1aaa		sliu a 0
1aab		slil a 1	; calling global function mark_error

1aac		push	d
1aad		push	c
1aae		push	b
1aaf		sliu d 1
1ab0		slil d 10
1ab1		push	d
1ab2		push	c
1ab3		sliu c 1
1ab4		slil c 12
1ab5		sliu d #mark_error	[00]
1ab6		slil d #mark_error	[00]
1ab7		jmpfar	d d
1ab8		pop	b
1ab9		pop	c
1aba		pop	d
1abb		sliu d #eval_numorvar_end	[0d]
1abc		slil d #eval_numorvar_end	[00]
1abd		jalr	d d
1abe	#eval_numorvar_var	; calling global function eval_var

1abe		push	d
1abf		push	c
1ac0		push	b
1ac1		sliu d 1
1ac2		slil d 10
1ac3		push	d
1ac4		push	c
1ac5		sliu c 1
1ac6		slil c 11
1ac7		sliu d #eval_var	[08]
1ac8		slil d #eval_var	[02]
1ac9		jmpfar	d d
1aca		pop	b
1acb		pop	c
1acc		pop	d
1acd		sliu c 15
1ace		slil c 15
1acf		load	c [c]
1ad0	#eval_numorvar_end
1ad0		sliu d 15
1ad1		slil d 15
1ad2		store	c [d]
1ad3		pop	d
1ad4		pop	c
1ad5		jmpfar	d d	
	; eval_numorvar ends
	
	

1ad6		org 1b00	
	; ------- GLOBAL FUNCTION print_integer -------

1b00	#print_integer
1b00		pop	c
1b01		push	d		; prints integer in A

1b02		sliu c 0
1b03		slil c 0
1b04		push	a
1b05		sliu b 6
1b06		slil b 4	; calling global function div

1b07		push	d
1b08		push	c
1b09		push	b
1b0a		sliu d 1
1b0b		slil d 11
1b0c		push	d
1b0d		push	c
1b0e		sliu c 0
1b0f		slil c 7
1b10		sliu d #div	[00]
1b11		slil d #div	[00]
1b12		jmpfar	d d
1b13		pop	b
1b14		pop	c
1b15		pop	d
1b16		push	a
1b17		sliu d 0
1b18		slil d 0
1b19		sub	a d
1b1a		sliu d #@print_integer0	[02]
1b1b		slil d #@print_integer0	[02]
1b1c		skipz	a
1b1d		jalr	d d
1b1e		pop	a
1b1f		sliu d #print_value_tens	[02]
1b20		slil d #print_value_tens	[09]
1b21		jalr	d d
1b22	#@print_integer0
1b22		pop	a
1b23		sliu b 3
1b24		slil b 0
1b25		add	a b
1b26		out	a
1b27		sliu c 0
1b28		slil c 1
1b29	#print_value_tens
1b29		pop	a
1b2a		push	a
1b2b		sliu b 0
1b2c		slil b 10	; calling global function div

1b2d		push	d
1b2e		push	c
1b2f		push	b
1b30		sliu d 1
1b31		slil d 11
1b32		push	d
1b33		push	c
1b34		sliu c 0
1b35		slil c 7
1b36		sliu d #div	[00]
1b37		slil d #div	[00]
1b38		jmpfar	d d
1b39		pop	b
1b3a		pop	c
1b3b		pop	d	; calling global function mod

1b3c		push	d
1b3d		push	c
1b3e		push	b
1b3f		sliu d 1
1b40		slil d 11
1b41		push	d
1b42		push	c
1b43		sliu c 0
1b44		slil c 7
1b45		sliu d #mod	[08]
1b46		slil d #mod	[05]
1b47		jmpfar	d d
1b48		pop	b
1b49		pop	c
1b4a		pop	d
1b4b		push	c
1b4c		sliu d 0
1b4d		slil d 1
1b4e		sub	c d
1b4f		sliu d #@print_integer1	[05]
1b50		slil d #@print_integer1	[07]
1b51		skipz	c
1b52		jalr	d d
1b53		pop	c
1b54		sliu d #print_value_tens_doprint	[06]
1b55		slil d #print_value_tens_doprint	[05]
1b56		jalr	d d
1b57	#@print_integer1
1b57		pop	c
1b58		push	a
1b59		sliu d 0
1b5a		slil d 0
1b5b		sub	a d
1b5c		sliu d #@print_integer2	[06]
1b5d		slil d #@print_integer2	[04]
1b5e		skipz	a
1b5f		jalr	d d
1b60		pop	a
1b61		sliu d #print_value_ones	[06]
1b62		slil d #print_value_ones	[09]
1b63		jalr	d d
1b64	#@print_integer2
1b64		pop	a
1b65	#print_value_tens_doprint
1b65		sliu b 3
1b66		slil b 0
1b67		add	a b
1b68		out	a
1b69	#print_value_ones
1b69		pop	a
1b6a		sliu b 0
1b6b		slil b 10	; calling global function mod

1b6c		push	d
1b6d		push	c
1b6e		push	b
1b6f		sliu d 1
1b70		slil d 11
1b71		push	d
1b72		push	c
1b73		sliu c 0
1b74		slil c 7
1b75		sliu d #mod	[08]
1b76		slil d #mod	[05]
1b77		jmpfar	d d
1b78		pop	b
1b79		pop	c
1b7a		pop	d
1b7b		sliu b 3
1b7c		slil b 0
1b7d		add	a b
1b7e		out	a
1b7f		pop	d
1b80		pop	c
1b81		jmpfar	d d	
	; print_integer ends
	
	
	
	; ------- GLOBAL FUNCTION eval_var -------

1b82	#eval_var
1b82		pop	c
1b83		push	d		;look up the variable

1b84		sub	b b
1b85		add	b c	; calling global function getvar

1b86		push	d
1b87		push	c
1b88		push	b
1b89		sliu d 1
1b8a		slil d 11
1b8b		push	d
1b8c		push	c
1b8d		sliu c 1
1b8e		slil c 13
1b8f		sliu d #getvar	[05]
1b90		slil d #getvar	[0f]
1b91		jmpfar	d d
1b92		pop	b
1b93		pop	c
1b94		pop	d
1b95		push	a		; advance to whitespace

1b96	#eval_var_loop
1b96		inc	c
1b97		load	a [c]
1b98		push	a
1b99		sliu d 2
1b9a		slil d 0
1b9b		sub	a d
1b9c		sliu d #@eval_var0	[0a]
1b9d		slil d #@eval_var0	[04]
1b9e		skipz	a
1b9f		jalr	d d
1ba0		pop	a
1ba1		sliu d #eval_var_loop_incdone	[0b]
1ba2		slil d #eval_var_loop_incdone	[05]
1ba3		jalr	d d
1ba4	#@eval_var0
1ba4		pop	a
1ba5		push	a
1ba6		sliu d 0
1ba7		slil d 0
1ba8		sub	a d
1ba9		sliu d #@eval_var1	[0b]
1baa		slil d #@eval_var1	[01]
1bab		skipz	a
1bac		jalr	d d
1bad		pop	a
1bae		sliu d #eval_var_loop_done	[0b]
1baf		slil d #eval_var_loop_done	[06]
1bb0		jalr	d d
1bb1	#@eval_var1
1bb1		pop	a
1bb2		sliu d #eval_var_loop	[09]
1bb3		slil d #eval_var_loop	[06]
1bb4		jalr	d d
1bb5	#eval_var_loop_incdone
1bb5		inc	c
1bb6	#eval_var_loop_done
1bb6		sliu d 15
1bb7		slil d 15
1bb8		store	c [d]
1bb9		pop	a
1bba		pop	d
1bbb		pop	c
1bbc		jmpfar	d d	
	; eval_var ends
	
	
	

1bbd		org 1c00	
	; ------- GLOBAL FUNCTION mark_error -------

1c00	#mark_error
1c00		pop	c
1c01		push	d		; function is called if a syntax error was detected

1c02		sliu b 2
1c03		slil b 1
1c04		out	b
1c05		sliu d 13
1c06		slil d 1
1c07		page	d
1c08		sliu d 0
1c09		slil d 1
1c0a		store	a [d]
1c0b		sliu d 15
1c0c		slil d 13
1c0d		page	d
1c0e		pop	d
1c0f		pop	c
1c10		jmpfar	d d	
	; mark_error ends
	
	
	; ------- GLOBAL FUNCTION error_marked -------

1c11	#error_marked
1c11		pop	c
1c12		push	d		; function returna A!=0 if an error was previously detected

1c13		sliu d 13
1c14		slil d 1
1c15		page	d
1c16		sliu d 0
1c17		slil d 1
1c18		load	a [d]
1c19		sliu d 15
1c1a		slil d 13
1c1b		page	d	;	li	a,0

1c1c		pop	d
1c1d		pop	c
1c1e		jmpfar	d d	
	; error_marked ends
	
	
	; ------- GLOBAL FUNCTION clear_error -------

1c1f	#clear_error
1c1f		pop	c
1c20		push	d		; function clears error codes

1c21		sliu d 13
1c22		slil d 1
1c23		page	d
1c24		sliu d 0
1c25		slil d 1
1c26		sub	c c
1c27		store	c [d]
1c28		sliu d 15
1c29		slil d 13
1c2a		page	d
1c2b		pop	d
1c2c		pop	c
1c2d		jmpfar	d d	
	; clear_error ends
	
	
	; ------- GLOBAL FUNCTION printerror -------

1c2e	#printerror
1c2e		pop	c
1c2f		push	d
1c30		sliu d 13
1c31		slil d 1
1c32		page	d
1c33		sliu d 0
1c34		slil d 1
1c35		load	c [d]
1c36		push	c
1c37		sliu d 0
1c38		slil d 1
1c39		sub	c d
1c3a		sliu d #@printerror0	[04]
1c3b		slil d #@printerror0	[02]
1c3c		skipz	c
1c3d		jalr	d d
1c3e		pop	c
1c3f		sliu d #printerror_syntax	[07]
1c40		slil d #printerror_syntax	[0a]
1c41		jalr	d d
1c42	#@printerror0
1c42		pop	c
1c43		push	c
1c44		sliu d 0
1c45		slil d 2
1c46		sub	c d
1c47		sliu d #@printerror1	[04]
1c48		slil d #@printerror1	[0f]
1c49		skipz	c
1c4a		jalr	d d
1c4b		pop	c
1c4c		sliu d #printerror_undefinedvar	[09]
1c4d		slil d #printerror_undefinedvar	[00]
1c4e		jalr	d d
1c4f	#@printerror1
1c4f		pop	c
1c50		push	c
1c51		sliu d 0
1c52		slil d 3
1c53		sub	c d
1c54		sliu d #@printerror2	[05]
1c55		slil d #@printerror2	[0c]
1c56		skipz	c
1c57		jalr	d d
1c58		pop	c
1c59		sliu d #printerror_undefinedcommand	[0a]
1c5a		slil d #printerror_undefinedcommand	[06]
1c5b		jalr	d d
1c5c	#@printerror2
1c5c		pop	c
1c5d		push	c
1c5e		sliu d 0
1c5f		slil d 5
1c60		sub	c d
1c61		sliu d #@printerror3	[06]
1c62		slil d #@printerror3	[09]
1c63		skipz	c
1c64		jalr	d d
1c65		pop	c
1c66		sliu d #printerror_return	[0b]
1c67		slil d #printerror_return	[0c]
1c68		jalr	d d
1c69	#@printerror3
1c69		pop	c
1c6a		push	c
1c6b		sliu d 0
1c6c		slil d 6
1c6d		sub	c d
1c6e		sliu d #@printerror4	[07]
1c6f		slil d #@printerror4	[06]
1c70		skipz	c
1c71		jalr	d d
1c72		pop	c
1c73		sliu d #printerror_gosub	[0d]
1c74		slil d #printerror_gosub	[02]
1c75		jalr	d d
1c76	#@printerror4
1c76		pop	c
1c77		sliu d #printerror_done	[0e]
1c78		slil d #printerror_done	[08]
1c79		jalr	d d
1c7a	#printerror_syntax
1c7a		sliu a 7
1c7b		slil a 15
1c7c		sliu b #syntax_error	[03]
1c7d		slil b #syntax_error	[01]	; calling global function printstring

1c7e		push	d
1c7f		push	c
1c80		push	b
1c81		sliu d 1
1c82		slil d 12
1c83		push	d
1c84		push	c
1c85		sliu c 0
1c86		slil c 5
1c87		sliu d #printstring	[00]
1c88		slil d #printstring	[00]
1c89		jmpfar	d d
1c8a		pop	b
1c8b		pop	c
1c8c		pop	d
1c8d		sliu d #printerror_done	[0e]
1c8e		slil d #printerror_done	[08]
1c8f		jalr	d d
1c90	#printerror_undefinedvar
1c90		sliu a 7
1c91		slil a 15
1c92		sliu b #undefinedvar_error	[03]
1c93		slil b #undefinedvar_error	[0e]	; calling global function printstring

1c94		push	d
1c95		push	c
1c96		push	b
1c97		sliu d 1
1c98		slil d 12
1c99		push	d
1c9a		push	c
1c9b		sliu c 0
1c9c		slil c 5
1c9d		sliu d #printstring	[00]
1c9e		slil d #printstring	[00]
1c9f		jmpfar	d d
1ca0		pop	b
1ca1		pop	c
1ca2		pop	d
1ca3		sliu d #printerror_done	[0e]
1ca4		slil d #printerror_done	[08]
1ca5		jalr	d d
1ca6	#printerror_undefinedcommand
1ca6		sliu a 7
1ca7		slil a 15
1ca8		sliu b #undefinedcommand_error	[05]
1ca9		slil b #undefinedcommand_error	[01]	; calling global function printstring

1caa		push	d
1cab		push	c
1cac		push	b
1cad		sliu d 1
1cae		slil d 12
1caf		push	d
1cb0		push	c
1cb1		sliu c 0
1cb2		slil c 5
1cb3		sliu d #printstring	[00]
1cb4		slil d #printstring	[00]
1cb5		jmpfar	d d
1cb6		pop	b
1cb7		pop	c
1cb8		pop	d
1cb9		sliu d #printerror_done	[0e]
1cba		slil d #printerror_done	[08]
1cbb		jalr	d d
1cbc	#printerror_return
1cbc		sliu a 7
1cbd		slil a 15
1cbe		sliu b #return_error	[06]
1cbf		slil b #return_error	[01]	; calling global function printstring

1cc0		push	d
1cc1		push	c
1cc2		push	b
1cc3		sliu d 1
1cc4		slil d 12
1cc5		push	d
1cc6		push	c
1cc7		sliu c 0
1cc8		slil c 5
1cc9		sliu d #printstring	[00]
1cca		slil d #printstring	[00]
1ccb		jmpfar	d d
1ccc		pop	b
1ccd		pop	c
1cce		pop	d
1ccf		sliu d #printerror_done	[0e]
1cd0		slil d #printerror_done	[08]
1cd1		jalr	d d
1cd2	#printerror_gosub
1cd2		sliu a 7
1cd3		slil a 15
1cd4		sliu b #gosub_error	[07]
1cd5		slil b #gosub_error	[01]	; calling global function printstring

1cd6		push	d
1cd7		push	c
1cd8		push	b
1cd9		sliu d 1
1cda		slil d 12
1cdb		push	d
1cdc		push	c
1cdd		sliu c 0
1cde		slil c 5
1cdf		sliu d #printstring	[00]
1ce0		slil d #printstring	[00]
1ce1		jmpfar	d d
1ce2		pop	b
1ce3		pop	c
1ce4		pop	d
1ce5		sliu d #printerror_done	[0e]
1ce6		slil d #printerror_done	[08]
1ce7		jalr	d d
1ce8	#printerror_done
1ce8		pop	d
1ce9		pop	c
1cea		jmpfar	d d	
	; printerror ends
	
	

1ceb		org 1d00	
	; variable storage at page d0
	;	d000 holds addr of next empty var entry
	
	
	; ------- GLOBAL FUNCTION initvar -------

1d00	#initvar
1d00		pop	c
1d01		push	d
1d02		sliu d 13
1d03		slil d 0
1d04		page	d
1d05		sub	d d
1d06		sliu c 0
1d07		slil c 1
1d08		store	c [d]
1d09		store	d [c]
1d0a		pop	d
1d0b		pop	c
1d0c		jmpfar	d d	
	; initvar ends
	
	
	
	; ------- GLOBAL FUNCTION setvar -------

1d0d	#setvar
1d0d		pop	c
1d0e		push	d		; input: fd:B points to variable name, A holds value
		; if variable doesn't exist, make it

1d0f		push	a	

1d10		sub	c c
1d11		add	c a	; calling global function lookupvar

1d12		push	d
1d13		push	c
1d14		push	b
1d15		sliu d 1
1d16		slil d 13
1d17		push	d
1d18		push	c
1d19		sliu c 1
1d1a		slil c 13
1d1b		sliu d #lookupvar	[09]
1d1c		slil d #lookupvar	[02]
1d1d		jmpfar	d d
1d1e		pop	b
1d1f		pop	c
1d20		pop	d
1d21		push	a
1d22		sliu d 0
1d23		slil d 0
1d24		sub	a d
1d25		sliu d #@setvar0	[02]
1d26		slil d #@setvar0	[0d]
1d27		skipnz	a
1d28		jalr	d d
1d29		pop	a
1d2a		sliu d #setvar_set	[05]
1d2b		slil d #setvar_set	[04]
1d2c		jalr	d d
1d2d	#@setvar0
1d2d		pop	a
1d2e		push	c		; find place for new var

1d2f		sliu d 13
1d30		slil d 0
1d31		page	d
1d32		sub	d d
1d33		load	c [d]		; advance past #

1d34		inc	b		; copy var name

1d35	#setvar_copyname
1d35		sliu d 15
1d36		slil d 13
1d37		page	d
1d38		load	a [b]
1d39		sliu d 13
1d3a		slil d 0
1d3b		page	d
1d3c		store	a [c]
1d3d		inc	b
1d3e		inc	c
1d3f		push	a
1d40		sliu d 2
1d41		slil d 0
1d42		sub	a d
1d43		sliu d #@setvar1	[04]
1d44		slil d #@setvar1	[0b]
1d45		skipnz	a
1d46		jalr	d d
1d47		pop	a
1d48		sliu d #setvar_copyname	[03]
1d49		slil d #setvar_copyname	[05]
1d4a		jalr	d d
1d4b	#@setvar1
1d4b		pop	a		; set the value

1d4c		pop	a
1d4d		store	a [c]
1d4e		inc	c		; update the lastvar pointer

1d4f		sub	d d
1d50		store	c [d]
1d51		sliu d #setvar_done	[05]
1d52		slil d #setvar_done	[08]
1d53		jalr	d d
1d54	#setvar_set
1d54		sliu d 13
1d55		slil d 0
1d56		page	d
1d57		store	c [a]
1d58	#setvar_done
1d58		sliu d 15
1d59		slil d 13
1d5a		page	d
1d5b		pop	a
1d5c		pop	d
1d5d		pop	c
1d5e		jmpfar	d d	
	; setvar ends
	
	
	
	; ------- GLOBAL FUNCTION getvar -------

1d5f	#getvar
1d5f		pop	c
1d60		push	d		; input: fd:B points to variable name
		; A returns value of variable.  error raised if no var
	; calling global function lookupvar

1d61		push	d
1d62		push	c
1d63		push	b
1d64		sliu d 1
1d65		slil d 13
1d66		push	d
1d67		push	c
1d68		sliu c 1
1d69		slil c 13
1d6a		sliu d #lookupvar	[09]
1d6b		slil d #lookupvar	[02]
1d6c		jmpfar	d d
1d6d		pop	b
1d6e		pop	c
1d6f		pop	d	;	.if a == 0 then getvar_error

1d70		sliu d #getvar_error	[07]
1d71		slil d #getvar_error	[0b]
1d72		skipnz	a
1d73		jalr	d d
1d74		sliu d 13
1d75		slil d 0
1d76		page	d
1d77		load	a [a]
1d78		sliu d #getvar_done	[08]
1d79		slil d #getvar_done	[0c]
1d7a		jalr	d d	

1d7b	#getvar_error
1d7b		sliu a 0
1d7c		slil a 2	; calling global function mark_error

1d7d		push	d
1d7e		push	c
1d7f		push	b
1d80		sliu d 1
1d81		slil d 13
1d82		push	d
1d83		push	c
1d84		sliu c 1
1d85		slil c 12
1d86		sliu d #mark_error	[00]
1d87		slil d #mark_error	[00]
1d88		jmpfar	d d
1d89		pop	b
1d8a		pop	c
1d8b		pop	d
1d8c	#getvar_done
1d8c		sliu d 15
1d8d		slil d 13
1d8e		page	d
1d8f		pop	d
1d90		pop	c
1d91		jmpfar	d d	
	; getvar ends
	
	
	
	; ------- GLOBAL FUNCTION lookupvar -------

1d92	#lookupvar
1d92		pop	c
1d93		push	d		; input: fd:B points to variable name
		; A returns address of match, or 0 no match
	
		; move past #

1d94		inc	b		; push var name start

1d95		push	b		
		;first variable here

1d96		sliu c 0
1d97		slil c 1	

1d98	#lookup_var_loop		; check if any more variables

1d98		sliu d 13
1d99		slil d 0
1d9a		page	d
1d9b		sliu d 0
1d9c		slil d 0
1d9d		load	d [d]
1d9e		push	c
1d9f		sub	c d
1da0		sliu d #@lookupvar0	[0a]
1da1		slil d #@lookupvar0	[08]
1da2		skipge	c
1da3		jalr	d d
1da4		pop	c
1da5		sliu d #lookup_var_nomatches	[0f]
1da6		slil d #lookup_var_nomatches	[01]
1da7		jalr	d d
1da8	#@lookupvar0
1da8		pop	c	
		; reset test name

1da9		pop	b
1daa		push	b
1dab	#lookup_var_charloop		;get char from test

1dab		sliu d 15
1dac		slil d 13
1dad		page	d
1dae		load	a [b]		;get char from varlist

1daf		push	b
1db0		sliu d 13
1db1		slil d 0
1db2		page	d
1db3		load	b [c]
1db4		push	a
1db5		sub	a b
1db6		sliu d #@lookupvar1	[0b]
1db7		slil d #@lookupvar1	[0e]
1db8		skipnz	a
1db9		jalr	d d
1dba		pop	a
1dbb		sliu d #lookup_var_nomatch	[0d]
1dbc		slil d #lookup_var_nomatch	[09]
1dbd		jalr	d d
1dbe	#@lookupvar1
1dbe		pop	a
1dbf		push	a
1dc0		sliu d 2
1dc1		slil d 0
1dc2		sub	a d
1dc3		sliu d #@lookupvar2	[0c]
1dc4		slil d #@lookupvar2	[0b]
1dc5		skipz	a
1dc6		jalr	d d
1dc7		pop	a
1dc8		sliu d #lookup_var_yesmatch	[0d]
1dc9		slil d #lookup_var_yesmatch	[02]
1dca		jalr	d d
1dcb	#@lookupvar2
1dcb		pop	a
1dcc		pop	b
1dcd		inc	b
1dce		inc	c
1dcf		sliu d #lookup_var_charloop	[0a]
1dd0		slil d #lookup_var_charloop	[0b]
1dd1		jalr	d d
1dd2	#lookup_var_yesmatch
1dd2		pop	b		; move pointer to value

1dd3		inc	c
1dd4		sub	a a
1dd5		add	a c
1dd6		sliu d #lookup_var_done	[0f]
1dd7		slil d #lookup_var_done	[02]
1dd8		jalr	d d
1dd9	#lookup_var_nomatch
1dd9		pop	b		;advance to next variable

1dda	#lookup_var_advanceloop
1dda		load	a [c]
1ddb		push	a
1ddc		sliu d 2
1ddd		slil d 0
1dde		sub	a d
1ddf		sliu d #@lookupvar3	[0e]
1de0		slil d #@lookupvar3	[07]
1de1		skipz	a
1de2		jalr	d d
1de3		pop	a
1de4		sliu d #lookup_var_advanceend	[0e]
1de5		slil d #lookup_var_advanceend	[0c]
1de6		jalr	d d
1de7	#@lookupvar3
1de7		pop	a
1de8		inc	c
1de9		sliu d #lookup_var_advanceloop	[0d]
1dea		slil d #lookup_var_advanceloop	[0a]
1deb		jalr	d d
1dec	#lookup_var_advanceend		; move to next var

1dec		inc	c
1ded		inc	c
1dee		sliu d #lookup_var_loop	[09]
1def		slil d #lookup_var_loop	[08]
1df0		jalr	d d	

1df1	#lookup_var_nomatches
1df1		sub	a a
1df2	#lookup_var_done
1df2		pop	b
1df3		sliu d 15
1df4		slil d 13
1df5		page	d
1df6		pop	d
1df7		pop	c
1df8		jmpfar	d d	
	; lookupvar ends
	
	

1df9		org 1e00	
	; ------- GLOBAL FUNCTION doLET -------

1e00	#doLET
1e00		pop	c
1e01		push	d		; starting point is either 0x80 or 0x82, depending on whether keyword LET is present

1e02		sliu c 8
1e03		slil c 0
1e04		load	a [c]
1e05		push	a
1e06		sliu d 2
1e07		slil d 3
1e08		sub	a d
1e09		sliu d #@doLET0	[01]
1e0a		slil d #@doLET0	[01]
1e0b		skipz	a
1e0c		jalr	d d
1e0d		pop	a
1e0e		sliu d #doletadvance	[02]
1e0f		slil d #doletadvance	[02]
1e10		jalr	d d
1e11	#@doLET0
1e11		pop	a	
		; first thing should be a var name

1e12		sliu c 8
1e13		slil c 2
1e14		load	a [c]
1e15		push	a
1e16		sliu d 2
1e17		slil d 3
1e18		sub	a d
1e19		sliu d #@doLET1	[02]
1e1a		slil d #@doLET1	[01]
1e1b		skipnz	a
1e1c		jalr	d d
1e1d		pop	a
1e1e		sliu d #dolet_error	[0a]
1e1f		slil d #dolet_error	[05]
1e20		jalr	d d
1e21	#@doLET1
1e21		pop	a		
		; advance past the variable name to the ' '

1e22	#doletadvance
1e22		inc	c
1e23		load	a [c]
1e24		push	a
1e25		sliu d 0
1e26		slil d 0
1e27		sub	a d
1e28		sliu d #@doLET2	[03]
1e29		slil d #@doLET2	[00]
1e2a		skipz	a
1e2b		jalr	d d
1e2c		pop	a
1e2d		sliu d #dolet_error	[0a]
1e2e		slil d #dolet_error	[05]
1e2f		jalr	d d
1e30	#@doLET2
1e30		pop	a
1e31		push	a
1e32		sliu d 2
1e33		slil d 0
1e34		sub	a d
1e35		sliu d #@doLET3	[03]
1e36		slil d #@doLET3	[0d]
1e37		skipnz	a
1e38		jalr	d d
1e39		pop	a
1e3a		sliu d #doletadvance	[02]
1e3b		slil d #doletadvance	[02]
1e3c		jalr	d d
1e3d	#@doLET3
1e3d		pop	a	
		; next should be an =

1e3e		inc	c
1e3f		load	a [c]
1e40		push	a
1e41		sliu d 3
1e42		slil d 13
1e43		sub	a d
1e44		sliu d #@doLET4	[04]
1e45		slil d #@doLET4	[0c]
1e46		skipnz	a
1e47		jalr	d d
1e48		pop	a
1e49		sliu d #dolet_error	[0a]
1e4a		slil d #dolet_error	[05]
1e4b		jalr	d d
1e4c	#@doLET4
1e4c		pop	a	
		; advance to expression

1e4d		inc	c
1e4e		load	a [c]
1e4f		push	a
1e50		sliu d 0
1e51		slil d 0
1e52		sub	a d
1e53		sliu d #@doLET5	[05]
1e54		slil d #@doLET5	[0b]
1e55		skipz	a
1e56		jalr	d d
1e57		pop	a
1e58		sliu d #dolet_error	[0a]
1e59		slil d #dolet_error	[05]
1e5a		jalr	d d
1e5b	#@doLET5
1e5b		pop	a
1e5c		inc	c	
	; calling global function eval_expression

1e5d		push	d
1e5e		push	c
1e5f		push	b
1e60		sliu d 1
1e61		slil d 14
1e62		push	d
1e63		push	c
1e64		sliu c 1
1e65		slil c 7
1e66		sliu d #eval_expression	[00]
1e67		slil d #eval_expression	[00]
1e68		jmpfar	d d
1e69		pop	b
1e6a		pop	c
1e6b		pop	d		; stop if an error

1e6c		push	a	; calling global function error_marked

1e6d		push	d
1e6e		push	c
1e6f		push	b
1e70		sliu d 1
1e71		slil d 14
1e72		push	d
1e73		push	c
1e74		sliu c 1
1e75		slil c 12
1e76		sliu d #error_marked	[01]
1e77		slil d #error_marked	[01]
1e78		jmpfar	d d
1e79		pop	b
1e7a		pop	c
1e7b		pop	d
1e7c		sliu d #dolet_done	[0b]
1e7d		slil d #dolet_done	[06]
1e7e		skipz	a
1e7f		jalr	d d
1e80		pop	a	
		; assign the variable

1e81		sliu b 8
1e82		slil b 0
1e83		load	c [b]
1e84		push	c
1e85		sliu d 4
1e86		slil d 12
1e87		sub	c d
1e88		sliu d #@doLET6	[09]
1e89		slil d #@doLET6	[00]
1e8a		skipnz	c
1e8b		jalr	d d
1e8c		pop	c
1e8d		sliu d #dolet_letpresent	[09]
1e8e		slil d #dolet_letpresent	[03]
1e8f		jalr	d d
1e90	#@doLET6
1e90		pop	c
1e91		inc	b
1e92		inc	b
1e93	#dolet_letpresent	; calling global function setvar

1e93		push	d
1e94		push	c
1e95		push	b
1e96		sliu d 1
1e97		slil d 14
1e98		push	d
1e99		push	c
1e9a		sliu c 1
1e9b		slil c 13
1e9c		sliu d #setvar	[00]
1e9d		slil d #setvar	[0d]
1e9e		jmpfar	d d
1e9f		pop	b
1ea0		pop	c
1ea1		pop	d
1ea2		sliu d #dolet_done	[0b]
1ea3		slil d #dolet_done	[06]
1ea4		jalr	d d		

1ea5	#dolet_error
1ea5		sliu a 0
1ea6		slil a 1	; calling global function mark_error

1ea7		push	d
1ea8		push	c
1ea9		push	b
1eaa		sliu d 1
1eab		slil d 14
1eac		push	d
1ead		push	c
1eae		sliu c 1
1eaf		slil c 12
1eb0		sliu d #mark_error	[00]
1eb1		slil d #mark_error	[00]
1eb2		jmpfar	d d
1eb3		pop	b
1eb4		pop	c
1eb5		pop	d
1eb6	#dolet_done
1eb6		pop	d
1eb7		pop	c
1eb8		jmpfar	d d	
	; doLET ends
	
	
	
	; ------- GLOBAL FUNCTION doLIST -------

1eb9	#doLIST
1eb9		pop	c
1eba		push	d
1ebb		sliu c 9
1ebc		slil c 0
1ebd		sliu b 0
1ebe		slil b 0
1ebf	#doLIST_loop
1ebf		page	c
1ec0		load	a [b]
1ec1		sliu d #doLIST_skipline	[0d]
1ec2		slil d #doLIST_skipline	[0c]
1ec3		skipnz	a
1ec4		jalr	d d
1ec5		sliu a 0
1ec6		slil a 13
1ec7		out	a
1ec8		sliu a 2
1ec9		slil a 0
1eca		out	a
1ecb		sub	a a
1ecc		add	a c	; calling global function printstring

1ecd		push	d
1ece		push	c
1ecf		push	b
1ed0		sliu d 1
1ed1		slil d 14
1ed2		push	d
1ed3		push	c
1ed4		sliu c 0
1ed5		slil c 5
1ed6		sliu d #printstring	[00]
1ed7		slil d #printstring	[00]
1ed8		jmpfar	d d
1ed9		pop	b
1eda		pop	c
1edb		pop	d
1edc	#doLIST_skipline
1edc		sliu d 2
1edd		slil d 0
1ede		add	b d
1edf		sliu d #doLIST_loop	[0b]
1ee0		slil d #doLIST_loop	[0f]
1ee1		skipz	b
1ee2		jalr	d d
1ee3		inc	c
1ee4		push	c
1ee5		sliu d 11
1ee6		slil d 0
1ee7		sub	c d
1ee8		sliu d #@doLIST0	[0f]
1ee9		slil d #@doLIST0	[00]
1eea		skipnz	c
1eeb		jalr	d d
1eec		pop	c
1eed		sliu d #doLIST_loop	[0b]
1eee		slil d #doLIST_loop	[0f]
1eef		jalr	d d
1ef0	#@doLIST0
1ef0		pop	c
1ef1		pop	d
1ef2		pop	c
1ef3		jmpfar	d d	
	; doLIST ends
	
	

1ef4		org 1f00	
	; ------- GLOBAL FUNCTION doCLS -------

1f00	#doCLS
1f00		pop	c
1f01		push	d
1f02		sliu d 0
1f03		slil d 1
1f04		out	d
1f05		sliu d 8
1f06		slil d 0
1f07		out	d
1f08		sliu c 15
1f09		slil c 15
1f0a	#docls_delay
1f0a		sliu d #docls_delay	[00]
1f0b		slil d #docls_delay	[0a]
1f0c		dec	c
1f0d		skipz	c
1f0e		jalr	d d
1f0f		sliu d 2
1f10		slil d 0
1f11		out	d
1f12		pop	d
1f13		pop	c
1f14		jmpfar	d d	
	; doCLS ends
	
	

1f15		org 2000	
	; ------- GLOBAL FUNCTION basic_initrun -------

2000	#basic_initrun
2000		pop	c
2001		push	d		; set current line number to 0, error code to 0

2002		sliu d 13
2003		slil d 1
2004		page	d
2005		sub	c c
2006		sub	d d
2007		store	d [c]
2008		inc	c
2009		store	d [c]		; set basic stack to empty

200a		sliu d 13
200b		slil d 2
200c		page	d
200d		sub	c c
200e		sliu d 0
200f		slil d 1
2010		store	d [c]	
		; goes from pages 0x90 to 0xcf and sets last byte of each inst to 0
			; this resets FOR loops

2011		sliu a 0
2012		slil a 0
2013		sliu c 9
2014		slil c 0
2015	#basic_initrun_pageloop
2015		page	c
2016		sliu b 0
2017		slil b 0
2018	#basic_initrun_addrloop
2018		sliu d 2
2019		slil d 0
201a		sub	b d
201b		dec	b
201c		store	a [b]
201d		inc	b
201e		sliu d #basic_initrun_addrloop	[01]
201f		slil d #basic_initrun_addrloop	[08]
2020		skipz	b
2021		jalr	d d
2022		inc	c
2023		push	c
2024		sliu d 13
2025		slil d 0
2026		sub	c d
2027		sliu d #@basic_initrun0	[02]
2028		slil d #@basic_initrun0	[0f]
2029		skipnz	c
202a		jalr	d d
202b		pop	c
202c		sliu d #basic_initrun_pageloop	[01]
202d		slil d #basic_initrun_pageloop	[05]
202e		jalr	d d
202f	#@basic_initrun0
202f		pop	c	

2030		pop	d
2031		pop	c
2032		jmpfar	d d	
	; basic_initrun ends
	
	
	
	; ------- GLOBAL FUNCTION basic_getrunline -------

2033	#basic_getrunline
2033		pop	c
2034		push	d		; sets the current line number to the next line of the program and copies the line to fd80
		; returns A = 1 if end of program
	
		; use current line number to determine page and address

2035		sliu d 13
2036		slil d 1
2037		page	d
2038		sub	d d
2039		load	a [d]		; line number on stack

203a		push	a		; divide it by eight to get the page number into c

203b		push	a
203c		sliu d 15
203d		slil d 8
203e		nand	a d
203f		nand	a a
2040		sliu b 0
2041		slil b 8	; calling global function div_even

2042		push	d
2043		push	c
2044		push	b
2045		sliu d 2
2046		slil d 0
2047		push	d
2048		push	c
2049		sliu c 0
204a		slil c 7
204b		sliu d #div_even	[06]
204c		slil d #div_even	[0a]
204d		jmpfar	d d
204e		pop	b
204f		pop	c
2050		pop	d
2051		sliu d 11
2052		slil d 0
2053		add	a d
2054		sub	c c
2055		add	c a	
		; last three bits * 32 is the address

2056		pop	a
2057		sliu d 0
2058		slil d 7
2059		nand	a d
205a		nand	a a
205b		sliu b 2
205c		slil b 0	; calling global function mul

205d		push	d
205e		push	c
205f		push	b
2060		sliu d 2
2061		slil d 0
2062		push	d
2063		push	c
2064		sliu c 0
2065		slil c 8
2066		sliu d #mul	[00]
2067		slil d #mul	[00]
2068		jmpfar	d d
2069		pop	b
206a		pop	c
206b		pop	d	
		; put page in b, addr in c

206c		sub	b b
206d		add	b c
206e		sub	c c
206f		add	c a	
		; find next valid program line

2070		page	b
2071	#basic_getrun_findlineloop
2071		load	a [c]		; if valid, run it

2072		push	a
2073		sliu d 0
2074		slil d 0
2075		sub	a d
2076		sliu d #@basic_getrunline0	[07]
2077		slil d #@basic_getrunline0	[0e]
2078		skipnz	a
2079		jalr	d d
207a		pop	a
207b		sliu d #basic_getrunline_copy	[09]
207c		slil d #basic_getrunline_copy	[0b]
207d		jalr	d d
207e	#@basic_getrunline0
207e		pop	a	
		; advance line

207f		sliu d 2
2080		slil d 0
2081		add	c d		; increment line number on stack

2082		pop	a
2083		inc	a
2084		push	a
2085		sliu d #basic_getrun_findlineloop	[07]
2086		slil d #basic_getrun_findlineloop	[01]
2087		skipz	c
2088		jalr	d d		; advance page

2089		inc	b
208a		page	b
208b		push	b
208c		sliu d 13
208d		slil d 0
208e		sub	b d
208f		sliu d #@basic_getrunline1	[09]
2090		slil d #@basic_getrunline1	[07]
2091		skipz	b
2092		jalr	d d
2093		pop	b
2094		sliu d #basic_getrun_stop	[0b]
2095		slil d #basic_getrun_stop	[0f]
2096		jalr	d d
2097	#@basic_getrunline1
2097		pop	b
2098		sliu d #basic_getrun_findlineloop	[07]
2099		slil d #basic_getrun_findlineloop	[01]
209a		jalr	d d	

209b	#basic_getrunline_copy		; copy line to fd80

209b		sub	b b
209c	#basic_getrunline_copyloop		; copy until 0

209c		load	a [c]
209d		push	a
209e		inc	c
209f		inc	b
20a0		sliu d #basic_getrunline_copyloop	[09]
20a1		slil d #basic_getrunline_copyloop	[0c]
20a2		skipz	a
20a3		jalr	d d	
		; set page to fd

20a4		sliu d 15
20a5		slil d 13
20a6		page	d
20a7		sliu d 8
20a8		slil d 0
20a9		add	b d
20aa		dec	b
20ab	#basic_getrunline_copyloop2		; pop until reach fd80

20ab		pop	a
20ac		store	a [b]
20ad		dec	b
20ae		push	b
20af		sliu d 7
20b0		slil d 15
20b1		sub	b d
20b2		sliu d #@basic_getrunline2	[0b]
20b3		slil d #@basic_getrunline2	[0a]
20b4		skipnz	b
20b5		jalr	d d
20b6		pop	b
20b7		sliu d #basic_getrunline_copyloop2	[0a]
20b8		slil d #basic_getrunline_copyloop2	[0b]
20b9		jalr	d d
20ba	#@basic_getrunline2
20ba		pop	b
20bb		sub	a a
20bc		sliu d #basic_getrun_done	[0c]
20bd		slil d #basic_getrun_done	[01]
20be		jalr	d d	

20bf	#basic_getrun_stop
20bf		sliu a 0
20c0		slil a 1
20c1	#basic_getrun_done		; update line number

20c1		sliu d 13
20c2		slil d 1
20c3		page	d
20c4		sub	d d
20c5		pop	b
20c6		store	b [d]
20c7		sliu d 15
20c8		slil d 13
20c9		page	d
20ca		pop	d
20cb		pop	c
20cc		jmpfar	d d	
	; basic_getrunline ends
	
	

20cd		org 2100	
	; ------- GLOBAL FUNCTION basic_run -------

2100	#basic_run
2100		pop	c
2101		push	d
2102	#basic_runloop		; get the next line into fd80
	; calling global function basic_getrunline

2102		push	d
2103		push	c
2104		push	b
2105		sliu d 2
2106		slil d 1
2107		push	d
2108		push	c
2109		sliu c 2
210a		slil c 0
210b		sliu d #basic_getrunline	[03]
210c		slil d #basic_getrunline	[03]
210d		jmpfar	d d
210e		pop	b
210f		pop	c
2110		pop	d	

2111		push	a
2112		sliu d 0
2113		slil d 1
2114		sub	a d
2115		sliu d #@basic_run0	[01]
2116		slil d #@basic_run0	[0d]
2117		skipz	a
2118		jalr	d d
2119		pop	a
211a		sliu d #basic_run_stop	[07]
211b		slil d #basic_run_stop	[0e]
211c		jalr	d d
211d	#@basic_run0
211d		pop	a	
		; if it's an END then stop

211e		sliu c 8
211f		slil c 0
2120		load	a [c]
2121		push	a
2122		sliu d 4
2123		slil d 5
2124		sub	a d
2125		sliu d #@basic_run1	[02]
2126		slil d #@basic_run1	[0d]
2127		skipz	a
2128		jalr	d d
2129		pop	a
212a		sliu d #basic_run_stop	[07]
212b		slil d #basic_run_stop	[0e]
212c		jalr	d d
212d	#@basic_run1
212d		pop	a	
		; do the line
	; calling global function basic_doline

212e		push	d
212f		push	c
2130		push	b
2131		sliu d 2
2132		slil d 1
2133		push	d
2134		push	c
2135		sliu c 2
2136		slil c 14
2137		sliu d #basic_doline	[00]
2138		slil d #basic_doline	[00]
2139		jmpfar	d d
213a		pop	b
213b		pop	c
213c		pop	d	
		; if there's an error then stop
	; calling global function error_marked

213d		push	d
213e		push	c
213f		push	b
2140		sliu d 2
2141		slil d 1
2142		push	d
2143		push	c
2144		sliu c 1
2145		slil c 12
2146		sliu d #error_marked	[01]
2147		slil d #error_marked	[01]
2148		jmpfar	d d
2149		pop	b
214a		pop	c
214b		pop	d
214c		push	a
214d		sliu d 0
214e		slil d 0
214f		sub	a d
2150		sliu d #@basic_run2	[05]
2151		slil d #@basic_run2	[08]
2152		skipnz	a
2153		jalr	d d
2154		pop	a
2155		sliu d #basic_run_stop	[07]
2156		slil d #basic_run_stop	[0e]
2157		jalr	d d
2158	#@basic_run2
2158		pop	a	
		; advance one line

2159		sliu d 13
215a		slil d 1
215b		page	d
215c		sub	d d
215d		load	c [d]
215e		inc	c
215f		store	c [d]	
		; if reached end of program space, stop

2160		push	c
2161		sliu d 0
2162		slil d 0
2163		sub	c d
2164		sliu d #@basic_run3	[06]
2165		slil d #@basic_run3	[0c]
2166		skipz	c
2167		jalr	d d
2168		pop	c
2169		sliu d #basic_run_stop	[07]
216a		slil d #basic_run_stop	[0e]
216b		jalr	d d
216c	#@basic_run3
216c		pop	c	
		; check for CTRL-C

216d		sub	a a	;	in	a

216e		push	a
216f		sliu d 0
2170		slil d 3
2171		sub	a d
2172		sliu d #@basic_run4	[07]
2173		slil d #@basic_run4	[0a]
2174		skipz	a
2175		jalr	d d
2176		pop	a
2177		sliu d #basic_run_stop	[07]
2178		slil d #basic_run_stop	[0e]
2179		jalr	d d
217a	#@basic_run4
217a		pop	a	

217b		sliu d #basic_runloop	[00]
217c		slil d #basic_runloop	[02]
217d		jalr	d d	

217e	#basic_run_stop	; calling global function clear_error

217e		push	d
217f		push	c
2180		push	b
2181		sliu d 2
2182		slil d 1
2183		push	d
2184		push	c
2185		sliu c 1
2186		slil c 12
2187		sliu d #clear_error	[01]
2188		slil d #clear_error	[0f]
2189		jmpfar	d d
218a		pop	b
218b		pop	c
218c		pop	d
218d		pop	d
218e		pop	c
218f		jmpfar	d d	
	; basic_run ends
	
	
	
	; ------- GLOBAL FUNCTION doRUN -------

2190	#doRUN
2190		pop	c
2191		push	d	; calling global function basic_initrun

2192		push	d
2193		push	c
2194		push	b
2195		sliu d 2
2196		slil d 1
2197		push	d
2198		push	c
2199		sliu c 2
219a		slil c 0
219b		sliu d #basic_initrun	[00]
219c		slil d #basic_initrun	[00]
219d		jmpfar	d d
219e		pop	b
219f		pop	c
21a0		pop	d	; calling global function basic_run

21a1		push	d
21a2		push	c
21a3		push	b
21a4		sliu d 2
21a5		slil d 1
21a6		push	d
21a7		push	c
21a8		sliu c 2
21a9		slil c 1
21aa		sliu d #basic_run	[00]
21ab		slil d #basic_run	[00]
21ac		jmpfar	d d
21ad		pop	b
21ae		pop	c
21af		pop	d
21b0		pop	d
21b1		pop	c
21b2		jmpfar	d d	
	; doRUN ends
	
	

21b3		org 2200	
	; ------- GLOBAL FUNCTION doGOTO -------

2200	#doGOTO
2200		pop	c
2201		push	d
2202		sliu c 8
2203		slil c 2	; calling global function eval_expression

2204		push	d
2205		push	c
2206		push	b
2207		sliu d 2
2208		slil d 2
2209		push	d
220a		push	c
220b		sliu c 1
220c		slil c 7
220d		sliu d #eval_expression	[00]
220e		slil d #eval_expression	[00]
220f		jmpfar	d d
2210		pop	b
2211		pop	c
2212		pop	d
2213		push	a	; calling global function error_marked

2214		push	d
2215		push	c
2216		push	b
2217		sliu d 2
2218		slil d 2
2219		push	d
221a		push	c
221b		sliu c 1
221c		slil c 12
221d		sliu d #error_marked	[01]
221e		slil d #error_marked	[01]
221f		jmpfar	d d
2220		pop	b
2221		pop	c
2222		pop	d
2223		push	a
2224		sliu d 0
2225		slil d 0
2226		sub	a d
2227		sliu d #@doGOTO0	[02]
2228		slil d #@doGOTO0	[0f]
2229		skipnz	a
222a		jalr	d d
222b		pop	a
222c		sliu d #dogoto_enderror	[03]
222d		slil d #dogoto_enderror	[0a]
222e		jalr	d d
222f	#@doGOTO0
222f		pop	a
2230		pop	a
2231		sliu d 13
2232		slil d 1
2233		page	d
2234		sub	d d		; RUN will increment this

2235		dec	a
2236		store	a [d]
2237		sliu d #dogoto_end	[03]
2238		slil d #dogoto_end	[0b]
2239		jalr	d d
223a	#dogoto_enderror
223a		pop	a
223b	#dogoto_end
223b		sliu d 15
223c		slil d 13
223d		page	d
223e		pop	d
223f		pop	c
2240		jmpfar	d d	
	; doGOTO ends
	
	
	
	; ------- GLOBAL FUNCTION doGOSUB -------

2241	#doGOSUB
2241		pop	c
2242		push	d
2243		sliu c 8
2244		slil c 2	; calling global function eval_expression

2245		push	d
2246		push	c
2247		push	b
2248		sliu d 2
2249		slil d 2
224a		push	d
224b		push	c
224c		sliu c 1
224d		slil c 7
224e		sliu d #eval_expression	[00]
224f		slil d #eval_expression	[00]
2250		jmpfar	d d
2251		pop	b
2252		pop	c
2253		pop	d
2254		push	a	; calling global function error_marked

2255		push	d
2256		push	c
2257		push	b
2258		sliu d 2
2259		slil d 2
225a		push	d
225b		push	c
225c		sliu c 1
225d		slil c 12
225e		sliu d #error_marked	[01]
225f		slil d #error_marked	[01]
2260		jmpfar	d d
2261		pop	b
2262		pop	c
2263		pop	d
2264		push	a
2265		sliu d 0
2266		slil d 0
2267		sub	a d
2268		sliu d #@doGOSUB0	[07]
2269		slil d #@doGOSUB0	[00]
226a		skipnz	a
226b		jalr	d d
226c		pop	a
226d		sliu d #dogosub_enderror	[09]
226e		slil d #dogosub_enderror	[02]
226f		jalr	d d
2270	#@doGOSUB0
2270		pop	a
2271		pop	a		; get the current line number into B

2272		sliu d 13
2273		slil d 1
2274		page	d
2275		sub	d d
2276		load	b [d]		; jump to the GOSUB target

2277		dec	a
2278		store	a [d]		; save the GOSUB address to basic stack

2279		sliu d 13
227a		slil d 2
227b		page	d
227c		sub	d d
227d		load	d [d]
227e		store	b [d]
227f		inc	d
2280		push	d
2281		sliu d 0
2282		slil d 0
2283		sub	d d
2284		sliu d #@doGOSUB1	[08]
2285		slil d #@doGOSUB1	[0c]
2286		skipz	d
2287		jalr	d d
2288		pop	d
2289		sliu d #dogosub_error	[09]
228a		slil d #dogosub_error	[06]
228b		jalr	d d
228c	#@doGOSUB1
228c		pop	d
228d		sub	c c
228e		store	d [c]
228f		sliu d #dogosub_end	[0a]
2290		slil d #dogosub_end	[07]
2291		jalr	d d
2292	#dogosub_enderror
2292		pop	a
2293		sliu d #dogosub_end	[0a]
2294		slil d #dogosub_end	[07]
2295		jalr	d d
2296	#dogosub_error
2296		sliu a 0
2297		slil a 6	; calling global function mark_error

2298		push	d
2299		push	c
229a		push	b
229b		sliu d 2
229c		slil d 2
229d		push	d
229e		push	c
229f		sliu c 1
22a0		slil c 12
22a1		sliu d #mark_error	[00]
22a2		slil d #mark_error	[00]
22a3		jmpfar	d d
22a4		pop	b
22a5		pop	c
22a6		pop	d
22a7	#dogosub_end
22a7		sliu d 15
22a8		slil d 13
22a9		page	d
22aa		pop	d
22ab		pop	c
22ac		jmpfar	d d	
	; doGOSUB ends
	
	
	
	; ------- GLOBAL FUNCTION doRETURN -------

22ad	#doRETURN
22ad		pop	c
22ae		push	d
22af		sliu d 13
22b0		slil d 2
22b1		page	d
22b2		sub	c c
22b3		load	b [c]
22b4		dec	b
22b5		push	b
22b6		sliu d 0
22b7		slil d 0
22b8		sub	b d
22b9		sliu d #@doRETURN0	[0c]
22ba		slil d #@doRETURN0	[01]
22bb		skipz	b
22bc		jalr	d d
22bd		pop	b
22be		sliu d #doreturn_error	[0c]
22bf		slil d #doreturn_error	[0c]
22c0		jalr	d d
22c1	#@doRETURN0
22c1		pop	b
22c2		load	a [b]
22c3		store	b [c]
22c4		sliu d 13
22c5		slil d 1
22c6		page	d
22c7		sub	d d
22c8		store	a [d]
22c9		sliu d #doreturn_end	[0d]
22ca		slil d #doreturn_end	[0d]
22cb		jalr	d d	

22cc	#doreturn_error
22cc		sliu a 0
22cd		slil a 5	; calling global function mark_error

22ce		push	d
22cf		push	c
22d0		push	b
22d1		sliu d 2
22d2		slil d 2
22d3		push	d
22d4		push	c
22d5		sliu c 1
22d6		slil c 12
22d7		sliu d #mark_error	[00]
22d8		slil d #mark_error	[00]
22d9		jmpfar	d d
22da		pop	b
22db		pop	c
22dc		pop	d
22dd	#doreturn_end
22dd		sliu d 15
22de		slil d 13
22df		page	d
22e0		pop	d
22e1		pop	c
22e2		jmpfar	d d	
	; doRETURN ends
	
	

22e3		org 2300	
	; ------- GLOBAL FUNCTION doIF -------

2300	#doIF
2300		pop	c
2301		push	d		; if takes form
		; IF expr comp expr THEN expr

2302		sliu c 8
2303		slil c 2	

2304		# get and push first value	; calling global function eval_expression

2304		push	d
2305		push	c
2306		push	b
2307		sliu d 2
2308		slil d 3
2309		push	d
230a		push	c
230b		sliu c 1
230c		slil c 7
230d		sliu d #eval_expression	[00]
230e		slil d #eval_expression	[00]
230f		jmpfar	d d
2310		pop	b
2311		pop	c
2312		pop	d
2313		push	a	; calling global function error_marked

2314		push	d
2315		push	c
2316		push	b
2317		sliu d 2
2318		slil d 3
2319		push	d
231a		push	c
231b		sliu c 1
231c		slil c 12
231d		sliu d #error_marked	[01]
231e		slil d #error_marked	[01]
231f		jmpfar	d d
2320		pop	b
2321		pop	c
2322		pop	d
2323		push	a
2324		sliu d 0
2325		slil d 0
2326		sub	a d
2327		sliu d #@doIF0	[02]
2328		slil d #@doIF0	[0f]
2329		skipnz	a
232a		jalr	d d
232b		pop	a
232c		sliu d #doif_else	[0d]
232d		slil d #doif_else	[02]
232e		jalr	d d
232f	#@doIF0
232f		pop	a
2330		pop	a
2331		push	a
2332		sliu d 15
2333		slil d 15
2334		load	c [d]	

2335		# get and push operator
2335		load	a [c]
2336		inc	c
2337		inc	c
2338		push	a	

2339		# get and push second value	; calling global function eval_expression

2339		push	d
233a		push	c
233b		push	b
233c		sliu d 2
233d		slil d 3
233e		push	d
233f		push	c
2340		sliu c 1
2341		slil c 7
2342		sliu d #eval_expression	[00]
2343		slil d #eval_expression	[00]
2344		jmpfar	d d
2345		pop	b
2346		pop	c
2347		pop	d
2348		push	a	; calling global function error_marked

2349		push	d
234a		push	c
234b		push	b
234c		sliu d 2
234d		slil d 3
234e		push	d
234f		push	c
2350		sliu c 1
2351		slil c 12
2352		sliu d #error_marked	[01]
2353		slil d #error_marked	[01]
2354		jmpfar	d d
2355		pop	b
2356		pop	c
2357		pop	d
2358		push	a
2359		sliu d 0
235a		slil d 0
235b		sub	a d
235c		sliu d #@doIF1	[06]
235d		slil d #@doIF1	[04]
235e		skipnz	a
235f		jalr	d d
2360		pop	a
2361		sliu d #doif_else	[0d]
2362		slil d #doif_else	[02]
2363		jalr	d d
2364	#@doIF1
2364		pop	a
2365		pop	a
2366		sliu d 15
2367		slil d 15
2368		load	c [d]
2369		sub	b b
236a		add	b a	

236b		# save token address
236b		sub	d d
236c		add	d c	

236d		# do the comparison
236d		pop	c
236e		pop	a	

236f		push	d	

2370		sliu d 3
2371		slil d 13
2372		sub	c d
2373		sliu d #doif_eq	[0a]
2374		slil d #doif_eq	[0d]
2375		skipnz	c
2376		jalr	d d
2377		sliu d 3
2378		slil d 13
2379		add	c d	

237a		sliu d 2
237b		slil d 1
237c		sub	c d
237d		sliu d #doif_ne	[0b]
237e		slil d #doif_ne	[05]
237f		skipnz	c
2380		jalr	d d
2381		sliu d 2
2382		slil d 1
2383		add	c d	

2384		sliu d 3
2385		slil d 12
2386		sub	c d
2387		sliu d #doif_lt	[0c]
2388		slil d #doif_lt	[05]
2389		skipnz	c
238a		jalr	d d
238b		sliu d 3
238c		slil d 12
238d		add	c d	

238e		sliu d 3
238f		slil d 14
2390		sub	c d
2391		sliu d #doif_gt	[0b]
2392		slil d #doif_gt	[0d]
2393		skipnz	c
2394		jalr	d d
2395		sliu d 3
2396		slil d 14
2397		add	c d	
	;	.if c == 0x3d then doif_eq
	;	.if c == 0x21 then doif_ne
	;	.if c == 0x3c then doif_lt
	;	.if c == 0x3e then doif_gt

2398		pop	c
2399		sliu a 0
239a		slil a 1	; calling global function mark_error

239b		push	d
239c		push	c
239d		push	b
239e		sliu d 2
239f		slil d 3
23a0		push	d
23a1		push	c
23a2		sliu c 1
23a3		slil c 12
23a4		sliu d #mark_error	[00]
23a5		slil d #mark_error	[00]
23a6		jmpfar	d d
23a7		pop	b
23a8		pop	c
23a9		pop	d
23aa		sliu d #doif_end	[0d]
23ab		slil d #doif_end	[03]
23ac		jalr	d d	

23ad	#doif_eq
23ad		sub	a b
23ae		sliu d #doif_thenlocal	[0c]
23af		slil d #doif_thenlocal	[0d]
23b0		skipnz	a
23b1		jalr	d d	;	.if a == b then doif_thenlocal

23b2		sliu d #doif_else	[0d]
23b3		slil d #doif_else	[02]
23b4		jalr	d d
23b5	#doif_ne
23b5		sub	a b
23b6		sliu d #doif_thenlocal	[0c]
23b7		slil d #doif_thenlocal	[0d]
23b8		skipz	a
23b9		jalr	d d	;	.if a != b then doif_thenlocal

23ba		sliu d #doif_else	[0d]
23bb		slil d #doif_else	[02]
23bc		jalr	d d
23bd	#doif_gt
23bd		sub	b a
23be		sliu d #doif_thenlocal	[0c]
23bf		slil d #doif_thenlocal	[0d]
23c0		skipge	b
23c1		jalr	d d	;	.if a > b then doif_thenlocal

23c2		sliu d #doif_else	[0d]
23c3		slil d #doif_else	[02]
23c4		jalr	d d
23c5	#doif_lt
23c5		sub	a b
23c6		sliu d #doif_thenlocal	[0c]
23c7		slil d #doif_thenlocal	[0d]
23c8		skipge	a
23c9		jalr	d d	;	.if a < b then doif_thenlocal

23ca		sliu d #doif_else	[0d]
23cb		slil d #doif_else	[02]
23cc		jalr	d d
23cd	#doif_thenlocal
23cd		sliu c 2
23ce		slil c 4
23cf		sliu d #doif_then	[00]
23d0		slil d #doif_then	[00]
23d1		jmpfar	d d
23d2	#doif_else
23d2		pop	c
23d3	#doif_end
23d3		pop	d
23d4		pop	c
23d5		jmpfar	d d	
	; doIF ends
	
	

23d6		org 2400
2400	#doif_then
2400		pop	c		; move past THEN

2401		load	a [c]
2402		push	a
2403		sliu d 5
2404		slil d 4
2405		sub	a d
2406		sliu d #@doIF2	[00]
2407		slil d #@doIF2	[0e]
2408		skipz	a
2409		jalr	d d
240a		pop	a
240b		sliu d #doif_then2	[02]
240c		slil d #doif_then2	[05]
240d		jalr	d d
240e	#@doIF2
240e		pop	a
240f		sliu a 0
2410		slil a 1	; calling global function mark_error

2411		push	d
2412		push	c
2413		push	b
2414		sliu d 2
2415		slil d 4
2416		push	d
2417		push	c
2418		sliu c 1
2419		slil c 12
241a		sliu d #mark_error	[00]
241b		slil d #mark_error	[00]
241c		jmpfar	d d
241d		pop	b
241e		pop	c
241f		pop	d
2420		sliu c 2
2421		slil c 3
2422		sliu d #doif_end	[0d]
2423		slil d #doif_end	[03]
2424		jmpfar	d d
2425	#doif_then2
2425		inc	c
2426		inc	c
2427		sub	a a
2428		add	a c	; calling global function docompound

2429		push	d
242a		push	c
242b		push	b
242c		sliu d 2
242d		slil d 4
242e		push	d
242f		push	c
2430		sliu c 2
2431		slil c 8
2432		sliu d #docompound	[00]
2433		slil d #docompound	[00]
2434		jmpfar	d d
2435		pop	b
2436		pop	c
2437		pop	d	;	# get goto address
	;	.call eval_expression
	;	push	a
	;	.call error_marked
	;	.if a != 0 then doif_endlocal
	;	pop	a
	
	;	#do the goto
	;	li	d,0xd1
	;	page	d
	;	sub	d,d
	;	dec	a
	;	store	a,[d]

2438		sliu d 15
2439		slil d 13
243a		page	d
243b		sliu c 2
243c		slil c 3
243d		sliu d #doif_end	[0d]
243e		slil d #doif_end	[03]
243f		jmpfar	d d	

2440	#doif_endlocal
2440		pop	a
2441		sliu c 2
2442		slil c 3
2443		sliu d #doif_end	[0d]
2444		slil d #doif_end	[03]
2445		jmpfar	d d
2446		pop	d
2447		pop	c
2448		jmpfar	d d	
	; doIF ends
	
	

2449		org 2500	
	; ------- GLOBAL FUNCTION doINPUT -------

2500	#doINPUT
2500		pop	c
2501		push	d		; check that there's a variable

2502		sliu b 8
2503		slil b 2
2504		load	a [b]
2505		push	a
2506		sliu d 2
2507		slil d 3
2508		sub	a d
2509		sliu d #@doINPUT0	[01]
250a		slil d #@doINPUT0	[01]
250b		skipnz	a
250c		jalr	d d
250d		pop	a
250e		sliu d #doinput_error	[06]
250f		slil d #doinput_error	[04]
2510		jalr	d d
2511	#@doINPUT0
2511		pop	a	

2512		sliu d 3
2513		slil d 15
2514		out	d	;	li	d,0x20
	;	out	d
	

2515		sliu a 15
2516		slil a 13
2517		sliu b 0
2518		slil b 0	; calling global function readstring

2519		push	d
251a		push	c
251b		push	b
251c		sliu d 2
251d		slil d 5
251e		push	d
251f		push	c
2520		sliu c 0
2521		slil c 6
2522		sliu d #readstring	[01]
2523		slil d #readstring	[03]
2524		jmpfar	d d
2525		pop	b
2526		pop	c
2527		pop	d	

2528		sliu a 15
2529		slil a 13
252a		sliu b 0
252b		slil b 0	; calling global function dectobin

252c		push	d
252d		push	c
252e		push	b
252f		sliu d 2
2530		slil d 5
2531		push	d
2532		push	c
2533		sliu c 1
2534		slil c 4
2535		sliu d #dectobin	[00]
2536		slil d #dectobin	[00]
2537		jmpfar	d d
2538		pop	b
2539		pop	c
253a		pop	d	

253b		sliu b 8
253c		slil b 2	; calling global function setvar

253d		push	d
253e		push	c
253f		push	b
2540		sliu d 2
2541		slil d 5
2542		push	d
2543		push	c
2544		sliu c 1
2545		slil c 13
2546		sliu d #setvar	[00]
2547		slil d #setvar	[0d]
2548		jmpfar	d d
2549		pop	b
254a		pop	c
254b		pop	d
254c		sliu d #doinput_end	[07]
254d		slil d #doinput_end	[05]
254e		jalr	d d	

254f	#doinput_enderror
254f		pop	a
2550		sliu a 0
2551		slil a 8	; calling global function mark_error

2552		push	d
2553		push	c
2554		push	b
2555		sliu d 2
2556		slil d 5
2557		push	d
2558		push	c
2559		sliu c 1
255a		slil c 12
255b		sliu d #mark_error	[00]
255c		slil d #mark_error	[00]
255d		jmpfar	d d
255e		pop	b
255f		pop	c
2560		pop	d
2561		sliu d #doinput_end	[07]
2562		slil d #doinput_end	[05]
2563		jalr	d d
2564	#doinput_error
2564		sliu a 0
2565		slil a 1	; calling global function mark_error

2566		push	d
2567		push	c
2568		push	b
2569		sliu d 2
256a		slil d 5
256b		push	d
256c		push	c
256d		sliu c 1
256e		slil c 12
256f		sliu d #mark_error	[00]
2570		slil d #mark_error	[00]
2571		jmpfar	d d
2572		pop	b
2573		pop	c
2574		pop	d
2575	#doinput_end
2575		pop	d
2576		pop	c
2577		jmpfar	d d	
	; doINPUT ends
	
	

2578		org 2600	
	; ------- GLOBAL FUNCTION doFOR -------

2600	#doFOR
2600		pop	c
2601		push	d		; syntax
		; FOR var = exp TO exp [STEP exp]
	
		; advance to =

2602		sliu c 8
2603		slil c 0
2604	#for_advance
2604		inc	c
2605		load	a [c]
2606		push	a
2607		sliu d 3
2608		slil d 13
2609		sub	a d
260a		sliu d #@doFOR0	[01]
260b		slil d #@doFOR0	[02]
260c		skipnz	a
260d		jalr	d d
260e		pop	a
260f		sliu d #for_advance	[00]
2610		slil d #for_advance	[04]
2611		jalr	d d
2612	#@doFOR0
2612		pop	a
2613		inc	c
2614		inc	c	
		;read first expression
	; calling global function eval_expression

2615		push	d
2616		push	c
2617		push	b
2618		sliu d 2
2619		slil d 6
261a		push	d
261b		push	c
261c		sliu c 1
261d		slil c 7
261e		sliu d #eval_expression	[00]
261f		slil d #eval_expression	[00]
2620		jmpfar	d d
2621		pop	b
2622		pop	c
2623		pop	d
2624		push	a
2625		sliu d 15
2626		slil d 15
2627		load	c [d]	
		;advance past TO

2628		inc	c
2629		inc	c	
		;read second expression
	; calling global function eval_expression

262a		push	d
262b		push	c
262c		push	b
262d		sliu d 2
262e		slil d 6
262f		push	d
2630		push	c
2631		sliu c 1
2632		slil c 7
2633		sliu d #eval_expression	[00]
2634		slil d #eval_expression	[00]
2635		jmpfar	d d
2636		pop	b
2637		pop	c
2638		pop	d
2639		push	a
263a		sliu d 15
263b		slil d 15
263c		load	c [d]	
		;is STEP present?

263d		load	a [c]	;	.if a == 0x70 then for_getstep

263e		sliu d 7
263f		slil d 0
2640		sub	a d
2641		sliu d #for_getstep	[04]
2642		slil d #for_getstep	[0a]
2643		skipnz	a
2644		jalr	d d	

2645		sliu a 0
2646		slil a 1
2647		sliu d #for_gotstep	[05]
2648		slil d #for_gotstep	[0b]
2649		jalr	d d
264a	#for_getstep		;advance past STEP

264a		inc	c
264b		inc	c	
		;read step expression
	; calling global function eval_expression

264c		push	d
264d		push	c
264e		push	b
264f		sliu d 2
2650		slil d 6
2651		push	d
2652		push	c
2653		sliu c 1
2654		slil c 7
2655		sliu d #eval_expression	[00]
2656		slil d #eval_expression	[00]
2657		jmpfar	d d
2658		pop	b
2659		pop	c
265a		pop	d
265b	#for_gotstep
265b		push	a	
		; check if FOR is in progress (last byte of instruction is 1 if yes, 0 if no)
	; calling global function currentline

265c		push	d
265d		push	c
265e		push	b
265f		sliu d 2
2660		slil d 6
2661		push	d
2662		push	c
2663		sliu c 2
2664		slil c 10
2665		sliu d #currentline	[00]
2666		slil d #currentline	[00]
2667		jmpfar	d d
2668		pop	b
2669		pop	c
266a		pop	d
266b		sliu d 1
266c		slil d 15
266d		add	a d
266e		load	b [a]	;	.if b == 1 then for_repeat

266f		sliu d #for_repeat	[09]
2670		slil d #for_repeat	[08]
2671		dec	b
2672		skipnz	b
2673		jalr	d d	
		; mark FOR as active

2674		sliu b 0
2675		slil b 1
2676		store	b [a]		
		; pop step

2677		pop	d		; pop endpoint

2678		pop	b		; pop startpoint

2679		pop	a		

267a		push	a
267b		sub	a b
267c		sliu d #@doFOR1	[08]
267d		slil d #@doFOR1	[03]
267e		jalr	d d
267f		pop	a
2680		sliu d #for_off	[0d]
2681		slil d #for_off	[0f]
2682		jalr	d d
2683	#@doFOR1
2683		pop	a	
		; set the variable

2684		sliu b 8
2685		slil b 2	; calling global function setvar

2686		push	d
2687		push	c
2688		push	b
2689		sliu d 2
268a		slil d 6
268b		push	d
268c		push	c
268d		sliu c 1
268e		slil c 13
268f		sliu d #setvar	[00]
2690		slil d #setvar	[0d]
2691		jmpfar	d d
2692		pop	b
2693		pop	c
2694		pop	d
2695		sliu d #for_push	[0c]
2696		slil d #for_push	[0e]
2697		jalr	d d	

2698	#for_repeat		; pop step

2698		pop	c		; pop endpoint

2699		pop	b		; pop startpoint (and drop it)

269a		pop	a
269b		push	b		; advance var

269c		sliu b 8
269d		slil b 2	; calling global function getvar

269e		push	d
269f		push	c
26a0		push	b
26a1		sliu d 2
26a2		slil d 6
26a3		push	d
26a4		push	c
26a5		sliu c 1
26a6		slil c 13
26a7		sliu d #getvar	[05]
26a8		slil d #getvar	[0f]
26a9		jmpfar	d d
26aa		pop	b
26ab		pop	c
26ac		pop	d
26ad		add	a c	; calling global function setvar

26ae		push	d
26af		push	c
26b0		push	b
26b1		sliu d 2
26b2		slil d 6
26b3		push	d
26b4		push	c
26b5		sliu c 1
26b6		slil c 13
26b7		sliu d #setvar	[00]
26b8		slil d #setvar	[0d]
26b9		jmpfar	d d
26ba		pop	b
26bb		pop	c
26bc		pop	d
26bd		push	a		; pop NEXT address from basic stack into C and dec pointer

26be		sliu d 13
26bf		slil d 2
26c0		page	d
26c1		sub	d d
26c2		load	b [d]
26c3		dec	b
26c4		load	c [b]
26c5		store	b [d]
26c6		pop	a
26c7		pop	b	;	.if a == b then for_off

26c8		sliu d #for_off	[0d]
26c9		slil d #for_off	[0f]
26ca		sub	a b
26cb		skipnz	a
26cc		jalr	d d
26cd		add	a b
26ce	#for_push		; push for's line number onto basic stack
		; get line number into A

26ce		sliu d 13
26cf		slil d 1
26d0		page	d
26d1		sub	d d
26d2		load	a [d]	
		; get top of basic stack

26d3		sliu d 13
26d4		slil d 2
26d5		page	d
26d6		sub	d d
26d7		load	d [d]		; push the line number

26d8		store	a [d]
26d9		inc	d
26da		sub	c c
26db		store	d [c]
26dc		sliu d #for_done	[0f]
26dd		slil d #for_done	[08]
26de		jalr	d d	

26df	#for_off		; mark FOR as inactive
	; calling global function currentline

26df		push	d
26e0		push	c
26e1		push	b
26e2		sliu d 2
26e3		slil d 6
26e4		push	d
26e5		push	c
26e6		sliu c 2
26e7		slil c 10
26e8		sliu d #currentline	[00]
26e9		slil d #currentline	[00]
26ea		jmpfar	d d
26eb		pop	b
26ec		pop	c
26ed		pop	d
26ee		sliu d 1
26ef		slil d 15
26f0		add	a d
26f1		sub	d d
26f2		store	d [a]		; set current instruction to C: line after NEXT

26f3		sliu d 13
26f4		slil d 1
26f5		page	d
26f6		sub	d d
26f7		store	c [d]
26f8	#for_done
26f8		sliu d 15
26f9		slil d 13
26fa		page	d
26fb		pop	d
26fc		pop	c
26fd		jmpfar	d d	
	; doFOR ends
	
	

26fe		org 2700	
	; ------- GLOBAL FUNCTION doNEXT -------

2700	#doNEXT
2700		pop	c
2701		push	d		; syntax NEXT varname
		;get NEXT address and push it

2702		sliu d 13
2703		slil d 1
2704		page	d
2705		sub	d d
2706		load	a [d]
2707		push	a	
		;get FOR address from basic stack

2708		sliu d 13
2709		slil d 2
270a		page	d
270b		sub	c c
270c		load	b [c]
270d		dec	b
270e		push	b
270f		sliu d 0
2710		slil d 0
2711		sub	b d
2712		sliu d #@doNEXT0	[01]
2713		slil d #@doNEXT0	[0a]
2714		skipz	b
2715		jalr	d d
2716		pop	b
2717		sliu d #donext_error	[02]
2718		slil d #donext_error	[07]
2719		jalr	d d
271a	#@doNEXT0
271a		pop	b		; get FOR's address

271b		load	a [b]		; save NEXT address on stack

271c		pop	c
271d		store	c [b]		; jump to FOR

271e		sliu d 13
271f		slil d 1
2720		page	d
2721		sub	d d
2722		dec	a
2723		store	a [d]
2724		sliu d #donext_end	[03]
2725		slil d #donext_end	[09]
2726		jalr	d d
2727	#donext_error
2727		sliu a 0
2728		slil a 5	; calling global function mark_error

2729		push	d
272a		push	c
272b		push	b
272c		sliu d 2
272d		slil d 7
272e		push	d
272f		push	c
2730		sliu c 1
2731		slil c 12
2732		sliu d #mark_error	[00]
2733		slil d #mark_error	[00]
2734		jmpfar	d d
2735		pop	b
2736		pop	c
2737		pop	d
2738		pop	a
2739	#donext_end
2739		sliu d 15
273a		slil d 13
273b		page	d	

273c		pop	d
273d		pop	c
273e		jmpfar	d d	
	; doNEXT ends
	
		

273f		org 2800	
	; ------- GLOBAL FUNCTION docompound -------

2800	#docompound
2800		pop	c
2801		push	d		; A points to substatement in page FD
		; copies substatement to fd:80, calls doline

2802		sliu d 15
2803		slil d 13
2804		page	d	

2805		push	a
2806		sliu b 8
2807		slil b 0
2808	#docompound_loop
2808		load	c [a]
2809		store	c [b]
280a		inc	a
280b		inc	b
280c		push	c
280d		sliu d 0
280e		slil d 0
280f		sub	c d
2810		sliu d #@docompound0	[01]
2811		slil d #@docompound0	[08]
2812		skipnz	c
2813		jalr	d d
2814		pop	c
2815		sliu d #docompound_loop	[00]
2816		slil d #docompound_loop	[08]
2817		jalr	d d
2818	#@docompound0
2818		pop	c	
	; calling global function basic_doline

2819		push	d
281a		push	c
281b		push	b
281c		sliu d 2
281d		slil d 8
281e		push	d
281f		push	c
2820		sliu c 2
2821		slil c 14
2822		sliu d #basic_doline	[00]
2823		slil d #basic_doline	[00]
2824		jmpfar	d d
2825		pop	b
2826		pop	c
2827		pop	d	

2828		pop	a
2829		pop	d
282a		pop	c
282b		jmpfar	d d	
	; docompound ends
	
	
	
	; ------- GLOBAL FUNCTION checkforcompound -------

282c	#checkforcompound
282c		pop	c
282d		push	d
282e		sliu a 8
282f		slil a 0
2830	#checkforcompound_colon_loop
2830		load	c [a]
2831		push	c
2832		sliu d 0
2833		slil d 0
2834		sub	c d
2835		sliu d #@checkforcompound0	[03]
2836		slil d #@checkforcompound0	[0d]
2837		skipz	c
2838		jalr	d d
2839		pop	c
283a		sliu d #checkforcompound_done	[08]
283b		slil d #checkforcompound_done	[09]
283c		jalr	d d
283d	#@checkforcompound0
283d		pop	c
283e		push	c
283f		sliu d 3
2840		slil d 10
2841		sub	c d
2842		sliu d #@checkforcompound1	[04]
2843		slil d #@checkforcompound1	[0a]
2844		skipz	c
2845		jalr	d d
2846		pop	c
2847		sliu d #checkforcompound_docompound	[07]
2848		slil d #checkforcompound_docompound	[08]
2849		jalr	d d
284a	#@checkforcompound1
284a		pop	c
284b		push	c
284c		sliu d 2
284d		slil d 2
284e		sub	c d
284f		sliu d #@checkforcompound2	[05]
2850		slil d #@checkforcompound2	[07]
2851		skipnz	c
2852		jalr	d d
2853		pop	c
2854		sliu d #checkforcompound_doneskipstring	[07]
2855		slil d #checkforcompound_doneskipstring	[04]
2856		jalr	d d
2857	#@checkforcompound2
2857		pop	c
2858	#checkforcompound_skipstringloop
2858		inc	a
2859		load	c [a]
285a		push	c
285b		sliu d 2
285c		slil d 2
285d		sub	c d
285e		sliu d #@checkforcompound3	[06]
285f		slil d #@checkforcompound3	[06]
2860		skipnz	c
2861		jalr	d d
2862		pop	c
2863		sliu d #checkforcompound_skipstringloop	[05]
2864		slil d #checkforcompound_skipstringloop	[08]
2865		jalr	d d
2866	#@checkforcompound3
2866		pop	c
2867		push	c
2868		sliu d 0
2869		slil d 0
286a		sub	c d
286b		sliu d #@checkforcompound4	[07]
286c		slil d #@checkforcompound4	[03]
286d		skipz	c
286e		jalr	d d
286f		pop	c
2870		sliu d #checkforcompound_done	[08]
2871		slil d #checkforcompound_done	[09]
2872		jalr	d d
2873	#@checkforcompound4
2873		pop	c
2874	#checkforcompound_doneskipstring
2874		inc	a
2875		sliu d #checkforcompound_colon_loop	[03]
2876		slil d #checkforcompound_colon_loop	[00]
2877		jalr	d d
2878	#checkforcompound_docompound
2878		inc	a
2879		inc	a	; calling global function docompound

287a		push	d
287b		push	c
287c		push	b
287d		sliu d 2
287e		slil d 8
287f		push	d
2880		push	c
2881		sliu c 2
2882		slil c 8
2883		sliu d #docompound	[00]
2884		slil d #docompound	[00]
2885		jmpfar	d d
2886		pop	b
2887		pop	c
2888		pop	d
2889	#checkforcompound_done
2889		pop	d
288a		pop	c
288b		jmpfar	d d	
	; checkforcompound ends
	
	

288c		org 2900	
	; ------- GLOBAL FUNCTION doPEEK -------

2900	#doPEEK
2900		pop	c
2901		push	d		;syntax: PEEK page,addr,varname

2902		sliu c 8
2903		slil c 2	; calling global function eval_expression

2904		push	d
2905		push	c
2906		push	b
2907		sliu d 2
2908		slil d 9
2909		push	d
290a		push	c
290b		sliu c 1
290c		slil c 7
290d		sliu d #eval_expression	[00]
290e		slil d #eval_expression	[00]
290f		jmpfar	d d
2910		pop	b
2911		pop	c
2912		pop	d
2913		sub	b b
2914		add	b a
2915		sliu c 15
2916		slil c 15
2917		load	c [c]
2918		inc	c
2919		inc	c	; calling global function eval_expression

291a		push	d
291b		push	c
291c		push	b
291d		sliu d 2
291e		slil d 9
291f		push	d
2920		push	c
2921		sliu c 1
2922		slil c 7
2923		sliu d #eval_expression	[00]
2924		slil d #eval_expression	[00]
2925		jmpfar	d d
2926		pop	b
2927		pop	c
2928		pop	d
2929		sliu c 15
292a		slil c 15
292b		load	c [c]
292c		page	b
292d		load	a [a]
292e		sliu d 15
292f		slil d 13
2930		page	d
2931		inc	c
2932		inc	c
2933		sub	b b
2934		add	b c	; calling global function setvar

2935		push	d
2936		push	c
2937		push	b
2938		sliu d 2
2939		slil d 9
293a		push	d
293b		push	c
293c		sliu c 1
293d		slil c 13
293e		sliu d #setvar	[00]
293f		slil d #setvar	[0d]
2940		jmpfar	d d
2941		pop	b
2942		pop	c
2943		pop	d
2944		pop	d
2945		pop	c
2946		jmpfar	d d	
	; doPEEK ends
	
	
	; ------- GLOBAL FUNCTION doPOKE -------

2947	#doPOKE
2947		pop	c
2948		push	d		;syntax: POKE page,addr,value

2949		sliu c 8
294a		slil c 2	; calling global function eval_expression

294b		push	d
294c		push	c
294d		push	b
294e		sliu d 2
294f		slil d 9
2950		push	d
2951		push	c
2952		sliu c 1
2953		slil c 7
2954		sliu d #eval_expression	[00]
2955		slil d #eval_expression	[00]
2956		jmpfar	d d
2957		pop	b
2958		pop	c
2959		pop	d
295a		push	a
295b		sliu c 15
295c		slil c 15
295d		load	c [c]
295e		inc	c
295f		inc	c	; calling global function eval_expression

2960		push	d
2961		push	c
2962		push	b
2963		sliu d 2
2964		slil d 9
2965		push	d
2966		push	c
2967		sliu c 1
2968		slil c 7
2969		sliu d #eval_expression	[00]
296a		slil d #eval_expression	[00]
296b		jmpfar	d d
296c		pop	b
296d		pop	c
296e		pop	d
296f		push	a
2970		sliu c 15
2971		slil c 15
2972		load	c [c]
2973		inc	c
2974		inc	c	; calling global function eval_expression

2975		push	d
2976		push	c
2977		push	b
2978		sliu d 2
2979		slil d 9
297a		push	d
297b		push	c
297c		sliu c 1
297d		slil c 7
297e		sliu d #eval_expression	[00]
297f		slil d #eval_expression	[00]
2980		jmpfar	d d
2981		pop	b
2982		pop	c
2983		pop	d
2984		pop	c
2985		pop	b
2986		page	b
2987		store	a [c]
2988		sliu d 15
2989		slil d 13
298a		page	d
298b		pop	d
298c		pop	c
298d		jmpfar	d d	
	; doPOKE ends
	
	
	; ------- GLOBAL FUNCTION doUSR -------

298e	#doUSR
298e		pop	c
298f		push	d		; syntax: USR page,addr
		; return page and address on stack
	

2990		sliu c 8
2991		slil c 2	; calling global function eval_expression

2992		push	d
2993		push	c
2994		push	b
2995		sliu d 2
2996		slil d 9
2997		push	d
2998		push	c
2999		sliu c 1
299a		slil c 7
299b		sliu d #eval_expression	[00]
299c		slil d #eval_expression	[00]
299d		jmpfar	d d
299e		pop	b
299f		pop	c
29a0		pop	d
29a1		sub	b b
29a2		add	b a
29a3		sliu c 15
29a4		slil c 15
29a5		load	c [c]
29a6		inc	c
29a7		inc	c	; calling global function eval_expression

29a8		push	d
29a9		push	c
29aa		push	b
29ab		sliu d 2
29ac		slil d 9
29ad		push	d
29ae		push	c
29af		sliu c 1
29b0		slil c 7
29b1		sliu d #eval_expression	[00]
29b2		slil d #eval_expression	[00]
29b3		jmpfar	d d
29b4		pop	b
29b5		pop	c
29b6		pop	d
29b7		sub	c c
29b8		add	c b	

29b9		sliu d 2
29ba		slil d 9
29bb		push	d
29bc		sliu d #doUSR_return	[0c]
29bd		slil d #doUSR_return	[00]
29be		push	d	

29bf		jmpfar	a a
29c0	#doUSR_return
29c0		pop	d
29c1		pop	c
29c2		jmpfar	d d	
	; doUSR ends
	

29c3		org 2a00	
	; ------- GLOBAL FUNCTION currentline -------

2a00	#currentline
2a00		pop	c
2a01		push	d		; page set to line's page, A returns address
	
		; use current line number to determine page and address

2a02		sliu d 13
2a03		slil d 1
2a04		page	d
2a05		sub	d d
2a06		load	a [d]		; divide it by eight to get the page number into c

2a07		push	a
2a08		sliu d 15
2a09		slil d 8
2a0a		nand	a d
2a0b		nand	a a
2a0c		sliu b 0
2a0d		slil b 8	; calling global function div_even

2a0e		push	d
2a0f		push	c
2a10		push	b
2a11		sliu d 2
2a12		slil d 10
2a13		push	d
2a14		push	c
2a15		sliu c 0
2a16		slil c 7
2a17		sliu d #div_even	[06]
2a18		slil d #div_even	[0a]
2a19		jmpfar	d d
2a1a		pop	b
2a1b		pop	c
2a1c		pop	d
2a1d		sliu d 11
2a1e		slil d 0
2a1f		add	a d
2a20		sub	c c
2a21		add	c a	
		; last three bits * 32 is the address

2a22		pop	a
2a23		sliu d 0
2a24		slil d 7
2a25		nand	a d
2a26		nand	a a
2a27		sliu b 2
2a28		slil b 0	; calling global function mul

2a29		push	d
2a2a		push	c
2a2b		push	b
2a2c		sliu d 2
2a2d		slil d 10
2a2e		push	d
2a2f		push	c
2a30		sliu c 0
2a31		slil c 8
2a32		sliu d #mul	[00]
2a33		slil d #mul	[00]
2a34		jmpfar	d d
2a35		pop	b
2a36		pop	c
2a37		pop	d	

2a38		page	c
2a39		pop	d
2a3a		pop	c
2a3b		jmpfar	d d	
	; currentline ends
	
	
	
	; ------- GLOBAL FUNCTION random_next -------

2a3c	#random_next
2a3c		pop	c
2a3d		push	d
2a3e		sliu d 13
2a3f		slil d 1
2a40		page	d	
		; use 129 * r + 17

2a41		sliu c 0
2a42		slil c 2
2a43		load	a [c]
2a44		sliu b 8
2a45		slil b 1	; calling global function mul

2a46		push	d
2a47		push	c
2a48		push	b
2a49		sliu d 2
2a4a		slil d 10
2a4b		push	d
2a4c		push	c
2a4d		sliu c 0
2a4e		slil c 8
2a4f		sliu d #mul	[00]
2a50		slil d #mul	[00]
2a51		jmpfar	d d
2a52		pop	b
2a53		pop	c
2a54		pop	d
2a55		sliu b 1
2a56		slil b 1
2a57		add	a b
2a58		store	a [c]	

2a59		sliu d 15
2a5a		slil d 13
2a5b		page	d
2a5c		pop	d
2a5d		pop	c
2a5e		jmpfar	d d	
	; random_next ends
	
	
	
	; ------- GLOBAL FUNCTION random_seed -------

2a5f	#random_seed
2a5f		pop	c
2a60		push	d
2a61		sliu d 13
2a62		slil d 1
2a63		page	d
2a64		sliu c 0
2a65		slil c 2
2a66		store	a [c]
2a67		sliu d 15
2a68		slil d 13
2a69		page	d
2a6a		pop	d
2a6b		pop	c
2a6c		jmpfar	d d	
	; random_seed ends
	
	
	
	; ------- GLOBAL FUNCTION doRND -------

2a6d	#doRND
2a6d		pop	c
2a6e		push	d		;syntax: RND number

2a6f		sliu c 8
2a70		slil c 2	; calling global function eval_expression

2a71		push	d
2a72		push	c
2a73		push	b
2a74		sliu d 2
2a75		slil d 10
2a76		push	d
2a77		push	c
2a78		sliu c 1
2a79		slil c 7
2a7a		sliu d #eval_expression	[00]
2a7b		slil d #eval_expression	[00]
2a7c		jmpfar	d d
2a7d		pop	b
2a7e		pop	c
2a7f		pop	d	; calling global function random_seed

2a80		push	d
2a81		push	c
2a82		push	b
2a83		sliu d 2
2a84		slil d 10
2a85		push	d
2a86		push	c
2a87		sliu c 2
2a88		slil c 10
2a89		sliu d #random_seed	[05]
2a8a		slil d #random_seed	[0f]
2a8b		jmpfar	d d
2a8c		pop	b
2a8d		pop	c
2a8e		pop	d
2a8f		pop	d
2a90		pop	c
2a91		jmpfar	d d	
	; doRND ends
	
	

2a92		org 2b00	
	; ------- GLOBAL FUNCTION doLOAD -------

2b00	#doLOAD
2b00		pop	c
2b01		push	d		; syntax LOAD page,addr
		; copies program from ROM memory into program space
	; calling global function basic_init

2b02		push	d
2b03		push	c
2b04		push	b
2b05		sliu d 2
2b06		slil d 11
2b07		push	d
2b08		push	c
2b09		sliu c 1
2b0a		slil c 3
2b0b		sliu d #basic_init	[01]
2b0c		slil d #basic_init	[0a]
2b0d		jmpfar	d d
2b0e		pop	b
2b0f		pop	c
2b10		pop	d	

2b11		sliu d 15
2b12		slil d 13
2b13		page	d
2b14		sliu c 8
2b15		slil c 2	; calling global function eval_expression

2b16		push	d
2b17		push	c
2b18		push	b
2b19		sliu d 2
2b1a		slil d 11
2b1b		push	d
2b1c		push	c
2b1d		sliu c 1
2b1e		slil c 7
2b1f		sliu d #eval_expression	[00]
2b20		slil d #eval_expression	[00]
2b21		jmpfar	d d
2b22		pop	b
2b23		pop	c
2b24		pop	d
2b25		sub	b b
2b26		add	b a
2b27		sliu c 15
2b28		slil c 15
2b29		load	c [c]
2b2a		inc	c
2b2b		inc	c	; calling global function eval_expression

2b2c		push	d
2b2d		push	c
2b2e		push	b
2b2f		sliu d 2
2b30		slil d 11
2b31		push	d
2b32		push	c
2b33		sliu c 1
2b34		slil c 7
2b35		sliu d #eval_expression	[00]
2b36		slil d #eval_expression	[00]
2b37		jmpfar	d d
2b38		pop	b
2b39		pop	c
2b3a		pop	d
2b3b		sub	c c
2b3c		add	c a
2b3d		push	b
2b3e		push	c
2b3f		pop	b
2b40		pop	c	

2b41	#doload_pageloop
2b41		sliu b 0
2b42		slil b 0
2b43	#doload_addrloop
2b43		page	c
2b44		load	a [b]
2b45		push	a
2b46		sliu d 0
2b47		slil d 0
2b48		sub	a d
2b49		sliu d #@doLOAD0	[05]
2b4a		slil d #@doLOAD0	[01]
2b4b		skipz	a
2b4c		jalr	d d
2b4d		pop	a
2b4e		sliu d #doload_done	[09]
2b4f		slil d #doload_done	[00]
2b50		jalr	d d
2b51	#@doLOAD0
2b51		pop	a	

2b52		push	c	

2b53		sliu c 2
2b54		slil c 0
2b55	#doload_pushloop
2b55		load	a [b]
2b56		push	a
2b57		inc	b
2b58		dec	c
2b59		sliu d #doload_pushloop	[05]
2b5a		slil d #doload_pushloop	[05]
2b5b		skipz	c
2b5c		jalr	d d	

2b5d		sliu d 15
2b5e		slil d 13
2b5f		page	d
2b60		sliu c 2
2b61		slil c 0
2b62	#doload_poploop
2b62		dec	c
2b63		pop	a
2b64		store	a [c]
2b65		sliu d #doload_poploop	[06]
2b66		slil d #doload_poploop	[02]
2b67		skipz	c
2b68		jalr	d d	

2b69		pop	c	
	; calling global function tokenizeline

2b6a		push	d
2b6b		push	c
2b6c		push	b
2b6d		sliu d 2
2b6e		slil d 11
2b6f		push	d
2b70		push	c
2b71		sliu c 1
2b72		slil c 3
2b73		sliu d #tokenizeline	[00]
2b74		slil d #tokenizeline	[00]
2b75		jmpfar	d d
2b76		pop	b
2b77		pop	c
2b78		pop	d	; calling global function basic_saveline

2b79		push	d
2b7a		push	c
2b7b		push	b
2b7c		sliu d 2
2b7d		slil d 11
2b7e		push	d
2b7f		push	c
2b80		sliu c 1
2b81		slil c 3
2b82		sliu d #basic_saveline	[03]
2b83		slil d #basic_saveline	[0f]
2b84		jmpfar	d d
2b85		pop	b
2b86		pop	c
2b87		pop	d	

2b88		sliu d #doload_addrloop	[04]
2b89		slil d #doload_addrloop	[03]
2b8a		skipz	b
2b8b		jalr	d d
2b8c		inc	c
2b8d		sliu d #doload_pageloop	[04]
2b8e		slil d #doload_pageloop	[01]
2b8f		jalr	d d	

2b90	#doload_done	
2b90		pop	d
2b91		pop	c
2b92		jmpfar	d d	
	; doLOAD ends
	

2b93		org 2c00
2c00		org 2e00	
	; ------- GLOBAL FUNCTION basic_doline -------

2e00	#basic_doline
2e00		pop	c
2e01		push	d		; fd:80 holds line to run
	
		; check for LIST

2e02		sliu d 15
2e03		slil d 13
2e04		page	d
2e05		sliu c 8
2e06		slil c 0
2e07		load	a [c]	
	
	;	.if a == 0x73 then basic_dolist

2e08		sliu d 7
2e09		slil d 3
2e0a		sub	a d
2e0b		sliu d #basic_dolist	[05]
2e0c		slil d #basic_dolist	[02]
2e0d		skipnz	a
2e0e		jalr	d d	
		; check for PRINT
	;	.if a == 0x50 then basic_doprint

2e0f		load	a [c]
2e10		sliu d 5
2e11		slil d 0
2e12		sub	a d
2e13		sliu d #basic_doprint	[06]
2e14		slil d #basic_doprint	[04]
2e15		skipnz	a
2e16		jalr	d d	
		; check for LET
	;	.if a == 0x4c then basic_dolet
	;	.if a == 0x23 then basic_dolet

2e17		load	a [c]
2e18		sliu d 2
2e19		slil d 3
2e1a		sub	a d
2e1b		sliu d #basic_dolet	[07]
2e1c		slil d #basic_dolet	[06]
2e1d		skipnz	a
2e1e		jalr	d d
2e1f		sliu d 2
2e20		slil d 9
2e21		sub	a d
2e22		sliu d #basic_dolet	[07]
2e23		slil d #basic_dolet	[06]
2e24		skipnz	a
2e25		jalr	d d	
		; check for RUN
	;	.if a == 0x72 then basic_dorun

2e26		load	a [c]
2e27		sliu d 7
2e28		slil d 2
2e29		sub	a d
2e2a		sliu d #basic_dorun	[08]
2e2b		slil d #basic_dorun	[08]
2e2c		skipnz	a
2e2d		jalr	d d	

2e2e		push	c
2e2f		sliu c 2
2e30		slil c 15
2e31		sliu d #basic_doline_continued	[00]
2e32		slil d #basic_doline_continued	[00]
2e33		jmpfar	d d	

2e34	#basic_doline_firstpage_done
2e34		pop	c
2e35		sliu d #basic_done	[09]
2e36		slil d #basic_done	[0a]
2e37		jalr	d d	

2e38	#basic_doline_firstpage
2e38		pop	c	
		; check for empty line
	;	.if a == 0 then basic_done

2e39		load	a [c]
2e3a		sliu d #basic_done	[09]
2e3b		slil d #basic_done	[0a]
2e3c		skipnz	a
2e3d		jalr	d d	

2e3e		sliu a 0
2e3f		slil a 3	; calling global function mark_error

2e40		push	d
2e41		push	c
2e42		push	b
2e43		sliu d 2
2e44		slil d 14
2e45		push	d
2e46		push	c
2e47		sliu c 1
2e48		slil c 12
2e49		sliu d #mark_error	[00]
2e4a		slil d #mark_error	[00]
2e4b		jmpfar	d d
2e4c		pop	b
2e4d		pop	c
2e4e		pop	d
2e4f		sliu d #basic_done	[09]
2e50		slil d #basic_done	[0a]
2e51		jalr	d d	

2e52	#basic_dolist	; calling global function doLIST

2e52		push	d
2e53		push	c
2e54		push	b
2e55		sliu d 2
2e56		slil d 14
2e57		push	d
2e58		push	c
2e59		sliu c 1
2e5a		slil c 14
2e5b		sliu d #doLIST	[0b]
2e5c		slil d #doLIST	[09]
2e5d		jmpfar	d d
2e5e		pop	b
2e5f		pop	c
2e60		pop	d
2e61		sliu d #basic_done	[09]
2e62		slil d #basic_done	[0a]
2e63		jalr	d d	

2e64	#basic_doprint	; calling global function doPRINT

2e64		push	d
2e65		push	c
2e66		push	b
2e67		sliu d 2
2e68		slil d 14
2e69		push	d
2e6a		push	c
2e6b		sliu c 1
2e6c		slil c 6
2e6d		sliu d #doPRINT	[00]
2e6e		slil d #doPRINT	[00]
2e6f		jmpfar	d d
2e70		pop	b
2e71		pop	c
2e72		pop	d
2e73		sliu d #basic_done	[09]
2e74		slil d #basic_done	[0a]
2e75		jalr	d d	

2e76	#basic_dolet	; calling global function doLET

2e76		push	d
2e77		push	c
2e78		push	b
2e79		sliu d 2
2e7a		slil d 14
2e7b		push	d
2e7c		push	c
2e7d		sliu c 1
2e7e		slil c 14
2e7f		sliu d #doLET	[00]
2e80		slil d #doLET	[00]
2e81		jmpfar	d d
2e82		pop	b
2e83		pop	c
2e84		pop	d
2e85		sliu d #basic_done	[09]
2e86		slil d #basic_done	[0a]
2e87		jalr	d d	

2e88	#basic_dorun	; calling global function doRUN

2e88		push	d
2e89		push	c
2e8a		push	b
2e8b		sliu d 2
2e8c		slil d 14
2e8d		push	d
2e8e		push	c
2e8f		sliu c 2
2e90		slil c 1
2e91		sliu d #doRUN	[09]
2e92		slil d #doRUN	[00]
2e93		jmpfar	d d
2e94		pop	b
2e95		pop	c
2e96		pop	d
2e97		sliu d #basic_done	[09]
2e98		slil d #basic_done	[0a]
2e99		jalr	d d	

2e9a	#basic_done		; check for compound by searching for colon
	; calling global function checkforcompound

2e9a		push	d
2e9b		push	c
2e9c		push	b
2e9d		sliu d 2
2e9e		slil d 14
2e9f		push	d
2ea0		push	c
2ea1		sliu c 2
2ea2		slil c 8
2ea3		sliu d #checkforcompound	[02]
2ea4		slil d #checkforcompound	[0c]
2ea5		jmpfar	d d
2ea6		pop	b
2ea7		pop	c
2ea8		pop	d	; calling global function error_marked

2ea9		push	d
2eaa		push	c
2eab		push	b
2eac		sliu d 2
2ead		slil d 14
2eae		push	d
2eaf		push	c
2eb0		sliu c 1
2eb1		slil c 12
2eb2		sliu d #error_marked	[01]
2eb3		slil d #error_marked	[01]
2eb4		jmpfar	d d
2eb5		pop	b
2eb6		pop	c
2eb7		pop	d
2eb8		push	a
2eb9		sliu d 0
2eba		slil d 0
2ebb		sub	a d
2ebc		sliu d #@basic_doline0	[0c]
2ebd		slil d #@basic_doline0	[04]
2ebe		skipz	a
2ebf		jalr	d d
2ec0		pop	a
2ec1		sliu d #basic_line_ret	[0d]
2ec2		slil d #basic_line_ret	[04]
2ec3		jalr	d d
2ec4	#@basic_doline0
2ec4		pop	a	; calling global function printerror

2ec5		push	d
2ec6		push	c
2ec7		push	b
2ec8		sliu d 2
2ec9		slil d 14
2eca		push	d
2ecb		push	c
2ecc		sliu c 1
2ecd		slil c 12
2ece		sliu d #printerror	[02]
2ecf		slil d #printerror	[0e]
2ed0		jmpfar	d d
2ed1		pop	b
2ed2		pop	c
2ed3		pop	d	;	.call printstring

2ed4	#basic_line_ret
2ed4		pop	d
2ed5		pop	c
2ed6		jmpfar	d d	
	; basic_doline ends
	
	

2ed7		org 2f00
2f00	#basic_doline_continued
2f00		pop	c	
		; check for GOTO
	;	.if a == 0x47 then basic_dogoto

2f01		load	a [c]
2f02		sliu d 4
2f03		slil d 7
2f04		sub	a d
2f05		sliu d #basic_dogoto	[05]
2f06		slil d #basic_dogoto	[05]
2f07		skipnz	a
2f08		jalr	d d	
		; check for GOSUB
	;	.if a == 0x53 then basic_dogosub

2f09		load	a [c]
2f0a		sliu d 5
2f0b		slil d 3
2f0c		sub	a d
2f0d		sliu d #basic_dogosub	[06]
2f0e		slil d #basic_dogosub	[07]
2f0f		skipnz	a
2f10		jalr	d d	
		; check for RETURN
	;	.if a == 0x52 then basic_doreturn

2f11		load	a [c]
2f12		sliu d 5
2f13		slil d 2
2f14		sub	a d
2f15		sliu d #basic_doreturn	[07]
2f16		slil d #basic_doreturn	[09]
2f17		skipnz	a
2f18		jalr	d d	
		; check for IF
	;	.if a == 0x49 then basic_doif

2f19		load	a [c]
2f1a		sliu d 4
2f1b		slil d 9
2f1c		sub	a d
2f1d		sliu d #basic_doif	[08]
2f1e		slil d #basic_doif	[0b]
2f1f		skipnz	a
2f20		jalr	d d	
		; check for INPUT
	;	.if a == 0x69 then basic_doinput

2f21		load	a [c]
2f22		sliu d 6
2f23		slil d 9
2f24		sub	a d
2f25		sliu d #basic_doinput	[0a]
2f26		slil d #basic_doinput	[0f]
2f27		skipnz	a
2f28		jalr	d d	
		; check for CLEAR
	;	.if a == 0x65 then basic_doclear

2f29		load	a [c]
2f2a		sliu d 6
2f2b		slil d 5
2f2c		sub	a d
2f2d		sliu d #basic_doclear	[09]
2f2e		slil d #basic_doclear	[0d]
2f2f		skipnz	a
2f30		jalr	d d	
	
		; check for PEEK
	;	.if a == 0x6b then basic_dopeek

2f31		load	a [c]
2f32		sliu d 6
2f33		slil d 11
2f34		sub	a d
2f35		sliu d #basic_dopeek	[0c]
2f36		slil d #basic_dopeek	[01]
2f37		skipnz	a
2f38		jalr	d d	
		; check for POKE
	;	.if a == 0x4f then basic_dopoke

2f39		load	a [c]
2f3a		sliu d 4
2f3b		slil d 15
2f3c		sub	a d
2f3d		sliu d #basic_dopoke	[0d]
2f3e		slil d #basic_dopoke	[03]
2f3f		skipnz	a
2f40		jalr	d d	
		; check for USR
	;	.if a == 0x55 then basic_dousr

2f41		load	a [c]
2f42		sliu d 5
2f43		slil d 5
2f44		sub	a d
2f45		sliu d #basic_dousr	[0e]
2f46		slil d #basic_dousr	[05]
2f47		skipnz	a
2f48		jalr	d d	

2f49		push	c
2f4a		sliu c 3
2f4b		slil c 0
2f4c		sliu d #basic_doline_thirdpage	[00]
2f4d		slil d #basic_doline_thirdpage	[00]
2f4e		jmpfar	d d	

2f4f	#basic_doline_gobacktofirstpage
2f4f		push	c
2f50		sliu c 2
2f51		slil c 14
2f52		sliu d #basic_doline_firstpage_done	[03]
2f53		slil d #basic_doline_firstpage_done	[04]
2f54		jmpfar	d d	

2f55	#basic_dogoto	; calling global function doGOTO

2f55		push	d
2f56		push	c
2f57		push	b
2f58		sliu d 2
2f59		slil d 15
2f5a		push	d
2f5b		push	c
2f5c		sliu c 2
2f5d		slil c 2
2f5e		sliu d #doGOTO	[00]
2f5f		slil d #doGOTO	[00]
2f60		jmpfar	d d
2f61		pop	b
2f62		pop	c
2f63		pop	d
2f64		sliu d #basic_doline_gobacktofirstpage	[04]
2f65		slil d #basic_doline_gobacktofirstpage	[0f]
2f66		jalr	d d	

2f67	#basic_dogosub	; calling global function doGOSUB

2f67		push	d
2f68		push	c
2f69		push	b
2f6a		sliu d 2
2f6b		slil d 15
2f6c		push	d
2f6d		push	c
2f6e		sliu c 2
2f6f		slil c 2
2f70		sliu d #doGOSUB	[04]
2f71		slil d #doGOSUB	[01]
2f72		jmpfar	d d
2f73		pop	b
2f74		pop	c
2f75		pop	d
2f76		sliu d #basic_doline_gobacktofirstpage	[04]
2f77		slil d #basic_doline_gobacktofirstpage	[0f]
2f78		jalr	d d	

2f79	#basic_doreturn	; calling global function doRETURN

2f79		push	d
2f7a		push	c
2f7b		push	b
2f7c		sliu d 2
2f7d		slil d 15
2f7e		push	d
2f7f		push	c
2f80		sliu c 2
2f81		slil c 2
2f82		sliu d #doRETURN	[0a]
2f83		slil d #doRETURN	[0d]
2f84		jmpfar	d d
2f85		pop	b
2f86		pop	c
2f87		pop	d
2f88		sliu d #basic_doline_gobacktofirstpage	[04]
2f89		slil d #basic_doline_gobacktofirstpage	[0f]
2f8a		jalr	d d	

2f8b	#basic_doif	; calling global function doIF

2f8b		push	d
2f8c		push	c
2f8d		push	b
2f8e		sliu d 2
2f8f		slil d 15
2f90		push	d
2f91		push	c
2f92		sliu c 2
2f93		slil c 3
2f94		sliu d #doIF	[00]
2f95		slil d #doIF	[00]
2f96		jmpfar	d d
2f97		pop	b
2f98		pop	c
2f99		pop	d
2f9a		sliu d #basic_doline_gobacktofirstpage	[04]
2f9b		slil d #basic_doline_gobacktofirstpage	[0f]
2f9c		jalr	d d	

2f9d	#basic_doclear	; calling global function initvar

2f9d		push	d
2f9e		push	c
2f9f		push	b
2fa0		sliu d 2
2fa1		slil d 15
2fa2		push	d
2fa3		push	c
2fa4		sliu c 1
2fa5		slil c 13
2fa6		sliu d #initvar	[00]
2fa7		slil d #initvar	[00]
2fa8		jmpfar	d d
2fa9		pop	b
2faa		pop	c
2fab		pop	d
2fac		sliu d #basic_doline_gobacktofirstpage	[04]
2fad		slil d #basic_doline_gobacktofirstpage	[0f]
2fae		jalr	d d	

2faf	#basic_doinput	; calling global function doINPUT

2faf		push	d
2fb0		push	c
2fb1		push	b
2fb2		sliu d 2
2fb3		slil d 15
2fb4		push	d
2fb5		push	c
2fb6		sliu c 2
2fb7		slil c 5
2fb8		sliu d #doINPUT	[00]
2fb9		slil d #doINPUT	[00]
2fba		jmpfar	d d
2fbb		pop	b
2fbc		pop	c
2fbd		pop	d
2fbe		sliu d #basic_doline_gobacktofirstpage	[04]
2fbf		slil d #basic_doline_gobacktofirstpage	[0f]
2fc0		jalr	d d	

2fc1	#basic_dopeek	; calling global function doPEEK

2fc1		push	d
2fc2		push	c
2fc3		push	b
2fc4		sliu d 2
2fc5		slil d 15
2fc6		push	d
2fc7		push	c
2fc8		sliu c 2
2fc9		slil c 9
2fca		sliu d #doPEEK	[00]
2fcb		slil d #doPEEK	[00]
2fcc		jmpfar	d d
2fcd		pop	b
2fce		pop	c
2fcf		pop	d
2fd0		sliu d #basic_doline_gobacktofirstpage	[04]
2fd1		slil d #basic_doline_gobacktofirstpage	[0f]
2fd2		jalr	d d	

2fd3	#basic_dopoke	; calling global function doPOKE

2fd3		push	d
2fd4		push	c
2fd5		push	b
2fd6		sliu d 2
2fd7		slil d 15
2fd8		push	d
2fd9		push	c
2fda		sliu c 2
2fdb		slil c 9
2fdc		sliu d #doPOKE	[04]
2fdd		slil d #doPOKE	[07]
2fde		jmpfar	d d
2fdf		pop	b
2fe0		pop	c
2fe1		pop	d
2fe2		sliu d #basic_doline_gobacktofirstpage	[04]
2fe3		slil d #basic_doline_gobacktofirstpage	[0f]
2fe4		jalr	d d	

2fe5	#basic_dousr	; calling global function doUSR

2fe5		push	d
2fe6		push	c
2fe7		push	b
2fe8		sliu d 2
2fe9		slil d 15
2fea		push	d
2feb		push	c
2fec		sliu c 2
2fed		slil c 9
2fee		sliu d #doUSR	[08]
2fef		slil d #doUSR	[0e]
2ff0		jmpfar	d d
2ff1		pop	b
2ff2		pop	c
2ff3		pop	d
2ff4		sliu d #basic_doline_gobacktofirstpage	[04]
2ff5		slil d #basic_doline_gobacktofirstpage	[0f]
2ff6		jalr	d d	

2ff7		org 3000
3000	#basic_doline_thirdpage
3000		pop	c		; check for CLS
	;	.if a == 0x63 then basic_docls

3001		load	a [c]
3002		sliu d 6
3003		slil d 3
3004		sub	a d
3005		sliu d #basic_docls	[02]
3006		slil d #basic_docls	[0f]
3007		skipnz	a
3008		jalr	d d	
		; check for FOR
	;	.if a == 0x46 then basic_dofor

3009		load	a [c]
300a		sliu d 4
300b		slil d 6
300c		sub	a d
300d		sliu d #basic_dofor	[04]
300e		slil d #basic_dofor	[01]
300f		skipnz	a
3010		jalr	d d	
		; check for NEXT
	;	.if a == 0x58 then basic_donext

3011		load	a [c]
3012		sliu d 5
3013		slil d 8
3014		sub	a d
3015		sliu d #basic_donext	[05]
3016		slil d #basic_donext	[03]
3017		skipnz	a
3018		jalr	d d	
		; check for LOAD
	;	.if a == 0x64 then basic_doload

3019		load	a [c]
301a		sliu d 6
301b		slil d 4
301c		sub	a d
301d		sliu d #basic_doload	[07]
301e		slil d #basic_doload	[07]
301f		skipnz	a
3020		jalr	d d	
		; check for RND
	;	.if a == 0x6e then basic_dornd

3021		load	a [c]
3022		sliu d 6
3023		slil d 14
3024		sub	a d
3025		sliu d #basic_dornd	[06]
3026		slil d #basic_dornd	[05]
3027		skipnz	a
3028		jalr	d d	

3029		push	c
302a		sliu c 2
302b		slil c 14
302c		sliu d #basic_doline_firstpage	[03]
302d		slil d #basic_doline_firstpage	[08]
302e		jmpfar	d d	

302f	#basic_docls	; calling global function doCLS

302f		push	d
3030		push	c
3031		push	b
3032		sliu d 3
3033		slil d 0
3034		push	d
3035		push	c
3036		sliu c 1
3037		slil c 15
3038		sliu d #doCLS	[00]
3039		slil d #doCLS	[00]
303a		jmpfar	d d
303b		pop	b
303c		pop	c
303d		pop	d
303e		sliu d #basic_doline_gobacktofirstpage3	[08]
303f		slil d #basic_doline_gobacktofirstpage3	[09]
3040		jalr	d d	

3041	#basic_dofor	; calling global function doFOR

3041		push	d
3042		push	c
3043		push	b
3044		sliu d 3
3045		slil d 0
3046		push	d
3047		push	c
3048		sliu c 2
3049		slil c 6
304a		sliu d #doFOR	[00]
304b		slil d #doFOR	[00]
304c		jmpfar	d d
304d		pop	b
304e		pop	c
304f		pop	d
3050		sliu d #basic_doline_gobacktofirstpage3	[08]
3051		slil d #basic_doline_gobacktofirstpage3	[09]
3052		jalr	d d	

3053	#basic_donext	; calling global function doNEXT

3053		push	d
3054		push	c
3055		push	b
3056		sliu d 3
3057		slil d 0
3058		push	d
3059		push	c
305a		sliu c 2
305b		slil c 7
305c		sliu d #doNEXT	[00]
305d		slil d #doNEXT	[00]
305e		jmpfar	d d
305f		pop	b
3060		pop	c
3061		pop	d
3062		sliu d #basic_doline_gobacktofirstpage3	[08]
3063		slil d #basic_doline_gobacktofirstpage3	[09]
3064		jalr	d d	

3065	#basic_dornd	; calling global function doRND

3065		push	d
3066		push	c
3067		push	b
3068		sliu d 3
3069		slil d 0
306a		push	d
306b		push	c
306c		sliu c 2
306d		slil c 10
306e		sliu d #doRND	[06]
306f		slil d #doRND	[0d]
3070		jmpfar	d d
3071		pop	b
3072		pop	c
3073		pop	d
3074		sliu d #basic_doline_gobacktofirstpage3	[08]
3075		slil d #basic_doline_gobacktofirstpage3	[09]
3076		jalr	d d	

3077	#basic_doload	; calling global function doLOAD

3077		push	d
3078		push	c
3079		push	b
307a		sliu d 3
307b		slil d 0
307c		push	d
307d		push	c
307e		sliu c 2
307f		slil c 11
3080		sliu d #doLOAD	[00]
3081		slil d #doLOAD	[00]
3082		jmpfar	d d
3083		pop	b
3084		pop	c
3085		pop	d
3086		sliu d #basic_doline_gobacktofirstpage3	[08]
3087		slil d #basic_doline_gobacktofirstpage3	[09]
3088		jalr	d d	

3089	#basic_doline_gobacktofirstpage3
3089		push	c
308a		sliu c 2
308b		slil c 14
308c		sliu d #basic_doline_firstpage_done	[03]
308d		slil d #basic_doline_firstpage_done	[04]
308e		jmpfar	d d	

308f		org 3100	

3100		org 4000
4000		db	0x31
4001		db	0x30
4002		db	0x20
4003		db	0x46
4004		db	0x4f
4005		db	0x52
4006		db	0x20
4007		db	0x49
4008		db	0x3d
4009		db	0x30
400a		db	0x20
400b		db	0x54
400c		db	0x4f
400d		db	0x20
400e		db	0x31
400f		db	0x30
4010		db	0x20
4011		db	0x20
4012		db	0x20
4013		db	0x20
4014		db	0x20
4015		db	0x20
4016		db	0x20
4017		db	0x20
4018		db	0x20
4019		db	0x20
401a		db	0x20
401b		db	0x20
401c		db	0x20
401d		db	0x20
401e		db	0x20
401f		db	0
4020		db	0x32
4021		db	0x30
4022		db	0x20
4023		db	0x50
4024		db	0x52
4025		db	0x49
4026		db	0x4e
4027		db	0x54
4028		db	0x20
4029		db	0x22
402a		db	0x49
402b		db	0x20
402c		db	0x49
402d		db	0x53
402e		db	0x20
402f		db	0x22
4030		db	0x2c
4031		db	0x49
4032		db	0x2b
4033		db	0x31
4034		db	0x20
4035		db	0x20
4036		db	0x20
4037		db	0x20
4038		db	0x20
4039		db	0x20
403a		db	0x20
403b		db	0x20
403c		db	0x20
403d		db	0x20
403e		db	0x20
403f		db	0
4040		db	0x33
4041		db	0x30
4042		db	0x20
4043		db	0x4e
4044		db	0x45
4045		db	0x58
4046		db	0x54
4047		db	0x20
4048		db	0x49
4049		db	0x20
404a		db	0x20
404b		db	0x20
404c		db	0x20
404d		db	0x20
404e		db	0x20
404f		db	0x20
4050		db	0x20
4051		db	0x20
4052		db	0x20
4053		db	0x20
4054		db	0x20
4055		db	0x20
4056		db	0x20
4057		db	0x20
4058		db	0x20
4059		db	0x20
405a		db	0x20
405b		db	0x20
405c		db	0x20
405d		db	0x20
405e		db	0x20
405f		db	0
4060		db	0x34
4061		db	0x30
4062		db	0x20
4063		db	0x45
4064		db	0x4e
4065		db	0x44
4066		db	0x20
4067		db	0x20
4068		db	0x20
4069		db	0x20
406a		db	0x20
406b		db	0x20
406c		db	0x20
406d		db	0x20
406e		db	0x20
406f		db	0x20
4070		db	0x20
4071		db	0x20
4072		db	0x20
4073		db	0x20
4074		db	0x20
4075		db	0x20
4076		db	0x20
4077		db	0x20
4078		db	0x20
4079		db	0x20
407a		db	0x20
407b		db	0x20
407c		db	0x20
407d		db	0x20
407e		db	0x20
407f		db	0	

4080		org 4100
4100		db	0x31
4101		db	0x20
4102		db	0x50
4103		db	0x52
4104		db	0x49
4105		db	0x4e
4106		db	0x54
4107		db	0x20
4108		db	0x22
4109		db	0x47
410a		db	0x55
410b		db	0x45
410c		db	0x53
410d		db	0x53
410e		db	0x20
410f		db	0x4d
4110		db	0x59
4111		db	0x20
4112		db	0x4e
4113		db	0x55
4114		db	0x4d
4115		db	0x42
4116		db	0x45
4117		db	0x52
4118		db	0x22
4119		db	0x20
411a		db	0x20
411b		db	0x20
411c		db	0x20
411d		db	0x20
411e		db	0x20
411f		db	0
4120		db	0x32
4121		db	0x20
4122		db	0x50
4123		db	0x52
4124		db	0x49
4125		db	0x4e
4126		db	0x54
4127		db	0x20
4128		db	0x22
4129		db	0x52
412a		db	0x41
412b		db	0x4e
412c		db	0x44
412d		db	0x4f
412e		db	0x4d
412f		db	0x20
4130		db	0x53
4131		db	0x45
4132		db	0x45
4133		db	0x44
4134		db	0x22
4135		db	0x3b
4136		db	0x20
4137		db	0x20
4138		db	0x20
4139		db	0x20
413a		db	0x20
413b		db	0x20
413c		db	0x20
413d		db	0x20
413e		db	0x20
413f		db	0
4140		db	0x33
4141		db	0x20
4142		db	0x49
4143		db	0x4e
4144		db	0x50
4145		db	0x55
4146		db	0x54
4147		db	0x20
4148		db	0x5a
4149		db	0x20
414a		db	0x20
414b		db	0x20
414c		db	0x20
414d		db	0x20
414e		db	0x20
414f		db	0x20
4150		db	0x20
4151		db	0x20
4152		db	0x20
4153		db	0x20
4154		db	0x20
4155		db	0x20
4156		db	0x20
4157		db	0x20
4158		db	0x20
4159		db	0x20
415a		db	0x20
415b		db	0x20
415c		db	0x20
415d		db	0x20
415e		db	0x20
415f		db	0
4160		db	0x34
4161		db	0x20
4162		db	0x52
4163		db	0x4e
4164		db	0x44
4165		db	0x20
4166		db	0x5a
4167		db	0x20
4168		db	0x20
4169		db	0x20
416a		db	0x20
416b		db	0x20
416c		db	0x20
416d		db	0x20
416e		db	0x20
416f		db	0x20
4170		db	0x20
4171		db	0x20
4172		db	0x20
4173		db	0x20
4174		db	0x20
4175		db	0x20
4176		db	0x20
4177		db	0x20
4178		db	0x20
4179		db	0x20
417a		db	0x20
417b		db	0x20
417c		db	0x20
417d		db	0x20
417e		db	0x20
417f		db	0
4180		db	0x31
4181		db	0x30
4182		db	0x20
4183		db	0x4e
4184		db	0x20
4185		db	0x3d
4186		db	0x20
4187		db	0x52
4188		db	0x4e
4189		db	0x44
418a		db	0x20
418b		db	0x4d
418c		db	0x4f
418d		db	0x44
418e		db	0x20
418f		db	0x31
4190		db	0x30
4191		db	0x30
4192		db	0x20
4193		db	0x2b
4194		db	0x20
4195		db	0x31
4196		db	0x20
4197		db	0x20
4198		db	0x20
4199		db	0x20
419a		db	0x20
419b		db	0x20
419c		db	0x20
419d		db	0x20
419e		db	0x20
419f		db	0
41a0		db	0x31
41a1		db	0x31
41a2		db	0x20
41a3		db	0x50
41a4		db	0x52
41a5		db	0x49
41a6		db	0x4e
41a7		db	0x54
41a8		db	0x20
41a9		db	0x22
41aa		db	0x49
41ab		db	0x20
41ac		db	0x48
41ad		db	0x41
41ae		db	0x56
41af		db	0x45
41b0		db	0x20
41b1		db	0x41
41b2		db	0x20
41b3		db	0x4e
41b4		db	0x55
41b5		db	0x4d
41b6		db	0x42
41b7		db	0x45
41b8		db	0x52
41b9		db	0x22
41ba		db	0x20
41bb		db	0x20
41bc		db	0x20
41bd		db	0x20
41be		db	0x20
41bf		db	0
41c0		db	0x31
41c1		db	0x32
41c2		db	0x20
41c3		db	0x50
41c4		db	0x52
41c5		db	0x49
41c6		db	0x4e
41c7		db	0x54
41c8		db	0x20
41c9		db	0x22
41ca		db	0x43
41cb		db	0x41
41cc		db	0x4e
41cd		db	0x20
41ce		db	0x59
41cf		db	0x4f
41d0		db	0x55
41d1		db	0x20
41d2		db	0x47
41d3		db	0x55
41d4		db	0x45
41d5		db	0x53
41d6		db	0x53
41d7		db	0x20
41d8		db	0x49
41d9		db	0x54
41da		db	0x3f
41db		db	0x22
41dc		db	0x20
41dd		db	0x20
41de		db	0x20
41df		db	0
41e0		db	0x31
41e1		db	0x33
41e2		db	0x20
41e3		db	0x43
41e4		db	0x3d
41e5		db	0x30
41e6		db	0x20
41e7		db	0x20
41e8		db	0x20
41e9		db	0x20
41ea		db	0x20
41eb		db	0x20
41ec		db	0x20
41ed		db	0x20
41ee		db	0x20
41ef		db	0x20
41f0		db	0x20
41f1		db	0x20
41f2		db	0x20
41f3		db	0x20
41f4		db	0x20
41f5		db	0x20
41f6		db	0x20
41f7		db	0x20
41f8		db	0x20
41f9		db	0x20
41fa		db	0x20
41fb		db	0x20
41fc		db	0x20
41fd		db	0x20
41fe		db	0x20
41ff		db	0
4200		db	0x31
4201		db	0x34
4202		db	0x20
4203		db	0x43
4204		db	0x3d
4205		db	0x43
4206		db	0x2b
4207		db	0x31
4208		db	0x20
4209		db	0x20
420a		db	0x20
420b		db	0x20
420c		db	0x20
420d		db	0x20
420e		db	0x20
420f		db	0x20
4210		db	0x20
4211		db	0x20
4212		db	0x20
4213		db	0x20
4214		db	0x20
4215		db	0x20
4216		db	0x20
4217		db	0x20
4218		db	0x20
4219		db	0x20
421a		db	0x20
421b		db	0x20
421c		db	0x20
421d		db	0x20
421e		db	0x20
421f		db	0
4220		db	0x31
4221		db	0x35
4222		db	0x20
4223		db	0x50
4224		db	0x52
4225		db	0x49
4226		db	0x4e
4227		db	0x54
4228		db	0x20
4229		db	0x22
422a		db	0x59
422b		db	0x4f
422c		db	0x55
422d		db	0x52
422e		db	0x20
422f		db	0x47
4230		db	0x55
4231		db	0x45
4232		db	0x53
4233		db	0x53
4234		db	0x22
4235		db	0x3b
4236		db	0x20
4237		db	0x20
4238		db	0x20
4239		db	0x20
423a		db	0x20
423b		db	0x20
423c		db	0x20
423d		db	0x20
423e		db	0x20
423f		db	0
4240		db	0x31
4241		db	0x36
4242		db	0x20
4243		db	0x49
4244		db	0x4e
4245		db	0x50
4246		db	0x55
4247		db	0x54
4248		db	0x20
4249		db	0x47
424a		db	0x20
424b		db	0x20
424c		db	0x20
424d		db	0x20
424e		db	0x20
424f		db	0x20
4250		db	0x20
4251		db	0x20
4252		db	0x20
4253		db	0x20
4254		db	0x20
4255		db	0x20
4256		db	0x20
4257		db	0x20
4258		db	0x20
4259		db	0x20
425a		db	0x20
425b		db	0x20
425c		db	0x20
425d		db	0x20
425e		db	0x20
425f		db	0
4260		db	0x31
4261		db	0x37
4262		db	0x20
4263		db	0x49
4264		db	0x46
4265		db	0x20
4266		db	0x47
4267		db	0x3c
4268		db	0x4e
4269		db	0x20
426a		db	0x54
426b		db	0x48
426c		db	0x45
426d		db	0x4e
426e		db	0x20
426f		db	0x47
4270		db	0x4f
4271		db	0x54
4272		db	0x4f
4273		db	0x20
4274		db	0x33
4275		db	0x30
4276		db	0x20
4277		db	0x20
4278		db	0x20
4279		db	0x20
427a		db	0x20
427b		db	0x20
427c		db	0x20
427d		db	0x20
427e		db	0x20
427f		db	0
4280		db	0x31
4281		db	0x38
4282		db	0x20
4283		db	0x49
4284		db	0x46
4285		db	0x20
4286		db	0x47
4287		db	0x3e
4288		db	0x4e
4289		db	0x20
428a		db	0x54
428b		db	0x48
428c		db	0x45
428d		db	0x4e
428e		db	0x20
428f		db	0x47
4290		db	0x4f
4291		db	0x54
4292		db	0x4f
4293		db	0x20
4294		db	0x33
4295		db	0x35
4296		db	0x20
4297		db	0x20
4298		db	0x20
4299		db	0x20
429a		db	0x20
429b		db	0x20
429c		db	0x20
429d		db	0x20
429e		db	0x20
429f		db	0
42a0		db	0x31
42a1		db	0x39
42a2		db	0x20
42a3		db	0x50
42a4		db	0x52
42a5		db	0x49
42a6		db	0x4e
42a7		db	0x54
42a8		db	0x20
42a9		db	0x22
42aa		db	0x59
42ab		db	0x4f
42ac		db	0x55
42ad		db	0x20
42ae		db	0x47
42af		db	0x4f
42b0		db	0x54
42b1		db	0x20
42b2		db	0x49
42b3		db	0x54
42b4		db	0x20
42b5		db	0x49
42b6		db	0x4e
42b7		db	0x20
42b8		db	0x22
42b9		db	0x3b
42ba		db	0x20
42bb		db	0x20
42bc		db	0x20
42bd		db	0x20
42be		db	0x20
42bf		db	0
42c0		db	0x32
42c1		db	0x30
42c2		db	0x20
42c3		db	0x50
42c4		db	0x52
42c5		db	0x49
42c6		db	0x4e
42c7		db	0x54
42c8		db	0x20
42c9		db	0x43
42ca		db	0x2c
42cb		db	0x22
42cc		db	0x20
42cd		db	0x54
42ce		db	0x55
42cf		db	0x52
42d0		db	0x4e
42d1		db	0x53
42d2		db	0x21
42d3		db	0x22
42d4		db	0x20
42d5		db	0x20
42d6		db	0x20
42d7		db	0x20
42d8		db	0x20
42d9		db	0x20
42da		db	0x20
42db		db	0x20
42dc		db	0x20
42dd		db	0x20
42de		db	0x20
42df		db	0
42e0		db	0x32
42e1		db	0x31
42e2		db	0x20
42e3		db	0x50
42e4		db	0x52
42e5		db	0x49
42e6		db	0x4e
42e7		db	0x54
42e8		db	0x20
42e9		db	0x22
42ea		db	0x50
42eb		db	0x4c
42ec		db	0x41
42ed		db	0x59
42ee		db	0x20
42ef		db	0x41
42f0		db	0x47
42f1		db	0x41
42f2		db	0x49
42f3		db	0x4e
42f4		db	0x20
42f5		db	0x28
42f6		db	0x31
42f7		db	0x3d
42f8		db	0x59
42f9		db	0x45
42fa		db	0x53
42fb		db	0x29
42fc		db	0x22
42fd		db	0x3b
42fe		db	0x20
42ff		db	0
4300		db	0x32
4301		db	0x33
4302		db	0x20
4303		db	0x49
4304		db	0x4e
4305		db	0x50
4306		db	0x55
4307		db	0x54
4308		db	0x20
4309		db	0x41
430a		db	0x47
430b		db	0x41
430c		db	0x49
430d		db	0x4e
430e		db	0x20
430f		db	0x20
4310		db	0x20
4311		db	0x20
4312		db	0x20
4313		db	0x20
4314		db	0x20
4315		db	0x20
4316		db	0x20
4317		db	0x20
4318		db	0x20
4319		db	0x20
431a		db	0x20
431b		db	0x20
431c		db	0x20
431d		db	0x20
431e		db	0x20
431f		db	0
4320		db	0x32
4321		db	0x34
4322		db	0x20
4323		db	0x49
4324		db	0x46
4325		db	0x20
4326		db	0x41
4327		db	0x47
4328		db	0x41
4329		db	0x49
432a		db	0x4e
432b		db	0x3d
432c		db	0x31
432d		db	0x20
432e		db	0x54
432f		db	0x48
4330		db	0x45
4331		db	0x4e
4332		db	0x20
4333		db	0x47
4334		db	0x4f
4335		db	0x54
4336		db	0x4f
4337		db	0x20
4338		db	0x31
4339		db	0x30
433a		db	0x20
433b		db	0x20
433c		db	0x20
433d		db	0x20
433e		db	0x20
433f		db	0
4340		db	0x32
4341		db	0x35
4342		db	0x20
4343		db	0x45
4344		db	0x4e
4345		db	0x44
4346		db	0x20
4347		db	0x20
4348		db	0x20
4349		db	0x20
434a		db	0x20
434b		db	0x20
434c		db	0x20
434d		db	0x20
434e		db	0x20
434f		db	0x20
4350		db	0x20
4351		db	0x20
4352		db	0x20
4353		db	0x20
4354		db	0x20
4355		db	0x20
4356		db	0x20
4357		db	0x20
4358		db	0x20
4359		db	0x20
435a		db	0x20
435b		db	0x20
435c		db	0x20
435d		db	0x20
435e		db	0x20
435f		db	0
4360		db	0x33
4361		db	0x30
4362		db	0x20
4363		db	0x50
4364		db	0x52
4365		db	0x49
4366		db	0x4e
4367		db	0x54
4368		db	0x20
4369		db	0x22
436a		db	0x54
436b		db	0x4f
436c		db	0x4f
436d		db	0x20
436e		db	0x4c
436f		db	0x4f
4370		db	0x57
4371		db	0x22
4372		db	0x20
4373		db	0x20
4374		db	0x20
4375		db	0x20
4376		db	0x20
4377		db	0x20
4378		db	0x20
4379		db	0x20
437a		db	0x20
437b		db	0x20
437c		db	0x20
437d		db	0x20
437e		db	0x20
437f		db	0
4380		db	0x33
4381		db	0x31
4382		db	0x20
4383		db	0x47
4384		db	0x4f
4385		db	0x54
4386		db	0x4f
4387		db	0x20
4388		db	0x31
4389		db	0x34
438a		db	0x20
438b		db	0x20
438c		db	0x20
438d		db	0x20
438e		db	0x20
438f		db	0x20
4390		db	0x20
4391		db	0x20
4392		db	0x20
4393		db	0x20
4394		db	0x20
4395		db	0x20
4396		db	0x20
4397		db	0x20
4398		db	0x20
4399		db	0x20
439a		db	0x20
439b		db	0x20
439c		db	0x20
439d		db	0x20
439e		db	0x20
439f		db	0
43a0		db	0x33
43a1		db	0x35
43a2		db	0x20
43a3		db	0x50
43a4		db	0x52
43a5		db	0x49
43a6		db	0x4e
43a7		db	0x54
43a8		db	0x20
43a9		db	0x22
43aa		db	0x54
43ab		db	0x4f
43ac		db	0x4f
43ad		db	0x20
43ae		db	0x48
43af		db	0x49
43b0		db	0x47
43b1		db	0x48
43b2		db	0x22
43b3		db	0x20
43b4		db	0x20
43b5		db	0x20
43b6		db	0x20
43b7		db	0x20
43b8		db	0x20
43b9		db	0x20
43ba		db	0x20
43bb		db	0x20
43bc		db	0x20
43bd		db	0x20
43be		db	0x20
43bf		db	0
43c0		db	0x33
43c1		db	0x36
43c2		db	0x20
43c3		db	0x47
43c4		db	0x4f
43c5		db	0x54
43c6		db	0x4f
43c7		db	0x20
43c8		db	0x31
43c9		db	0x34
43ca		db	0x20
43cb		db	0x20
43cc		db	0x20
43cd		db	0x20
43ce		db	0x20
43cf		db	0x20
43d0		db	0x20
43d1		db	0x20
43d2		db	0x20
43d3		db	0x20
43d4		db	0x20
43d5		db	0x20
43d6		db	0x20
43d7		db	0x20
43d8		db	0x20
43d9		db	0x20
43da		db	0x20
43db		db	0x20
43dc		db	0x20
43dd		db	0x20
43de		db	0x20
43df		db	0
43e0		db	0	

43e1		org 4400
4400		db	0x31
4401		db	0x20
4402		db	0x50
4403		db	0x52
4404		db	0x49
4405		db	0x4e
4406		db	0x54
4407		db	0x20
4408		db	0x22
4409		db	0x20
440a		db	0x20
440b		db	0x43
440c		db	0x4f
440d		db	0x4e
440e		db	0x57
440f		db	0x41
4410		db	0x59
4411		db	0x53
4412		db	0x20
4413		db	0x4c
4414		db	0x49
4415		db	0x46
4416		db	0x45
4417		db	0x22
4418		db	0x20
4419		db	0x20
441a		db	0x20
441b		db	0x20
441c		db	0x20
441d		db	0x20
441e		db	0x20
441f		db	0
4420		db	0x33
4421		db	0x20
4422		db	0x43
4423		db	0x50
4424		db	0x41
4425		db	0x47
4426		db	0x45
4427		db	0x3d
4428		db	0x31
4429		db	0x33
442a		db	0x33
442b		db	0x20
442c		db	0x20
442d		db	0x20
442e		db	0x20
442f		db	0x20
4430		db	0x20
4431		db	0x20
4432		db	0x20
4433		db	0x20
4434		db	0x20
4435		db	0x20
4436		db	0x20
4437		db	0x20
4438		db	0x20
4439		db	0x20
443a		db	0x20
443b		db	0x20
443c		db	0x20
443d		db	0x20
443e		db	0x20
443f		db	0
4440		db	0x34
4441		db	0x20
4442		db	0x4e
4443		db	0x50
4444		db	0x41
4445		db	0x47
4446		db	0x45
4447		db	0x3d
4448		db	0x31
4449		db	0x33
444a		db	0x34
444b		db	0x20
444c		db	0x20
444d		db	0x20
444e		db	0x20
444f		db	0x20
4450		db	0x20
4451		db	0x20
4452		db	0x20
4453		db	0x20
4454		db	0x20
4455		db	0x20
4456		db	0x20
4457		db	0x20
4458		db	0x20
4459		db	0x20
445a		db	0x20
445b		db	0x20
445c		db	0x20
445d		db	0x20
445e		db	0x20
445f		db	0
4460		db	0x35
4461		db	0x20
4462		db	0x58
4463		db	0x44
4464		db	0x3d
4465		db	0x36
4466		db	0x20
4467		db	0x20
4468		db	0x20
4469		db	0x20
446a		db	0x20
446b		db	0x20
446c		db	0x20
446d		db	0x20
446e		db	0x20
446f		db	0x20
4470		db	0x20
4471		db	0x20
4472		db	0x20
4473		db	0x20
4474		db	0x20
4475		db	0x20
4476		db	0x20
4477		db	0x20
4478		db	0x20
4479		db	0x20
447a		db	0x20
447b		db	0x20
447c		db	0x20
447d		db	0x20
447e		db	0x20
447f		db	0
4480		db	0x36
4481		db	0x20
4482		db	0x59
4483		db	0x44
4484		db	0x3d
4485		db	0x36
4486		db	0x20
4487		db	0x20
4488		db	0x20
4489		db	0x20
448a		db	0x20
448b		db	0x20
448c		db	0x20
448d		db	0x20
448e		db	0x20
448f		db	0x20
4490		db	0x20
4491		db	0x20
4492		db	0x20
4493		db	0x20
4494		db	0x20
4495		db	0x20
4496		db	0x20
4497		db	0x20
4498		db	0x20
4499		db	0x20
449a		db	0x20
449b		db	0x20
449c		db	0x20
449d		db	0x20
449e		db	0x20
449f		db	0
44a0		db	0x31
44a1		db	0x30
44a2		db	0x20
44a3		db	0x46
44a4		db	0x4f
44a5		db	0x52
44a6		db	0x20
44a7		db	0x58
44a8		db	0x3d
44a9		db	0x30
44aa		db	0x20
44ab		db	0x54
44ac		db	0x4f
44ad		db	0x20
44ae		db	0x58
44af		db	0x44
44b0		db	0x20
44b1		db	0x20
44b2		db	0x20
44b3		db	0x20
44b4		db	0x20
44b5		db	0x20
44b6		db	0x20
44b7		db	0x20
44b8		db	0x20
44b9		db	0x20
44ba		db	0x20
44bb		db	0x20
44bc		db	0x20
44bd		db	0x20
44be		db	0x20
44bf		db	0
44c0		db	0x31
44c1		db	0x31
44c2		db	0x20
44c3		db	0x46
44c4		db	0x4f
44c5		db	0x52
44c6		db	0x20
44c7		db	0x59
44c8		db	0x3d
44c9		db	0x30
44ca		db	0x20
44cb		db	0x54
44cc		db	0x4f
44cd		db	0x20
44ce		db	0x59
44cf		db	0x44
44d0		db	0x20
44d1		db	0x20
44d2		db	0x20
44d3		db	0x20
44d4		db	0x20
44d5		db	0x20
44d6		db	0x20
44d7		db	0x20
44d8		db	0x20
44d9		db	0x20
44da		db	0x20
44db		db	0x20
44dc		db	0x20
44dd		db	0x20
44de		db	0x20
44df		db	0
44e0		db	0x31
44e1		db	0x32
44e2		db	0x20
44e3		db	0x41
44e4		db	0x44
44e5		db	0x44
44e6		db	0x52
44e7		db	0x3d
44e8		db	0x59
44e9		db	0x2a
44ea		db	0x58
44eb		db	0x44
44ec		db	0x2b
44ed		db	0x58
44ee		db	0x20
44ef		db	0x20
44f0		db	0x20
44f1		db	0x20
44f2		db	0x20
44f3		db	0x20
44f4		db	0x20
44f5		db	0x20
44f6		db	0x20
44f7		db	0x20
44f8		db	0x20
44f9		db	0x20
44fa		db	0x20
44fb		db	0x20
44fc		db	0x20
44fd		db	0x20
44fe		db	0x20
44ff		db	0
4500		db	0x31
4501		db	0x33
4502		db	0x20
4503		db	0x50
4504		db	0x4f
4505		db	0x4b
4506		db	0x45
4507		db	0x20
4508		db	0x43
4509		db	0x50
450a		db	0x41
450b		db	0x47
450c		db	0x45
450d		db	0x2c
450e		db	0x41
450f		db	0x44
4510		db	0x44
4511		db	0x52
4512		db	0x2c
4513		db	0x30
4514		db	0x20
4515		db	0x20
4516		db	0x20
4517		db	0x20
4518		db	0x20
4519		db	0x20
451a		db	0x20
451b		db	0x20
451c		db	0x20
451d		db	0x20
451e		db	0x20
451f		db	0
4520		db	0x31
4521		db	0x34
4522		db	0x20
4523		db	0x4e
4524		db	0x45
4525		db	0x58
4526		db	0x54
4527		db	0x20
4528		db	0x59
4529		db	0x20
452a		db	0x20
452b		db	0x20
452c		db	0x20
452d		db	0x20
452e		db	0x20
452f		db	0x20
4530		db	0x20
4531		db	0x20
4532		db	0x20
4533		db	0x20
4534		db	0x20
4535		db	0x20
4536		db	0x20
4537		db	0x20
4538		db	0x20
4539		db	0x20
453a		db	0x20
453b		db	0x20
453c		db	0x20
453d		db	0x20
453e		db	0x20
453f		db	0
4540		db	0x31
4541		db	0x35
4542		db	0x20
4543		db	0x4e
4544		db	0x45
4545		db	0x58
4546		db	0x54
4547		db	0x20
4548		db	0x58
4549		db	0x20
454a		db	0x20
454b		db	0x20
454c		db	0x20
454d		db	0x20
454e		db	0x20
454f		db	0x20
4550		db	0x20
4551		db	0x20
4552		db	0x20
4553		db	0x20
4554		db	0x20
4555		db	0x20
4556		db	0x20
4557		db	0x20
4558		db	0x20
4559		db	0x20
455a		db	0x20
455b		db	0x20
455c		db	0x20
455d		db	0x20
455e		db	0x20
455f		db	0
4560		db	0x31
4561		db	0x37
4562		db	0x20
4563		db	0x47
4564		db	0x4f
4565		db	0x53
4566		db	0x55
4567		db	0x42
4568		db	0x20
4569		db	0x32
456a		db	0x33
456b		db	0x34
456c		db	0x20
456d		db	0x20
456e		db	0x20
456f		db	0x20
4570		db	0x20
4571		db	0x20
4572		db	0x20
4573		db	0x20
4574		db	0x20
4575		db	0x20
4576		db	0x20
4577		db	0x20
4578		db	0x20
4579		db	0x20
457a		db	0x20
457b		db	0x20
457c		db	0x20
457d		db	0x20
457e		db	0x20
457f		db	0	

4580		db	0x31
4581		db	0x38
4582		db	0x20
4583		db	0x47
4584		db	0x45
4585		db	0x4e
4586		db	0x3d
4587		db	0x30
4588		db	0x20
4589		db	0x20
458a		db	0x20
458b		db	0x20
458c		db	0x20
458d		db	0x20
458e		db	0x20
458f		db	0x20
4590		db	0x20
4591		db	0x20
4592		db	0x20
4593		db	0x20
4594		db	0x20
4595		db	0x20
4596		db	0x20
4597		db	0x20
4598		db	0x20
4599		db	0x20
459a		db	0x20
459b		db	0x20
459c		db	0x20
459d		db	0x20
459e		db	0x20
459f		db	0
45a0		db	0x31
45a1		db	0x39
45a2		db	0x20
45a3		db	0x47
45a4		db	0x4f
45a5		db	0x53
45a6		db	0x55
45a7		db	0x42
45a8		db	0x20
45a9		db	0x32
45aa		db	0x30
45ab		db	0x38
45ac		db	0x20
45ad		db	0x20
45ae		db	0x20
45af		db	0x20
45b0		db	0x20
45b1		db	0x20
45b2		db	0x20
45b3		db	0x20
45b4		db	0x20
45b5		db	0x20
45b6		db	0x20
45b7		db	0x20
45b8		db	0x20
45b9		db	0x20
45ba		db	0x20
45bb		db	0x20
45bc		db	0x20
45bd		db	0x20
45be		db	0x20
45bf		db	0
45c0		db	0x32
45c1		db	0x30
45c2		db	0x20
45c3		db	0x47
45c4		db	0x45
45c5		db	0x4e
45c6		db	0x3d
45c7		db	0x31
45c8		db	0x20
45c9		db	0x20
45ca		db	0x20
45cb		db	0x20
45cc		db	0x20
45cd		db	0x20
45ce		db	0x20
45cf		db	0x20
45d0		db	0x20
45d1		db	0x20
45d2		db	0x20
45d3		db	0x20
45d4		db	0x20
45d5		db	0x20
45d6		db	0x20
45d7		db	0x20
45d8		db	0x20
45d9		db	0x20
45da		db	0x20
45db		db	0x20
45dc		db	0x20
45dd		db	0x20
45de		db	0x20
45df		db	0
45e0		db	0x32
45e1		db	0x31
45e2		db	0x20
45e3		db	0x47
45e4		db	0x4f
45e5		db	0x53
45e6		db	0x55
45e7		db	0x42
45e8		db	0x20
45e9		db	0x31
45ea		db	0x36
45eb		db	0x30
45ec		db	0x20
45ed		db	0x20
45ee		db	0x20
45ef		db	0x20
45f0		db	0x20
45f1		db	0x20
45f2		db	0x20
45f3		db	0x20
45f4		db	0x20
45f5		db	0x20
45f6		db	0x20
45f7		db	0x20
45f8		db	0x20
45f9		db	0x20
45fa		db	0x20
45fb		db	0x20
45fc		db	0x20
45fd		db	0x20
45fe		db	0x20
45ff		db	0
4600		db	0x32
4601		db	0x32
4602		db	0x20
4603		db	0x47
4604		db	0x4f
4605		db	0x53
4606		db	0x55
4607		db	0x42
4608		db	0x20
4609		db	0x32
460a		db	0x30
460b		db	0x38
460c		db	0x20
460d		db	0x20
460e		db	0x20
460f		db	0x20
4610		db	0x20
4611		db	0x20
4612		db	0x20
4613		db	0x20
4614		db	0x20
4615		db	0x20
4616		db	0x20
4617		db	0x20
4618		db	0x20
4619		db	0x20
461a		db	0x20
461b		db	0x20
461c		db	0x20
461d		db	0x20
461e		db	0x20
461f		db	0
4620		db	0x32
4621		db	0x33
4622		db	0x20
4623		db	0x47
4624		db	0x45
4625		db	0x4e
4626		db	0x3d
4627		db	0x47
4628		db	0x45
4629		db	0x4e
462a		db	0x2b
462b		db	0x31
462c		db	0x20
462d		db	0x20
462e		db	0x20
462f		db	0x20
4630		db	0x20
4631		db	0x20
4632		db	0x20
4633		db	0x20
4634		db	0x20
4635		db	0x20
4636		db	0x20
4637		db	0x20
4638		db	0x20
4639		db	0x20
463a		db	0x20
463b		db	0x20
463c		db	0x20
463d		db	0x20
463e		db	0x20
463f		db	0
4640		db	0x32
4641		db	0x34
4642		db	0x20
4643		db	0x47
4644		db	0x4f
4645		db	0x54
4646		db	0x4f
4647		db	0x20
4648		db	0x32
4649		db	0x31
464a		db	0x20
464b		db	0x20
464c		db	0x20
464d		db	0x20
464e		db	0x20
464f		db	0x20
4650		db	0x20
4651		db	0x20
4652		db	0x20
4653		db	0x20
4654		db	0x20
4655		db	0x20
4656		db	0x20
4657		db	0x20
4658		db	0x20
4659		db	0x20
465a		db	0x20
465b		db	0x20
465c		db	0x20
465d		db	0x20
465e		db	0x20
465f		db	0	

4660		db	0x31
4661		db	0x36
4662		db	0x30
4663		db	0x20
4664		db	0x46
4665		db	0x4f
4666		db	0x52
4667		db	0x20
4668		db	0x58
4669		db	0x3d
466a		db	0x30
466b		db	0x20
466c		db	0x54
466d		db	0x4f
466e		db	0x20
466f		db	0x58
4670		db	0x44
4671		db	0x20
4672		db	0x20
4673		db	0x20
4674		db	0x20
4675		db	0x20
4676		db	0x20
4677		db	0x20
4678		db	0x20
4679		db	0x20
467a		db	0x20
467b		db	0x20
467c		db	0x20
467d		db	0x20
467e		db	0x20
467f		db	0
4680		db	0x31
4681		db	0x36
4682		db	0x31
4683		db	0x20
4684		db	0x46
4685		db	0x4f
4686		db	0x52
4687		db	0x20
4688		db	0x59
4689		db	0x3d
468a		db	0x30
468b		db	0x20
468c		db	0x54
468d		db	0x4f
468e		db	0x20
468f		db	0x59
4690		db	0x44
4691		db	0x20
4692		db	0x20
4693		db	0x20
4694		db	0x20
4695		db	0x20
4696		db	0x20
4697		db	0x20
4698		db	0x20
4699		db	0x20
469a		db	0x20
469b		db	0x20
469c		db	0x20
469d		db	0x20
469e		db	0x20
469f		db	0
46a0		db	0x31
46a1		db	0x36
46a2		db	0x32
46a3		db	0x20
46a4		db	0x4c
46a5		db	0x4e
46a6		db	0x3d
46a7		db	0x30
46a8		db	0x20
46a9		db	0x20
46aa		db	0x20
46ab		db	0x20
46ac		db	0x20
46ad		db	0x20
46ae		db	0x20
46af		db	0x20
46b0		db	0x20
46b1		db	0x20
46b2		db	0x20
46b3		db	0x20
46b4		db	0x20
46b5		db	0x20
46b6		db	0x20
46b7		db	0x20
46b8		db	0x20
46b9		db	0x20
46ba		db	0x20
46bb		db	0x20
46bc		db	0x20
46bd		db	0x20
46be		db	0x20
46bf		db	0
46c0		db	0x31
46c1		db	0x36
46c2		db	0x33
46c3		db	0x20
46c4		db	0x46
46c5		db	0x4f
46c6		db	0x52
46c7		db	0x20
46c8		db	0x44
46c9		db	0x58
46ca		db	0x3d
46cb		db	0x32
46cc		db	0x35
46cd		db	0x35
46ce		db	0x20
46cf		db	0x54
46d0		db	0x4f
46d1		db	0x20
46d2		db	0x32
46d3		db	0x20
46d4		db	0x20
46d5		db	0x20
46d6		db	0x20
46d7		db	0x20
46d8		db	0x20
46d9		db	0x20
46da		db	0x20
46db		db	0x20
46dc		db	0x20
46dd		db	0x20
46de		db	0x20
46df		db	0
46e0		db	0x31
46e1		db	0x36
46e2		db	0x34
46e3		db	0x20
46e4		db	0x46
46e5		db	0x4f
46e6		db	0x52
46e7		db	0x20
46e8		db	0x44
46e9		db	0x59
46ea		db	0x3d
46eb		db	0x32
46ec		db	0x35
46ed		db	0x35
46ee		db	0x20
46ef		db	0x54
46f0		db	0x4f
46f1		db	0x20
46f2		db	0x32
46f3		db	0x20
46f4		db	0x20
46f5		db	0x20
46f6		db	0x20
46f7		db	0x20
46f8		db	0x20
46f9		db	0x20
46fa		db	0x20
46fb		db	0x20
46fc		db	0x20
46fd		db	0x20
46fe		db	0x20
46ff		db	0
4700		db	0x31
4701		db	0x36
4702		db	0x35
4703		db	0x20
4704		db	0x49
4705		db	0x46
4706		db	0x20
4707		db	0x44
4708		db	0x58
4709		db	0x21
470a		db	0x30
470b		db	0x20
470c		db	0x54
470d		db	0x48
470e		db	0x45
470f		db	0x4e
4710		db	0x20
4711		db	0x47
4712		db	0x4f
4713		db	0x54
4714		db	0x4f
4715		db	0x20
4716		db	0x31
4717		db	0x36
4718		db	0x38
4719		db	0x20
471a		db	0x20
471b		db	0x20
471c		db	0x20
471d		db	0x20
471e		db	0x20
471f		db	0
4720		db	0x31
4721		db	0x36
4722		db	0x36
4723		db	0x20
4724		db	0x49
4725		db	0x46
4726		db	0x20
4727		db	0x44
4728		db	0x59
4729		db	0x21
472a		db	0x30
472b		db	0x20
472c		db	0x54
472d		db	0x48
472e		db	0x45
472f		db	0x4e
4730		db	0x20
4731		db	0x47
4732		db	0x4f
4733		db	0x54
4734		db	0x4f
4735		db	0x20
4736		db	0x31
4737		db	0x36
4738		db	0x38
4739		db	0x20
473a		db	0x20
473b		db	0x20
473c		db	0x20
473d		db	0x20
473e		db	0x20
473f		db	0
4740		db	0x31
4741		db	0x36
4742		db	0x37
4743		db	0x20
4744		db	0x47
4745		db	0x4f
4746		db	0x54
4747		db	0x4f
4748		db	0x20
4749		db	0x31
474a		db	0x37
474b		db	0x38
474c		db	0x20
474d		db	0x20
474e		db	0x20
474f		db	0x20
4750		db	0x20
4751		db	0x20
4752		db	0x20
4753		db	0x20
4754		db	0x20
4755		db	0x20
4756		db	0x20
4757		db	0x20
4758		db	0x20
4759		db	0x20
475a		db	0x20
475b		db	0x20
475c		db	0x20
475d		db	0x20
475e		db	0x20
475f		db	0	

4760		db	0x31
4761		db	0x36
4762		db	0x38
4763		db	0x20
4764		db	0x58
4765		db	0x41
4766		db	0x44
4767		db	0x4a
4768		db	0x3d
4769		db	0x58
476a		db	0x2b
476b		db	0x44
476c		db	0x58
476d		db	0x20
476e		db	0x20
476f		db	0x20
4770		db	0x20
4771		db	0x20
4772		db	0x20
4773		db	0x20
4774		db	0x20
4775		db	0x20
4776		db	0x20
4777		db	0x20
4778		db	0x20
4779		db	0x20
477a		db	0x20
477b		db	0x20
477c		db	0x20
477d		db	0x20
477e		db	0x20
477f		db	0
4780		db	0x31
4781		db	0x36
4782		db	0x39
4783		db	0x20
4784		db	0x59
4785		db	0x41
4786		db	0x44
4787		db	0x4a
4788		db	0x3d
4789		db	0x59
478a		db	0x2b
478b		db	0x44
478c		db	0x59
478d		db	0x20
478e		db	0x20
478f		db	0x20
4790		db	0x20
4791		db	0x20
4792		db	0x20
4793		db	0x20
4794		db	0x20
4795		db	0x20
4796		db	0x20
4797		db	0x20
4798		db	0x20
4799		db	0x20
479a		db	0x20
479b		db	0x20
479c		db	0x20
479d		db	0x20
479e		db	0x20
479f		db	0
47a0		db	0x31
47a1		db	0x37
47a2		db	0x30
47a3		db	0x20
47a4		db	0x49
47a5		db	0x46
47a6		db	0x20
47a7		db	0x58
47a8		db	0x41
47a9		db	0x44
47aa		db	0x4a
47ab		db	0x3c
47ac		db	0x30
47ad		db	0x20
47ae		db	0x54
47af		db	0x48
47b0		db	0x45
47b1		db	0x4e
47b2		db	0x20
47b3		db	0x47
47b4		db	0x4f
47b5		db	0x54
47b6		db	0x4f
47b7		db	0x20
47b8		db	0x31
47b9		db	0x37
47ba		db	0x38
47bb		db	0x20
47bc		db	0x20
47bd		db	0x20
47be		db	0x20
47bf		db	0
47c0		db	0x31
47c1		db	0x37
47c2		db	0x31
47c3		db	0x20
47c4		db	0x49
47c5		db	0x46
47c6		db	0x20
47c7		db	0x58
47c8		db	0x41
47c9		db	0x44
47ca		db	0x4a
47cb		db	0x3e
47cc		db	0x58
47cd		db	0x44
47ce		db	0x2d
47cf		db	0x31
47d0		db	0x20
47d1		db	0x54
47d2		db	0x48
47d3		db	0x45
47d4		db	0x4e
47d5		db	0x20
47d6		db	0x47
47d7		db	0x4f
47d8		db	0x54
47d9		db	0x4f
47da		db	0x20
47db		db	0x31
47dc		db	0x37
47dd		db	0x38
47de		db	0x20
47df		db	0
47e0		db	0x31
47e1		db	0x37
47e2		db	0x32
47e3		db	0x20
47e4		db	0x49
47e5		db	0x46
47e6		db	0x20
47e7		db	0x59
47e8		db	0x41
47e9		db	0x44
47ea		db	0x4a
47eb		db	0x3c
47ec		db	0x30
47ed		db	0x20
47ee		db	0x54
47ef		db	0x48
47f0		db	0x45
47f1		db	0x4e
47f2		db	0x20
47f3		db	0x47
47f4		db	0x4f
47f5		db	0x54
47f6		db	0x4f
47f7		db	0x20
47f8		db	0x31
47f9		db	0x37
47fa		db	0x38
47fb		db	0x20
47fc		db	0x20
47fd		db	0x20
47fe		db	0x20
47ff		db	0
4800		db	0x31
4801		db	0x37
4802		db	0x33
4803		db	0x20
4804		db	0x49
4805		db	0x46
4806		db	0x20
4807		db	0x59
4808		db	0x41
4809		db	0x44
480a		db	0x4a
480b		db	0x3e
480c		db	0x59
480d		db	0x44
480e		db	0x2d
480f		db	0x31
4810		db	0x20
4811		db	0x54
4812		db	0x48
4813		db	0x45
4814		db	0x4e
4815		db	0x20
4816		db	0x47
4817		db	0x4f
4818		db	0x54
4819		db	0x4f
481a		db	0x20
481b		db	0x31
481c		db	0x37
481d		db	0x38
481e		db	0x20
481f		db	0
4820		db	0x31
4821		db	0x37
4822		db	0x30
4823		db	0x20
4824		db	0x49
4825		db	0x46
4826		db	0x20
4827		db	0x58
4828		db	0x41
4829		db	0x44
482a		db	0x4a
482b		db	0x3c
482c		db	0x30
482d		db	0x20
482e		db	0x54
482f		db	0x48
4830		db	0x45
4831		db	0x4e
4832		db	0x20
4833		db	0x58
4834		db	0x41
4835		db	0x44
4836		db	0x4a
4837		db	0x3d
4838		db	0x58
4839		db	0x44
483a		db	0x2d
483b		db	0x31
483c		db	0x20
483d		db	0x20
483e		db	0x20
483f		db	0
4840		db	0x31
4841		db	0x37
4842		db	0x31
4843		db	0x20
4844		db	0x49
4845		db	0x46
4846		db	0x20
4847		db	0x58
4848		db	0x41
4849		db	0x44
484a		db	0x4a
484b		db	0x3e
484c		db	0x58
484d		db	0x44
484e		db	0x2d
484f		db	0x31
4850		db	0x20
4851		db	0x54
4852		db	0x48
4853		db	0x45
4854		db	0x4e
4855		db	0x20
4856		db	0x58
4857		db	0x41
4858		db	0x44
4859		db	0x4a
485a		db	0x3d
485b		db	0x30
485c		db	0x20
485d		db	0x20
485e		db	0x20
485f		db	0
4860		db	0x31
4861		db	0x37
4862		db	0x32
4863		db	0x20
4864		db	0x49
4865		db	0x46
4866		db	0x20
4867		db	0x59
4868		db	0x41
4869		db	0x44
486a		db	0x4a
486b		db	0x3c
486c		db	0x30
486d		db	0x20
486e		db	0x54
486f		db	0x48
4870		db	0x45
4871		db	0x4e
4872		db	0x20
4873		db	0x59
4874		db	0x41
4875		db	0x44
4876		db	0x4a
4877		db	0x3d
4878		db	0x59
4879		db	0x44
487a		db	0x2d
487b		db	0x31
487c		db	0x20
487d		db	0x20
487e		db	0x20
487f		db	0
4880		db	0x31
4881		db	0x37
4882		db	0x33
4883		db	0x20
4884		db	0x49
4885		db	0x46
4886		db	0x20
4887		db	0x59
4888		db	0x41
4889		db	0x44
488a		db	0x4a
488b		db	0x3e
488c		db	0x59
488d		db	0x44
488e		db	0x2d
488f		db	0x31
4890		db	0x20
4891		db	0x54
4892		db	0x48
4893		db	0x45
4894		db	0x4e
4895		db	0x20
4896		db	0x59
4897		db	0x41
4898		db	0x44
4899		db	0x4a
489a		db	0x3d
489b		db	0x30
489c		db	0x20
489d		db	0x20
489e		db	0x20
489f		db	0	

48a0		db	0x31
48a1		db	0x37
48a2		db	0x34
48a3		db	0x20
48a4		db	0x49
48a5		db	0x3d
48a6		db	0x59
48a7		db	0x41
48a8		db	0x44
48a9		db	0x4a
48aa		db	0x2a
48ab		db	0x58
48ac		db	0x44
48ad		db	0x20
48ae		db	0x20
48af		db	0x20
48b0		db	0x20
48b1		db	0x20
48b2		db	0x20
48b3		db	0x20
48b4		db	0x20
48b5		db	0x20
48b6		db	0x20
48b7		db	0x20
48b8		db	0x20
48b9		db	0x20
48ba		db	0x20
48bb		db	0x20
48bc		db	0x20
48bd		db	0x20
48be		db	0x20
48bf		db	0
48c0		db	0x31
48c1		db	0x37
48c2		db	0x35
48c3		db	0x20
48c4		db	0x49
48c5		db	0x3d
48c6		db	0x49
48c7		db	0x2b
48c8		db	0x58
48c9		db	0x41
48ca		db	0x44
48cb		db	0x4a
48cc		db	0x20
48cd		db	0x20
48ce		db	0x20
48cf		db	0x20
48d0		db	0x20
48d1		db	0x20
48d2		db	0x20
48d3		db	0x20
48d4		db	0x20
48d5		db	0x20
48d6		db	0x20
48d7		db	0x20
48d8		db	0x20
48d9		db	0x20
48da		db	0x20
48db		db	0x20
48dc		db	0x20
48dd		db	0x20
48de		db	0x20
48df		db	0
48e0		db	0x31
48e1		db	0x37
48e2		db	0x36
48e3		db	0x20
48e4		db	0x50
48e5		db	0x45
48e6		db	0x45
48e7		db	0x4b
48e8		db	0x20
48e9		db	0x43
48ea		db	0x50
48eb		db	0x41
48ec		db	0x47
48ed		db	0x45
48ee		db	0x2c
48ef		db	0x49
48f0		db	0x2c
48f1		db	0x4e
48f2		db	0x20
48f3		db	0x20
48f4		db	0x20
48f5		db	0x20
48f6		db	0x20
48f7		db	0x20
48f8		db	0x20
48f9		db	0x20
48fa		db	0x20
48fb		db	0x20
48fc		db	0x20
48fd		db	0x20
48fe		db	0x20
48ff		db	0
4900		db	0x31
4901		db	0x37
4902		db	0x37
4903		db	0x20
4904		db	0x4c
4905		db	0x4e
4906		db	0x3d
4907		db	0x4c
4908		db	0x4e
4909		db	0x2b
490a		db	0x4e
490b		db	0x20
490c		db	0x20
490d		db	0x20
490e		db	0x20
490f		db	0x20
4910		db	0x20
4911		db	0x20
4912		db	0x20
4913		db	0x20
4914		db	0x20
4915		db	0x20
4916		db	0x20
4917		db	0x20
4918		db	0x20
4919		db	0x20
491a		db	0x20
491b		db	0x20
491c		db	0x20
491d		db	0x20
491e		db	0x20
491f		db	0
4920		db	0x31
4921		db	0x37
4922		db	0x38
4923		db	0x20
4924		db	0x4e
4925		db	0x45
4926		db	0x58
4927		db	0x54
4928		db	0x20
4929		db	0x44
492a		db	0x59
492b		db	0x20
492c		db	0x20
492d		db	0x20
492e		db	0x20
492f		db	0x20
4930		db	0x20
4931		db	0x20
4932		db	0x20
4933		db	0x20
4934		db	0x20
4935		db	0x20
4936		db	0x20
4937		db	0x20
4938		db	0x20
4939		db	0x20
493a		db	0x20
493b		db	0x20
493c		db	0x20
493d		db	0x20
493e		db	0x20
493f		db	0
4940		db	0x31
4941		db	0x37
4942		db	0x39
4943		db	0x20
4944		db	0x4e
4945		db	0x45
4946		db	0x58
4947		db	0x54
4948		db	0x20
4949		db	0x44
494a		db	0x58
494b		db	0x20
494c		db	0x20
494d		db	0x20
494e		db	0x20
494f		db	0x20
4950		db	0x20
4951		db	0x20
4952		db	0x20
4953		db	0x20
4954		db	0x20
4955		db	0x20
4956		db	0x20
4957		db	0x20
4958		db	0x20
4959		db	0x20
495a		db	0x20
495b		db	0x20
495c		db	0x20
495d		db	0x20
495e		db	0x20
495f		db	0
4960		db	0x31
4961		db	0x38
4962		db	0x30
4963		db	0x20
4964		db	0x41
4965		db	0x44
4966		db	0x44
4967		db	0x52
4968		db	0x3d
4969		db	0x59
496a		db	0x2a
496b		db	0x58
496c		db	0x44
496d		db	0x2b
496e		db	0x58
496f		db	0x20
4970		db	0x20
4971		db	0x20
4972		db	0x20
4973		db	0x20
4974		db	0x20
4975		db	0x20
4976		db	0x20
4977		db	0x20
4978		db	0x20
4979		db	0x20
497a		db	0x20
497b		db	0x20
497c		db	0x20
497d		db	0x20
497e		db	0x20
497f		db	0
4980		db	0x31
4981		db	0x38
4982		db	0x31
4983		db	0x20
4984		db	0x49
4985		db	0x46
4986		db	0x20
4987		db	0x4c
4988		db	0x4e
4989		db	0x3d
498a		db	0x33
498b		db	0x20
498c		db	0x54
498d		db	0x48
498e		db	0x45
498f		db	0x4e
4990		db	0x20
4991		db	0x47
4992		db	0x4f
4993		db	0x54
4994		db	0x4f
4995		db	0x20
4996		db	0x31
4997		db	0x38
4998		db	0x37
4999		db	0x20
499a		db	0x20
499b		db	0x20
499c		db	0x20
499d		db	0x20
499e		db	0x20
499f		db	0
49a0		db	0x31
49a1		db	0x38
49a2		db	0x32
49a3		db	0x20
49a4		db	0x50
49a5		db	0x45
49a6		db	0x45
49a7		db	0x4b
49a8		db	0x20
49a9		db	0x43
49aa		db	0x50
49ab		db	0x41
49ac		db	0x47
49ad		db	0x45
49ae		db	0x2c
49af		db	0x41
49b0		db	0x44
49b1		db	0x44
49b2		db	0x52
49b3		db	0x2c
49b4		db	0x43
49b5		db	0x20
49b6		db	0x20
49b7		db	0x20
49b8		db	0x20
49b9		db	0x20
49ba		db	0x20
49bb		db	0x20
49bc		db	0x20
49bd		db	0x20
49be		db	0x20
49bf		db	0
49c0		db	0x31
49c1		db	0x38
49c2		db	0x33
49c3		db	0x20
49c4		db	0x49
49c5		db	0x46
49c6		db	0x20
49c7		db	0x43
49c8		db	0x3d
49c9		db	0x30
49ca		db	0x20
49cb		db	0x54
49cc		db	0x48
49cd		db	0x45
49ce		db	0x4e
49cf		db	0x20
49d0		db	0x47
49d1		db	0x4f
49d2		db	0x54
49d3		db	0x4f
49d4		db	0x20
49d5		db	0x31
49d6		db	0x38
49d7		db	0x35
49d8		db	0x20
49d9		db	0x20
49da		db	0x20
49db		db	0x20
49dc		db	0x20
49dd		db	0x20
49de		db	0x20
49df		db	0
49e0		db	0x31
49e1		db	0x38
49e2		db	0x34
49e3		db	0x20
49e4		db	0x49
49e5		db	0x46
49e6		db	0x20
49e7		db	0x4c
49e8		db	0x4e
49e9		db	0x3d
49ea		db	0x32
49eb		db	0x20
49ec		db	0x54
49ed		db	0x48
49ee		db	0x45
49ef		db	0x4e
49f0		db	0x20
49f1		db	0x47
49f2		db	0x4f
49f3		db	0x54
49f4		db	0x4f
49f5		db	0x20
49f6		db	0x31
49f7		db	0x38
49f8		db	0x37
49f9		db	0x20
49fa		db	0x20
49fb		db	0x20
49fc		db	0x20
49fd		db	0x20
49fe		db	0x20
49ff		db	0
4a00		db	0x31
4a01		db	0x38
4a02		db	0x35
4a03		db	0x20
4a04		db	0x50
4a05		db	0x4f
4a06		db	0x4b
4a07		db	0x45
4a08		db	0x20
4a09		db	0x4e
4a0a		db	0x50
4a0b		db	0x41
4a0c		db	0x47
4a0d		db	0x45
4a0e		db	0x2c
4a0f		db	0x41
4a10		db	0x44
4a11		db	0x44
4a12		db	0x52
4a13		db	0x2c
4a14		db	0x30
4a15		db	0x20
4a16		db	0x20
4a17		db	0x20
4a18		db	0x20
4a19		db	0x20
4a1a		db	0x20
4a1b		db	0x20
4a1c		db	0x20
4a1d		db	0x20
4a1e		db	0x20
4a1f		db	0
4a20		db	0x31
4a21		db	0x38
4a22		db	0x36
4a23		db	0x20
4a24		db	0x47
4a25		db	0x4f
4a26		db	0x54
4a27		db	0x4f
4a28		db	0x20
4a29		db	0x31
4a2a		db	0x38
4a2b		db	0x38
4a2c		db	0x20
4a2d		db	0x20
4a2e		db	0x20
4a2f		db	0x20
4a30		db	0x20
4a31		db	0x20
4a32		db	0x20
4a33		db	0x20
4a34		db	0x20
4a35		db	0x20
4a36		db	0x20
4a37		db	0x20
4a38		db	0x20
4a39		db	0x20
4a3a		db	0x20
4a3b		db	0x20
4a3c		db	0x20
4a3d		db	0x20
4a3e		db	0x20
4a3f		db	0
4a40		db	0x31
4a41		db	0x38
4a42		db	0x37
4a43		db	0x20
4a44		db	0x50
4a45		db	0x4f
4a46		db	0x4b
4a47		db	0x45
4a48		db	0x20
4a49		db	0x4e
4a4a		db	0x50
4a4b		db	0x41
4a4c		db	0x47
4a4d		db	0x45
4a4e		db	0x2c
4a4f		db	0x41
4a50		db	0x44
4a51		db	0x44
4a52		db	0x52
4a53		db	0x2c
4a54		db	0x31
4a55		db	0x20
4a56		db	0x20
4a57		db	0x20
4a58		db	0x20
4a59		db	0x20
4a5a		db	0x20
4a5b		db	0x20
4a5c		db	0x20
4a5d		db	0x20
4a5e		db	0x20
4a5f		db	0
4a60		db	0x31
4a61		db	0x38
4a62		db	0x38
4a63		db	0x20
4a64		db	0x4e
4a65		db	0x45
4a66		db	0x58
4a67		db	0x54
4a68		db	0x20
4a69		db	0x59
4a6a		db	0x20
4a6b		db	0x20
4a6c		db	0x20
4a6d		db	0x20
4a6e		db	0x20
4a6f		db	0x20
4a70		db	0x20
4a71		db	0x20
4a72		db	0x20
4a73		db	0x20
4a74		db	0x20
4a75		db	0x20
4a76		db	0x20
4a77		db	0x20
4a78		db	0x20
4a79		db	0x20
4a7a		db	0x20
4a7b		db	0x20
4a7c		db	0x20
4a7d		db	0x20
4a7e		db	0x20
4a7f		db	0
4a80		db	0x31
4a81		db	0x38
4a82		db	0x39
4a83		db	0x20
4a84		db	0x4e
4a85		db	0x45
4a86		db	0x58
4a87		db	0x54
4a88		db	0x20
4a89		db	0x58
4a8a		db	0x20
4a8b		db	0x20
4a8c		db	0x20
4a8d		db	0x20
4a8e		db	0x20
4a8f		db	0x20
4a90		db	0x20
4a91		db	0x20
4a92		db	0x20
4a93		db	0x20
4a94		db	0x20
4a95		db	0x20
4a96		db	0x20
4a97		db	0x20
4a98		db	0x20
4a99		db	0x20
4a9a		db	0x20
4a9b		db	0x20
4a9c		db	0x20
4a9d		db	0x20
4a9e		db	0x20
4a9f		db	0
4aa0		db	0x31
4aa1		db	0x39
4aa2		db	0x30
4aa3		db	0x20
4aa4		db	0x54
4aa5		db	0x4d
4aa6		db	0x50
4aa7		db	0x3d
4aa8		db	0x43
4aa9		db	0x50
4aaa		db	0x41
4aab		db	0x47
4aac		db	0x45
4aad		db	0x20
4aae		db	0x20
4aaf		db	0x20
4ab0		db	0x20
4ab1		db	0x20
4ab2		db	0x20
4ab3		db	0x20
4ab4		db	0x20
4ab5		db	0x20
4ab6		db	0x20
4ab7		db	0x20
4ab8		db	0x20
4ab9		db	0x20
4aba		db	0x20
4abb		db	0x20
4abc		db	0x20
4abd		db	0x20
4abe		db	0x20
4abf		db	0
4ac0		db	0x31
4ac1		db	0x39
4ac2		db	0x31
4ac3		db	0x20
4ac4		db	0x43
4ac5		db	0x50
4ac6		db	0x41
4ac7		db	0x47
4ac8		db	0x45
4ac9		db	0x3d
4aca		db	0x4e
4acb		db	0x50
4acc		db	0x41
4acd		db	0x47
4ace		db	0x45
4acf		db	0x20
4ad0		db	0x20
4ad1		db	0x20
4ad2		db	0x20
4ad3		db	0x20
4ad4		db	0x20
4ad5		db	0x20
4ad6		db	0x20
4ad7		db	0x20
4ad8		db	0x20
4ad9		db	0x20
4ada		db	0x20
4adb		db	0x20
4adc		db	0x20
4add		db	0x20
4ade		db	0x20
4adf		db	0
4ae0		db	0x31
4ae1		db	0x39
4ae2		db	0x32
4ae3		db	0x20
4ae4		db	0x4e
4ae5		db	0x50
4ae6		db	0x41
4ae7		db	0x47
4ae8		db	0x45
4ae9		db	0x3d
4aea		db	0x54
4aeb		db	0x4d
4aec		db	0x50
4aed		db	0x20
4aee		db	0x20
4aef		db	0x20
4af0		db	0x20
4af1		db	0x20
4af2		db	0x20
4af3		db	0x20
4af4		db	0x20
4af5		db	0x20
4af6		db	0x20
4af7		db	0x20
4af8		db	0x20
4af9		db	0x20
4afa		db	0x20
4afb		db	0x20
4afc		db	0x20
4afd		db	0x20
4afe		db	0x20
4aff		db	0
4b00		db	0x31
4b01		db	0x39
4b02		db	0x33
4b03		db	0x20
4b04		db	0x52
4b05		db	0x45
4b06		db	0x54
4b07		db	0x55
4b08		db	0x52
4b09		db	0x4e
4b0a		db	0x20
4b0b		db	0x20
4b0c		db	0x20
4b0d		db	0x20
4b0e		db	0x20
4b0f		db	0x20
4b10		db	0x20
4b11		db	0x20
4b12		db	0x20
4b13		db	0x20
4b14		db	0x20
4b15		db	0x20
4b16		db	0x20
4b17		db	0x20
4b18		db	0x20
4b19		db	0x20
4b1a		db	0x20
4b1b		db	0x20
4b1c		db	0x20
4b1d		db	0x20
4b1e		db	0x20
4b1f		db	0	

4b20		db	0x32
4b21		db	0x30
4b22		db	0x38
4b23		db	0x20
4b24		db	0x43
4b25		db	0x4c
4b26		db	0x53
4b27		db	0x20
4b28		db	0x20
4b29		db	0x20
4b2a		db	0x20
4b2b		db	0x20
4b2c		db	0x20
4b2d		db	0x20
4b2e		db	0x20
4b2f		db	0x20
4b30		db	0x20
4b31		db	0x20
4b32		db	0x20
4b33		db	0x20
4b34		db	0x20
4b35		db	0x20
4b36		db	0x20
4b37		db	0x20
4b38		db	0x20
4b39		db	0x20
4b3a		db	0x20
4b3b		db	0x20
4b3c		db	0x20
4b3d		db	0x20
4b3e		db	0x20
4b3f		db	0
4b40		db	0x32
4b41		db	0x30
4b42		db	0x39
4b43		db	0x20
4b44		db	0x50
4b45		db	0x52
4b46		db	0x49
4b47		db	0x4e
4b48		db	0x54
4b49		db	0x20
4b4a		db	0x22
4b4b		db	0x20
4b4c		db	0x20
4b4d		db	0x47
4b4e		db	0x45
4b4f		db	0x4e
4b50		db	0x45
4b51		db	0x52
4b52		db	0x41
4b53		db	0x54
4b54		db	0x49
4b55		db	0x4f
4b56		db	0x4e
4b57		db	0x20
4b58		db	0x22
4b59		db	0x2c
4b5a		db	0x47
4b5b		db	0x45
4b5c		db	0x4e
4b5d		db	0x20
4b5e		db	0x20
4b5f		db	0
4b60		db	0x32
4b61		db	0x31
4b62		db	0x30
4b63		db	0x20
4b64		db	0x46
4b65		db	0x4f
4b66		db	0x52
4b67		db	0x20
4b68		db	0x59
4b69		db	0x3d
4b6a		db	0x30
4b6b		db	0x20
4b6c		db	0x54
4b6d		db	0x4f
4b6e		db	0x20
4b6f		db	0x59
4b70		db	0x44
4b71		db	0x20
4b72		db	0x20
4b73		db	0x20
4b74		db	0x20
4b75		db	0x20
4b76		db	0x20
4b77		db	0x20
4b78		db	0x20
4b79		db	0x20
4b7a		db	0x20
4b7b		db	0x20
4b7c		db	0x20
4b7d		db	0x20
4b7e		db	0x20
4b7f		db	0
4b80		db	0x32
4b81		db	0x31
4b82		db	0x31
4b83		db	0x20
4b84		db	0x50
4b85		db	0x52
4b86		db	0x49
4b87		db	0x4e
4b88		db	0x54
4b89		db	0x20
4b8a		db	0x22
4b8b		db	0x20
4b8c		db	0x20
4b8d		db	0x22
4b8e		db	0x3b
4b8f		db	0x20
4b90		db	0x20
4b91		db	0x20
4b92		db	0x20
4b93		db	0x20
4b94		db	0x20
4b95		db	0x20
4b96		db	0x20
4b97		db	0x20
4b98		db	0x20
4b99		db	0x20
4b9a		db	0x20
4b9b		db	0x20
4b9c		db	0x20
4b9d		db	0x20
4b9e		db	0x20
4b9f		db	0
4ba0		db	0x32
4ba1		db	0x31
4ba2		db	0x32
4ba3		db	0x20
4ba4		db	0x46
4ba5		db	0x4f
4ba6		db	0x52
4ba7		db	0x20
4ba8		db	0x58
4ba9		db	0x3d
4baa		db	0x30
4bab		db	0x20
4bac		db	0x54
4bad		db	0x4f
4bae		db	0x20
4baf		db	0x58
4bb0		db	0x44
4bb1		db	0x20
4bb2		db	0x20
4bb3		db	0x20
4bb4		db	0x20
4bb5		db	0x20
4bb6		db	0x20
4bb7		db	0x20
4bb8		db	0x20
4bb9		db	0x20
4bba		db	0x20
4bbb		db	0x20
4bbc		db	0x20
4bbd		db	0x20
4bbe		db	0x20
4bbf		db	0
4bc0		db	0x32
4bc1		db	0x31
4bc2		db	0x33
4bc3		db	0x20
4bc4		db	0x41
4bc5		db	0x44
4bc6		db	0x44
4bc7		db	0x52
4bc8		db	0x3d
4bc9		db	0x59
4bca		db	0x2a
4bcb		db	0x58
4bcc		db	0x44
4bcd		db	0x2b
4bce		db	0x58
4bcf		db	0x20
4bd0		db	0x20
4bd1		db	0x20
4bd2		db	0x20
4bd3		db	0x20
4bd4		db	0x20
4bd5		db	0x20
4bd6		db	0x20
4bd7		db	0x20
4bd8		db	0x20
4bd9		db	0x20
4bda		db	0x20
4bdb		db	0x20
4bdc		db	0x20
4bdd		db	0x20
4bde		db	0x20
4bdf		db	0
4be0		db	0x32
4be1		db	0x31
4be2		db	0x34
4be3		db	0x20
4be4		db	0x50
4be5		db	0x45
4be6		db	0x45
4be7		db	0x4b
4be8		db	0x20
4be9		db	0x43
4bea		db	0x50
4beb		db	0x41
4bec		db	0x47
4bed		db	0x45
4bee		db	0x2c
4bef		db	0x41
4bf0		db	0x44
4bf1		db	0x44
4bf2		db	0x52
4bf3		db	0x2c
4bf4		db	0x50
4bf5		db	0x20
4bf6		db	0x20
4bf7		db	0x20
4bf8		db	0x20
4bf9		db	0x20
4bfa		db	0x20
4bfb		db	0x20
4bfc		db	0x20
4bfd		db	0x20
4bfe		db	0x20
4bff		db	0
4c00		db	0x32
4c01		db	0x31
4c02		db	0x35
4c03		db	0x20
4c04		db	0x49
4c05		db	0x46
4c06		db	0x20
4c07		db	0x50
4c08		db	0x3d
4c09		db	0x30
4c0a		db	0x20
4c0b		db	0x54
4c0c		db	0x48
4c0d		db	0x45
4c0e		db	0x4e
4c0f		db	0x20
4c10		db	0x47
4c11		db	0x4f
4c12		db	0x54
4c13		db	0x4f
4c14		db	0x20
4c15		db	0x32
4c16		db	0x31
4c17		db	0x38
4c18		db	0x20
4c19		db	0x20
4c1a		db	0x20
4c1b		db	0x20
4c1c		db	0x20
4c1d		db	0x20
4c1e		db	0x20
4c1f		db	0
4c20		db	0x32
4c21		db	0x31
4c22		db	0x36
4c23		db	0x20
4c24		db	0x50
4c25		db	0x52
4c26		db	0x49
4c27		db	0x4e
4c28		db	0x54
4c29		db	0x20
4c2a		db	0x22
4c2b		db	0x2a
4c2c		db	0x22
4c2d		db	0x3b
4c2e		db	0x20
4c2f		db	0x20
4c30		db	0x20
4c31		db	0x20
4c32		db	0x20
4c33		db	0x20
4c34		db	0x20
4c35		db	0x20
4c36		db	0x20
4c37		db	0x20
4c38		db	0x20
4c39		db	0x20
4c3a		db	0x20
4c3b		db	0x20
4c3c		db	0x20
4c3d		db	0x20
4c3e		db	0x20
4c3f		db	0
4c40		db	0x32
4c41		db	0x31
4c42		db	0x37
4c43		db	0x20
4c44		db	0x47
4c45		db	0x4f
4c46		db	0x54
4c47		db	0x4f
4c48		db	0x20
4c49		db	0x32
4c4a		db	0x31
4c4b		db	0x39
4c4c		db	0x20
4c4d		db	0x20
4c4e		db	0x20
4c4f		db	0x20
4c50		db	0x20
4c51		db	0x20
4c52		db	0x20
4c53		db	0x20
4c54		db	0x20
4c55		db	0x20
4c56		db	0x20
4c57		db	0x20
4c58		db	0x20
4c59		db	0x20
4c5a		db	0x20
4c5b		db	0x20
4c5c		db	0x20
4c5d		db	0x20
4c5e		db	0x20
4c5f		db	0
4c60		db	0x32
4c61		db	0x31
4c62		db	0x38
4c63		db	0x20
4c64		db	0x50
4c65		db	0x52
4c66		db	0x49
4c67		db	0x4e
4c68		db	0x54
4c69		db	0x20
4c6a		db	0x22
4c6b		db	0x2e
4c6c		db	0x22
4c6d		db	0x3b
4c6e		db	0x20
4c6f		db	0x20
4c70		db	0x20
4c71		db	0x20
4c72		db	0x20
4c73		db	0x20
4c74		db	0x20
4c75		db	0x20
4c76		db	0x20
4c77		db	0x20
4c78		db	0x20
4c79		db	0x20
4c7a		db	0x20
4c7b		db	0x20
4c7c		db	0x20
4c7d		db	0x20
4c7e		db	0x20
4c7f		db	0
4c80		db	0x32
4c81		db	0x31
4c82		db	0x39
4c83		db	0x20
4c84		db	0x4e
4c85		db	0x45
4c86		db	0x58
4c87		db	0x54
4c88		db	0x20
4c89		db	0x58
4c8a		db	0x20
4c8b		db	0x20
4c8c		db	0x20
4c8d		db	0x20
4c8e		db	0x20
4c8f		db	0x20
4c90		db	0x20
4c91		db	0x20
4c92		db	0x20
4c93		db	0x20
4c94		db	0x20
4c95		db	0x20
4c96		db	0x20
4c97		db	0x20
4c98		db	0x20
4c99		db	0x20
4c9a		db	0x20
4c9b		db	0x20
4c9c		db	0x20
4c9d		db	0x20
4c9e		db	0x20
4c9f		db	0
4ca0		db	0x32
4ca1		db	0x32
4ca2		db	0x30
4ca3		db	0x20
4ca4		db	0x50
4ca5		db	0x52
4ca6		db	0x49
4ca7		db	0x4e
4ca8		db	0x54
4ca9		db	0x20
4caa		db	0x22
4cab		db	0x22
4cac		db	0x20
4cad		db	0x20
4cae		db	0x20
4caf		db	0x20
4cb0		db	0x20
4cb1		db	0x20
4cb2		db	0x20
4cb3		db	0x20
4cb4		db	0x20
4cb5		db	0x20
4cb6		db	0x20
4cb7		db	0x20
4cb8		db	0x20
4cb9		db	0x20
4cba		db	0x20
4cbb		db	0x20
4cbc		db	0x20
4cbd		db	0x20
4cbe		db	0x20
4cbf		db	0
4cc0		db	0x32
4cc1		db	0x32
4cc2		db	0x31
4cc3		db	0x20
4cc4		db	0x4e
4cc5		db	0x45
4cc6		db	0x58
4cc7		db	0x54
4cc8		db	0x20
4cc9		db	0x59
4cca		db	0x20
4ccb		db	0x20
4ccc		db	0x20
4ccd		db	0x20
4cce		db	0x20
4ccf		db	0x20
4cd0		db	0x20
4cd1		db	0x20
4cd2		db	0x20
4cd3		db	0x20
4cd4		db	0x20
4cd5		db	0x20
4cd6		db	0x20
4cd7		db	0x20
4cd8		db	0x20
4cd9		db	0x20
4cda		db	0x20
4cdb		db	0x20
4cdc		db	0x20
4cdd		db	0x20
4cde		db	0x20
4cdf		db	0
4ce0		db	0x32
4ce1		db	0x32
4ce2		db	0x32
4ce3		db	0x20
4ce4		db	0x50
4ce5		db	0x52
4ce6		db	0x49
4ce7		db	0x4e
4ce8		db	0x54
4ce9		db	0x20
4cea		db	0x22
4ceb		db	0x22
4cec		db	0x20
4ced		db	0x20
4cee		db	0x20
4cef		db	0x20
4cf0		db	0x20
4cf1		db	0x20
4cf2		db	0x20
4cf3		db	0x20
4cf4		db	0x20
4cf5		db	0x20
4cf6		db	0x20
4cf7		db	0x20
4cf8		db	0x20
4cf9		db	0x20
4cfa		db	0x20
4cfb		db	0x20
4cfc		db	0x20
4cfd		db	0x20
4cfe		db	0x20
4cff		db	0
4d00		db	0x32
4d01		db	0x32
4d02		db	0x33
4d03		db	0x20
4d04		db	0x52
4d05		db	0x45
4d06		db	0x54
4d07		db	0x55
4d08		db	0x52
4d09		db	0x4e
4d0a		db	0x20
4d0b		db	0x20
4d0c		db	0x20
4d0d		db	0x20
4d0e		db	0x20
4d0f		db	0x20
4d10		db	0x20
4d11		db	0x20
4d12		db	0x20
4d13		db	0x20
4d14		db	0x20
4d15		db	0x20
4d16		db	0x20
4d17		db	0x20
4d18		db	0x20
4d19		db	0x20
4d1a		db	0x20
4d1b		db	0x20
4d1c		db	0x20
4d1d		db	0x20
4d1e		db	0x20
4d1f		db	0	

4d20		db	0x32
4d21		db	0x33
4d22		db	0x30
4d23		db	0x20
4d24		db	0x50
4d25		db	0x4f
4d26		db	0x4b
4d27		db	0x45
4d28		db	0x20
4d29		db	0x43
4d2a		db	0x50
4d2b		db	0x41
4d2c		db	0x47
4d2d		db	0x45
4d2e		db	0x2c
4d2f		db	0x33
4d30		db	0x2a
4d31		db	0x58
4d32		db	0x44
4d33		db	0x2b
4d34		db	0x31
4d35		db	0x2c
4d36		db	0x31
4d37		db	0x20
4d38		db	0x20
4d39		db	0x20
4d3a		db	0x20
4d3b		db	0x20
4d3c		db	0x20
4d3d		db	0x20
4d3e		db	0x20
4d3f		db	0
4d40		db	0x32
4d41		db	0x33
4d42		db	0x31
4d43		db	0x20
4d44		db	0x50
4d45		db	0x4f
4d46		db	0x4b
4d47		db	0x45
4d48		db	0x20
4d49		db	0x43
4d4a		db	0x50
4d4b		db	0x41
4d4c		db	0x47
4d4d		db	0x45
4d4e		db	0x2c
4d4f		db	0x33
4d50		db	0x2a
4d51		db	0x58
4d52		db	0x44
4d53		db	0x2b
4d54		db	0x32
4d55		db	0x2c
4d56		db	0x31
4d57		db	0x20
4d58		db	0x20
4d59		db	0x20
4d5a		db	0x20
4d5b		db	0x20
4d5c		db	0x20
4d5d		db	0x20
4d5e		db	0x20
4d5f		db	0
4d60		db	0x32
4d61		db	0x33
4d62		db	0x32
4d63		db	0x20
4d64		db	0x50
4d65		db	0x4f
4d66		db	0x4b
4d67		db	0x45
4d68		db	0x20
4d69		db	0x43
4d6a		db	0x50
4d6b		db	0x41
4d6c		db	0x47
4d6d		db	0x45
4d6e		db	0x2c
4d6f		db	0x33
4d70		db	0x2a
4d71		db	0x58
4d72		db	0x44
4d73		db	0x2b
4d74		db	0x33
4d75		db	0x2c
4d76		db	0x31
4d77		db	0x20
4d78		db	0x20
4d79		db	0x20
4d7a		db	0x20
4d7b		db	0x20
4d7c		db	0x20
4d7d		db	0x20
4d7e		db	0x20
4d7f		db	0
4d80		db	0x32
4d81		db	0x33
4d82		db	0x33
4d83		db	0x20
4d84		db	0x52
4d85		db	0x45
4d86		db	0x54
4d87		db	0x55
4d88		db	0x52
4d89		db	0x4e
4d8a		db	0x20
4d8b		db	0x20
4d8c		db	0x20
4d8d		db	0x20
4d8e		db	0x20
4d8f		db	0x20
4d90		db	0x20
4d91		db	0x20
4d92		db	0x20
4d93		db	0x20
4d94		db	0x20
4d95		db	0x20
4d96		db	0x20
4d97		db	0x20
4d98		db	0x20
4d99		db	0x20
4d9a		db	0x20
4d9b		db	0x20
4d9c		db	0x20
4d9d		db	0x20
4d9e		db	0x20
4d9f		db	0
4da0		db	0x32
4da1		db	0x33
4da2		db	0x34
4da3		db	0x20
4da4		db	0x50
4da5		db	0x4f
4da6		db	0x4b
4da7		db	0x45
4da8		db	0x20
4da9		db	0x43
4daa		db	0x50
4dab		db	0x41
4dac		db	0x47
4dad		db	0x45
4dae		db	0x2c
4daf		db	0x31
4db0		db	0x2a
4db1		db	0x58
4db2		db	0x44
4db3		db	0x2b
4db4		db	0x32
4db5		db	0x2c
4db6		db	0x31
4db7		db	0x20
4db8		db	0x20
4db9		db	0x20
4dba		db	0x20
4dbb		db	0x20
4dbc		db	0x20
4dbd		db	0x20
4dbe		db	0x20
4dbf		db	0
4dc0		db	0x32
4dc1		db	0x33
4dc2		db	0x35
4dc3		db	0x20
4dc4		db	0x50
4dc5		db	0x4f
4dc6		db	0x4b
4dc7		db	0x45
4dc8		db	0x20
4dc9		db	0x43
4dca		db	0x50
4dcb		db	0x41
4dcc		db	0x47
4dcd		db	0x45
4dce		db	0x2c
4dcf		db	0x32
4dd0		db	0x2a
4dd1		db	0x58
4dd2		db	0x44
4dd3		db	0x2b
4dd4		db	0x33
4dd5		db	0x2c
4dd6		db	0x31
4dd7		db	0x20
4dd8		db	0x20
4dd9		db	0x20
4dda		db	0x20
4ddb		db	0x20
4ddc		db	0x20
4ddd		db	0x20
4dde		db	0x20
4ddf		db	0
4de0		db	0x32
4de1		db	0x33
4de2		db	0x36
4de3		db	0x20
4de4		db	0x50
4de5		db	0x4f
4de6		db	0x4b
4de7		db	0x45
4de8		db	0x20
4de9		db	0x43
4dea		db	0x50
4deb		db	0x41
4dec		db	0x47
4ded		db	0x45
4dee		db	0x2c
4def		db	0x33
4df0		db	0x2a
4df1		db	0x58
4df2		db	0x44
4df3		db	0x2b
4df4		db	0x31
4df5		db	0x2c
4df6		db	0x31
4df7		db	0x20
4df8		db	0x20
4df9		db	0x20
4dfa		db	0x20
4dfb		db	0x20
4dfc		db	0x20
4dfd		db	0x20
4dfe		db	0x20
4dff		db	0
4e00		db	0x32
4e01		db	0x33
4e02		db	0x37
4e03		db	0x20
4e04		db	0x50
4e05		db	0x4f
4e06		db	0x4b
4e07		db	0x45
4e08		db	0x20
4e09		db	0x43
4e0a		db	0x50
4e0b		db	0x41
4e0c		db	0x47
4e0d		db	0x45
4e0e		db	0x2c
4e0f		db	0x33
4e10		db	0x2a
4e11		db	0x58
4e12		db	0x44
4e13		db	0x2b
4e14		db	0x32
4e15		db	0x2c
4e16		db	0x31
4e17		db	0x20
4e18		db	0x20
4e19		db	0x20
4e1a		db	0x20
4e1b		db	0x20
4e1c		db	0x20
4e1d		db	0x20
4e1e		db	0x20
4e1f		db	0
4e20		db	0x32
4e21		db	0x33
4e22		db	0x38
4e23		db	0x20
4e24		db	0x50
4e25		db	0x4f
4e26		db	0x4b
4e27		db	0x45
4e28		db	0x20
4e29		db	0x43
4e2a		db	0x50
4e2b		db	0x41
4e2c		db	0x47
4e2d		db	0x45
4e2e		db	0x2c
4e2f		db	0x33
4e30		db	0x2a
4e31		db	0x58
4e32		db	0x44
4e33		db	0x2b
4e34		db	0x33
4e35		db	0x2c
4e36		db	0x31
4e37		db	0x20
4e38		db	0x20
4e39		db	0x20
4e3a		db	0x20
4e3b		db	0x20
4e3c		db	0x20
4e3d		db	0x20
4e3e		db	0x20
4e3f		db	0
4e40		db	0x32
4e41		db	0x34
4e42		db	0x30
4e43		db	0x20
4e44		db	0x52
4e45		db	0x45
4e46		db	0x54
4e47		db	0x55
4e48		db	0x52
4e49		db	0x4e
4e4a		db	0x20
4e4b		db	0x20
4e4c		db	0x20
4e4d		db	0x20
4e4e		db	0x20
4e4f		db	0x20
4e50		db	0x20
4e51		db	0x20
4e52		db	0x20
4e53		db	0x20
4e54		db	0x20
4e55		db	0x20
4e56		db	0x20
4e57		db	0x20
4e58		db	0x20
4e59		db	0x20
4e5a		db	0x20
4e5b		db	0x20
4e5c		db	0x20
4e5d		db	0x20
4e5e		db	0x20
4e5f		db	0
4e60		db	0	

4e61		org 7e00
7e00	#keychars
7e00		db	0x3d
7e01		db	0
7e02		db	0x3d
7e03		db	0
7e04		db	0x3c
7e05		db	0
7e06		db	0x3c
7e07		db	0
7e08		db	0x3e
7e09		db	0
7e0a		db	0x3e
7e0b		db	0
7e0c		db	0x2b
7e0d		db	0
7e0e		db	0x2b
7e0f		db	0
7e10		db	0x2d
7e11		db	0
7e12		db	0x2d
7e13		db	0
7e14		db	0x2a
7e15		db	0
7e16		db	0x2a
7e17		db	0
7e18		db	0x2f
7e19		db	0
7e1a		db	0x2f
7e1b		db	0
7e1c		db	0x28
7e1d		db	0
7e1e		db	0x28
7e1f		db	0
7e20		db	0x29
7e21		db	0
7e22		db	0x29
7e23		db	0
7e24		db	0x2c
7e25		db	0
7e26		db	0x2c
7e27		db	0
7e28		db	0x21
7e29		db	0
7e2a		db	0x21
7e2b		db	0
7e2c		db	0x3a
7e2d		db	0
7e2e		db	0x3a
7e2f		db	0		; ; char

7e30		db	0x3b
7e31		db	0
7e32			db	0x3b
7e33			db	0
7e34		db	0
7e35	#keywords
7e35		db	0x50
7e36		db	0x52
7e37		db	0x49
7e38		db	0x4e
7e39		db	0x54
7e3a		db	0
7e3b		db	0x50
7e3c		db	0
7e3d		db	0x49
7e3e		db	0x46
7e3f		db	0
7e40		db	0x49
7e41		db	0
7e42		db	0x54
7e43		db	0x48
7e44		db	0x45
7e45		db	0x4e
7e46		db	0
7e47		db	0x54
7e48		db	0
7e49		db	0x47
7e4a		db	0x4f
7e4b		db	0x54
7e4c		db	0x4f
7e4d		db	0
7e4e		db	0x47
7e4f		db	0
7e50		db	0x49
7e51		db	0x4e
7e52		db	0x50
7e53		db	0x55
7e54		db	0x54
7e55		db	0
7e56		db	0x69
7e57		db	0
7e58		db	0x4c
7e59		db	0x45
7e5a		db	0x54
7e5b		db	0
7e5c		db	0x4c
7e5d		db	0
7e5e		db	0x47
7e5f		db	0x4f
7e60		db	0x53
7e61		db	0x55
7e62		db	0x42
7e63		db	0
7e64		db	0x53
7e65		db	0
7e66		db	0x52
7e67		db	0x45
7e68		db	0x54
7e69		db	0x55
7e6a		db	0x52
7e6b		db	0x4e
7e6c		db	0
7e6d		db	0x52
7e6e		db	0
7e6f		db	0x4c
7e70		db	0x49
7e71		db	0x53
7e72		db	0x54
7e73		db	0
7e74		db	0x73
7e75		db	0
7e76		db	0x52
7e77		db	0x55
7e78		db	0x4e
7e79		db	0
7e7a		db	0x72
7e7b		db	0
7e7c		db	0x45
7e7d		db	0x4e
7e7e		db	0x44
7e7f		db	0
7e80		db	0x45
7e81		db	0
7e82		db	0x46
7e83		db	0x4f
7e84		db	0x52
7e85		db	0
7e86		db	0x46
7e87		db	0
7e88		db	0x54
7e89		db	0x4f
7e8a		db	0
7e8b		db	0x74
7e8c		db	0
7e8d		db	0x4e
7e8e		db	0x45
7e8f		db	0x58
7e90		db	0x54
7e91		db	0
7e92		db	0x58
7e93		db	0
7e94		db	0x53
7e95		db	0x54
7e96		db	0x45
7e97		db	0x50
7e98		db	0
7e99		db	0x70
7e9a		db	0
7e9b		db	0x52
7e9c		db	0x4e
7e9d		db	0x44
7e9e		db	0
7e9f		db	0x6e
7ea0		db	0
7ea1		db	0x43
7ea2		db	0x4c
7ea3		db	0x53
7ea4		db	0
7ea5		db	0x63
7ea6		db	0
7ea7		db	0x4c
7ea8		db	0x4f
7ea9		db	0x41
7eaa		db	0x44
7eab		db	0
7eac		db	0x64
7ead		db	0
7eae		db	0x4d
7eaf		db	0x4f
7eb0		db	0x44
7eb1		db	0
7eb2		db	0x25
7eb3		db	0
7eb4		db	0x43
7eb5		db	0x4c
7eb6		db	0x45
7eb7		db	0x41
7eb8		db	0x52
7eb9		db	0
7eba		db	0x65
7ebb		db	0
7ebc		db	0x50
7ebd		db	0x45
7ebe		db	0x45
7ebf		db	0x4b
7ec0		db	0
7ec1		db	0x6b
7ec2		db	0
7ec3		db	0x50
7ec4		db	0x4f
7ec5		db	0x4b
7ec6		db	0x45
7ec7		db	0
7ec8		db	0x4f
7ec9		db	0
7eca		db	0x55
7ecb		db	0x53
7ecc		db	0x52
7ecd		db	0
7ece		db	0x55
7ecf		db	0
7ed0		db	0
7ed1	#endtokenlist
7ed1		db	0x3b
7ed2		db	0x2c
7ed3		db	0x29
7ed4		db	0x54
7ed5		db	0x3c
7ed6		db	0x3e
7ed7		db	0x3d
7ed8		db	0x21
7ed9		db	0x3a
7eda		db	0x70
7edb		db	0x74
7edc		db	0	

7edd		org 7f00
7f00	#monitor_message
7f00		db	0x52
7f01		db	0x49
7f02		db	0x53
7f03		db	0x43
7f04		db	0x59
7f05		db	0x20
7f06		db	0x4d
7f07		db	0x4f
7f08		db	0x4e
7f09		db	0x49
7f0a		db	0x54
7f0b		db	0x4f
7f0c		db	0x52
7f0d		db	0
7f0e	#basic_message
7f0e		db	0x54
7f0f		db	0x49
7f10		db	0x4e
7f11		db	0x59
7f12		db	0x20
7f13		db	0x42
7f14		db	0x41
7f15		db	0x53
7f16		db	0x49
7f17		db	0x43
7f18		db	0
7f19	#basic_prompt
7f19		db	0x4f
7f1a		db	0x4b
7f1b		db	0
7f1c	#newline
7f1c		db	0x0d
7f1d		db	0x20
7f1e		db	0x00
7f1f	#lexical_error
7f1f		db	0x43
7f20		db	0x41
7f21		db	0x4e
7f22		db	0x4e
7f23		db	0x4f
7f24		db	0x54
7f25		db	0x20
7f26		db	0x50
7f27		db	0x41
7f28		db	0x52
7f29		db	0x53
7f2a		db	0x45
7f2b		db	0x20
7f2c		db	0x4c
7f2d		db	0x49
7f2e		db	0x4e
7f2f		db	0x45
7f30		db	0
7f31	#syntax_error
7f31		db	0x53
7f32		db	0x59
7f33		db	0x4e
7f34		db	0x54
7f35		db	0x41
7f36		db	0x58
7f37		db	0x20
7f38		db	0x45
7f39		db	0x52
7f3a		db	0x52
7f3b		db	0x4f
7f3c		db	0x52
7f3d		db	0
7f3e	#undefinedvar_error
7f3e		db	0x55
7f3f		db	0x4e
7f40		db	0x44
7f41		db	0x45
7f42		db	0x46
7f43		db	0x49
7f44		db	0x4e
7f45		db	0x45
7f46		db	0x44
7f47		db	0x20
7f48		db	0x56
7f49		db	0x41
7f4a		db	0x52
7f4b		db	0x49
7f4c		db	0x41
7f4d		db	0x42
7f4e		db	0x4c
7f4f		db	0x45
7f50		db	0
7f51	#undefinedcommand_error
7f51		db	0x55
7f52		db	0x4e
7f53		db	0x4b
7f54		db	0x4e
7f55		db	0x4f
7f56		db	0x57
7f57		db	0x4e
7f58		db	0x20
7f59		db	0x43
7f5a		db	0x4f
7f5b		db	0x4d
7f5c		db	0x4d
7f5d		db	0x41
7f5e		db	0x4e
7f5f		db	0x44
7f60		db	0
7f61	#return_error
7f61		db	0x53
7f62		db	0x54
7f63		db	0x41
7f64		db	0x43
7f65		db	0x4b
7f66		db	0x20
7f67		db	0x55
7f68		db	0x4e
7f69		db	0x44
7f6a		db	0x45
7f6b		db	0x52
7f6c		db	0x46
7f6d		db	0x4c
7f6e		db	0x4f
7f6f		db	0x57
7f70		db	0
7f71	#gosub_error
7f71		db	0x54
7f72		db	0x4f
7f73		db	0x4f
7f74		db	0x20
7f75		db	0x4d
7f76		db	0x41
7f77		db	0x4e
7f78		db	0x59
7f79		db	0x20
7f7a		db	0x47
7f7b		db	0x4f
7f7c		db	0x53
7f7d		db	0x55
7f7e		db	0x42
7f7f		db	0x53
7f80		db	0
